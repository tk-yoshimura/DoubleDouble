using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class BarnesGTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode c, Hexcode d)>> tables = new(){
                { nameof(PadeX0Table), PadeX0Table },
                { nameof(PadeX1Table), PadeX1Table },
                { nameof(PadeX2Table), PadeX2Table },
                { nameof(PadeX3Table), PadeX3Table },
                
                { nameof(PolyXNegativeTable), PolyXNegativeTable },
                
                { nameof(LogPolyX2Table), LogPolyX2Table },
                { nameof(LogPolyX3Table), LogPolyX3Table },
                
                { nameof(LogPadeX2p25Table), LogPadeX2p25Table },
                { nameof(LogPadeX2p50Table), LogPadeX2p50Table },
                
                { nameof(SterlingTable), SterlingTable },
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach ((Hexcode c, Hexcode d) in tables[key]) {
                    stream.Write((UInt64)c.Hi);
                    stream.Write((UInt64)c.Lo);
                    stream.Write((UInt64)d.Hi);
                    stream.Write((UInt64)d.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX0Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 0, 0x8000000000000000uL, 0x0000000000004AA6uL),  (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 1, 0xA8E67BC8F4077A56uL, 0xA46C1B87742E8120uL),  (+1, 0, 0xD24AFC7E963BBE40uL, 0x959ACF4DC620AE2EuL)),
                ((+1, 1, 0x83EF2BD1C4DF03EFuL, 0x1EFE68C31368AF11uL),  (+1, 0, 0xC517DF72B10FC261uL, 0xBB419DCF099EF8B6uL)),
                ((+1, -3, 0xA4D8E17E8F88BF9CuL, 0xFDCE2B6B53D237D1uL), (+1, -1, 0xF32FFE7765A8A61BuL, 0xD93956F9DDD9D3EFuL)),
                ((-1, -3, 0xF080EB96EFEE238DuL, 0xEF5397515A47C03AuL), (+1, -2, 0xDB8478813004D46BuL, 0x983E267873B2C9F7uL)),
                ((+1, -4, 0xAF04BCF5D5AD7494uL, 0x8D3FC98871B5294AuL), (+1, -3, 0x8F7DDF660ABF0E50uL, 0x7F8F8A09132BEBF5uL)),
                ((+1, -5, 0xAA3AB941E52DDC58uL, 0xC0AE3130342A890EuL), (+1, -5, 0x851571AC89B3D436uL, 0x07C0E6097A8B00ACuL)),
                ((-1, -6, 0x9B0891F2887A0D05uL, 0x45EA39427485B1C3uL), (+1, -8, 0x827E7C774C024FDFuL, 0xF3A55C19604CFB3BuL)),
                ((+1, -10, 0x952B72C1D13EC767uL, 0xAC6F36165F5BAB4BuL),(-1, -12, 0xA113429C18626427uL, 0xD1EBA2674300A633uL)),
                ((+1, -9, 0x84CF2AC15F67FEBDuL, 0x222B12CD76FE3EF5uL),  (-1, -12, 0xA1E7A4389A844C04uL, 0x8D9F0CC94DD8EDFAuL)),
                ((-1, -11, 0xB3F7F2A84EFAD693uL, 0x44D656ECD0206AEFuL),(-1, -14, 0x96BA4784F6D14FCBuL, 0x0772F367B8630CD2uL)),
                ((+1, -15, 0xE8B49BB3922A3A89uL, 0x946F40F7A1A32487uL), (-1, -17, 0x9EA5CF3881DFDCC1uL, 0xE0721C49A71C8429uL)),
                ((+1, -15, 0x8A047D7E293F2B0DuL, 0xC1206E54BCE8BDC1uL), (+1, -22, 0xCBFA3CE752A9F75FuL, 0xAD8C6B892621FA47uL)),
                ((-1, -17, 0xDD634A0F7F44AA9EuL, 0x7749FF9A1E58CA16uL), (+1, -23, 0xD4B7C7C70212FDBDuL, 0xBAFF65CFECA307D5uL)),
                ((+1, -19, 0xAA7D7F3DB30348F3uL, 0x026F209801180AE0uL), (+1, -25, 0xDD347E2B2D34B698uL, 0xCDF308EDDEF6CCD9uL)),
                ((-1, -22, 0x9145453E221EA32AuL, 0xC87786A8329272D6uL), (+1, -35, 0xC02027D9B0DB9C23uL, 0x27BFC77FA6A688DBuL)),
                ((+1, -27, 0xFBA24BD5B90EB276uL, 0xF489DAE269CCFC91uL), (+1, -32, 0xE5D73B541D1836F9uL, 0x2EA66E447726A3FAuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX1Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0xBEAFB5AB33A20246uL, 0x06703ABFEAA942A6uL), (+1, 0, 0x890FEE89A0A72FABuL, 0xBC11F2BF6B031084uL)),
                ((+1, -2, 0xB0D1AFF1E5CB32A8uL, 0x45014D1B8B9EF988uL), (+1, -1, 0x98FC93FCEF2CAF09uL, 0x6C4AF8EA4A3D927CuL)),
                ((-1, -4, 0xF90BC282C3F0DD31uL, 0x26973D24728B75A5uL), (+1, -3, 0x97E1753150D6C288uL, 0xF175FE5C141B6870uL)),
                ((+1, -5, 0xE930F1C6221D11FFuL, 0x1C5939AA1674B508uL), (-1, -8, 0xA69087CE6A28DFEAuL, 0xAF389C7BB47087CAuL)),
                ((+1, -6, 0xC0BFA24A4454672CuL, 0x44D12D4ADF359437uL), (-1, -6, 0x9EA2CB4885D99C63uL, 0xD0EF3DF5F62A5F4CuL)),
                ((-1, -7, 0x9E04C5CAFDD93B96uL, 0x963726A358E21D90uL), (-1, -8, 0xBEBA5530EB65BEDEuL, 0x02624C912D395FDAuL)),
                ((+1, -10, 0xEBDFD056EF41782BuL, 0x986FED934304108BuL), (-1, -12, 0xF225DE22AEFE21E3uL, 0xC2A5BEB999D3299BuL)),
                ((+1, -11, 0x86373BA3D72826C6uL, 0x830F9A41DD81CB51uL), (+1, -12, 0xA50DB92E1FDFFEA1uL, 0xCEC2AB1C5CBEAB8CuL)),
                ((-1, -12, 0x8773D0F9C4FD9132uL, 0x290FB01D8876DA06uL), (+1, -14, 0xBB231728DEA44D2DuL, 0xCF8EF2C94AF93C19uL)),
                ((+1, -15, 0xE0E7BA78953BB536uL, 0x4B4D2059958A103FuL), (+1, -17, 0x9186C646EF24B063uL, 0x361605EAE57D7BBCuL)),
                ((-1, -19, 0x92BBA0B0C52B7359uL, 0x5CF511442ABA78FEuL), (-1, -19, 0xF1EE6E1D3C5E447CuL, 0x69BEE37AA25DD546uL)),
                ((-1, -20, 0x9C2D055D2964DC89uL, 0x6F5C5A0BE012C068uL), (-1, -21, 0x9E06D27C7EC4CD92uL, 0x82039401F48BFC0BuL)),
                ((+1, -22, 0x9479BCE84631E903uL, 0x44EEFFA3AA8E969DuL), (-1, -24, 0x8381A971C4995C22uL, 0x1F5C89F943AC6DC7uL)),
                ((-1, -26, 0xD59031B8A20F01BBuL, 0x47EA5C51F4E49B41uL), (+1, -26, 0xED9E6ACC70EF7BABuL, 0x5E5392FF62914018uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xAF4BFB4024361DE9uL, 0xB75CA60949C29250uL), (+1, -1, 0x802AD74069D63165uL, 0x18B0028473EC322DuL)),
                ((-1, -7, 0xD249269BA0454E95uL, 0xF60BAAB08AAA156CuL), (+1, -6, 0xA4058F1783C15BB9uL, 0x26C9D6293BD558B3uL)),
                ((+1, -4, 0xA8E7D183FCD13177uL, 0x17ADC797297F70A7uL), (-1, -4, 0xA22C53478963B101uL, 0x41E3481F5870A03DuL)),
                ((+1, -7, 0xA9D17267AAE86CA2uL, 0xE3322D0C27A308ABuL), (-1, -6, 0xB1E7B3C2F211FF7BuL, 0x999BE7645E22F6F7uL)),
                ((-1, -10, 0x96D7F8370AF8CE97uL, 0x4E11D465827C7F92uL), (+1, -10, 0xF54050AE7AAD8639uL, 0xFF1BAB907984F35EuL)),
                ((+1, -9, 0xC46677EFCFDD4071uL, 0x99603DEBEFD21C0AuL), (+1, -9, 0x99426B05A1981D1CuL, 0x09525621FA682C97uL)),
                ((-1, -13, 0xC17501F027B75CACuL, 0xF274A019885B005BuL), (+1, -12, 0x80962286FE1ED2DAuL, 0x7FA04578D7911160uL)),
                ((+1, -15, 0xBA6BEBE25FBE6DEFuL, 0xF3A91BAF4E39B495uL), (-1, -14, 0xAAACC556B964C9D0uL, 0x3364DAE00DCF2B15uL)),
                ((+1, -15, 0xA9B173A9E3B79208uL, 0xE646CED26A2597A8uL), (-1, -16, 0xE6926F817C2BE7C7uL, 0xF42E0B390F13B52FuL)),
                ((-1, -17, 0x80F323C8086ABCFBuL, 0x00E49FFEAF902073uL), (+1, -20, 0x88F54A10E005A35FuL, 0x6EFE13735C7B6D99uL)),
                ((+1, -19, 0x92AFA8527C624E84uL, 0x17BA54755CC58D69uL), (+1, -21, 0xDF212D46CE3C7270uL, 0x884D6DE29DA70337uL)),
                ((-1, -24, 0xF6BE893A6B94FC42uL, 0xB1877DD91D076977uL), (+1, -24, 0xC2851392AB0DBFE9uL, 0xD2D726FF355CE2E4uL)),
                ((+1, -27, 0xCA7157F7292C3CD3uL, 0xA4BCB03BCBE5DCDBuL), (-1, -26, 0xD150577C81DC56B8uL, 0x7E5A3D943BEDF9F7uL)),
                ((+1, -29, 0xD046640E4B6EFD51uL, 0x906C389FA0D58675uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX3Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -4, 0xDA1C671989E37BD9uL, 0x5FFE0A460E9B2B2DuL), (-1, -3, 0xA1CCC663E55E99BFuL, 0x15013ED982B030A8uL)),
                ((+1, -3, 0x806F1D5412CE8B83uL, 0x41CF2B769CC81646uL), (-1, -3, 0xE577E7E4D7859FFAuL, 0x30B551F92A08B1F7uL)),
                ((+1, -5, 0xFB6FD2DE56872C2FuL, 0xD46F015658295A89uL), (+1, -8, 0x9FECE1D5E49BE625uL, 0xCDE3D3F3EB2C5B6AuL)),
                ((+1, -8, 0xA89516327BC471B7uL, 0x90128AA25CCC97ACuL), (+1, -5, 0x8151DF5C2B63DFB7uL, 0xEA8E1B3B331EC780uL)),
                ((+1, -8, 0xDBDABE2A8D36F23EuL, 0xB6625873B0D46E13uL), (+1, -10, 0xD5141A0B25D587D8uL, 0xBECE8CB6F552364FuL)),
                ((+1, -11, 0xE4CC2B06C205A960uL, 0x59251A1614ACD7D7uL), (-1, -9, 0xAEC3C256B5C8AD33uL, 0x28890621703A2160uL)),
                ((+1, -13, 0xD839FD36A0912B2FuL, 0x00953EB408208620uL), (-1, -12, 0xA213ADEDE40E5CACuL, 0x549C6AA174752EEDuL)),
                ((+1, -14, 0xDEA06191BFE5A466uL, 0xE160C21E4AB6CB27uL), (+1, -13, 0xA19F344E19B79924uL, 0xA9063BD8F7916FB5uL)),
                ((+1, -21, 0xB67CB6908570120FuL, 0xE9FAD50C34023775uL), (+1, -16, 0xD47F6F4E4439B7AAuL, 0xD8F17881E340BD05uL)),
                ((+1, -18, 0x8D8BEC5B75DBBE26uL, 0x172C2D82D0B90330uL), (-1, -18, 0xD18E9C029195F056uL, 0xBFBFA5305717FE11uL)),
                ((+1, -23, 0xF8003BAF775022FCuL, 0x483F65C640CE5354uL), (-1, -20, 0x9D083633A7B33CF3uL, 0x9801FBAFD6DB2FD7uL)),
                ((+1, -25, 0xA6AAB0C84824482DuL, 0xD1F5BEB40662D4DBuL), (+1, -23, 0xB0C5100FA2EA3971uL, 0x6473DC690CDE0D6CuL)),
                ((+1, -27, 0xC3E911D17635F732uL, 0x03C44FA3BAF64174uL), (+1, -25, 0x9DBC6B905B140A1CuL, 0x61928F5EE6A9148FuL)),
                (Hexcode.Zero, (-1, -28, 0xAF0412D8543E2224uL, 0x6E0ED894989B86C5uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PolyXNegativeTable
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xFF03F626A3A66CD9uL, 0x667ACF82456BEB7AuL)),
                ((+1, 0, 0x8EB57A6600A493AFuL, 0x4EBDB54C7EDC176EuL), (-1, -2, 0xFB7580B39AE30146uL, 0xF7A41BA27C4A72EAuL)),
                ((-1, -1, 0xE9E8DAC4857EAB8FuL, 0x0337CEB793CC577AuL), (-1, -3, 0xAB94D0DC534DA764uL, 0x44000A3D3BCE7293uL)),
                ((+1, -2, 0xA29B719781125D8BuL, 0x207C5C510D57EDCDuL), (+1, -3, 0xE4B12C1F52F491FBuL, 0x924074BAD78C6E7BuL)),
                ((+1, -7, 0x82160015D9F2E601uL, 0x32F0CA0D2CC381D8uL), (-1, -5, 0xFF2F382D88EF72DFuL, 0xCE1DFE148C512E4BuL)),
                ((-1, -5, 0x89FF749170E03629uL, 0x77687C7FDBC6E246uL), (-1, -10, 0xDC3F9F66906B6151uL, 0x772FE680F6025711uL)),
                ((+1, -8, 0xDD1961AEDCE7F432uL, 0xF6E3D9C110032C64uL), (+1, -9, 0xF09C7D3AB2F8DA7EuL, 0x523F6A56258F7948uL)),
                ((+1, -12, 0xFA6C26C59A77824CuL, 0xF5CACD7A52DD3885uL), (-1, -12, 0xE4C6142815E17E7BuL, 0xC5E8C7E1CADE85BAuL)),
                ((-1, -12, 0x973A8A8E57F6EB90uL, 0x8C3F3605C41A17FDuL), (-1, -14, 0x887AB08971741263uL, 0x2A561142BFAAA1ACuL)),
                ((+1, -17, 0xE62A391DF589C3DCuL, 0x469A7A931AFB3358uL), (+1, -16, 0x83527EACEB584396uL, 0x0CC2BEBA90FA6CE1uL)),
                ((+1, -18, 0xADFB73688047BA88uL, 0x9969E7D7D094E0F4uL), (+1, -22, 0x8DB00254AB2D5ED8uL, 0xDA9F2FA4B4EAAC02uL)),
                ((-1, -21, 0x8EE37E249DDABFD1uL, 0x4378240BB0344DDDuL), (-1, -22, 0x8D74AFAE96AA380AuL, 0xDAF5B41CE679DB39uL)),
                ((-1, -25, 0xE06F64D55B23701DuL, 0x76DF7577512457D0uL), (+1, -28, 0xEC0983B4F057A3A6uL, 0x59CB1574EC59C1B8uL)),
                ((+1, -27, 0x9136E52C635542F5uL, 0xE828C9EF7AE830D6uL), (+1, -29, 0xC18C2F53EE273849uL, 0xCF638AE841B61780uL)),
                ((+1, -32, 0xB20BBC6529129202uL, 0xDD52284719348F30uL), (-1, -33, 0x972C3AF376CBB8CFuL, 0x867E983A2EBA0386uL)),
                ((-1, -34, 0xBC10E6323D718BBAuL, 0xB38D061F1AA801BFuL), (-1, -36, 0xC03B6F3BA80B7B9AuL, 0x1C3C01960EC41F01uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPolyX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, -3, 0xA21366815EEC89C0uL, 0xF406BDFEF4E6ACCBuL), (+1, -5, 0x8AAFF20D96635460uL, 0xAF97161801168B36uL)),
                ((+1, -3, 0x972B3272EACED391uL, 0xF2FFB28D79317CD8uL), (-1, -6, 0xF536ED1416EC80BBuL, 0xFA69D1384F60991CuL)),
                ((+1, -7, 0x94C07CCAAF95327DuL, 0x8E5CB81021DB7E9FuL), (-1, -9, 0xD5EAC56FC6C315B6uL, 0xA3A4159729D299B1uL)),
                ((+1, -10, 0xA8679E7EE95B7612uL, 0x10695DA136E7008CuL), (-1, -11, 0x8BFB78E35D0D275BuL, 0x2C7AD5528EF08DB9uL)),
                ((+1, -13, 0xF10D3C7A51F0F35FuL, 0xF849319CDFD277C8uL), (-1, -14, 0xD49CEC5898CA04C8uL, 0x05BDF85DF468781DuL)),
                ((+1, -15, 0xBECC2D1E30D89129uL, 0x36C6BA621EBB7482uL), (-1, -16, 0xAD6F9767EAC44A1AuL, 0x62CD249E50C44E2FuL)),
                ((+1, -17, 0x9F384C7B302E0B7DuL, 0x5569EC9D68682E77uL), (-1, -18, 0x935102D6A55E7FCFuL, 0x963D4CCA18EC599AuL)),
                ((+1, -19, 0x892B8961E36CC5EAuL, 0xB55FE561DAD9C997uL), (-1, -20, 0x806555C9804656DAuL, 0xDEF27F75DC55872FuL)),
                ((+1, -22, 0xF16F9AF0B43672DBuL, 0x1ADDD2C642D72195uL), (-1, -23, 0xE3DDBD6C15CA1D93uL, 0x03AE104290AB988FuL)),
                ((+1, -24, 0xD7C6529A5BC0B293uL, 0x91C5BBC304F976F0uL), (-1, -25, 0xCCEC7C6F27155000uL, 0x4A04B566D6993DA9uL)),
                ((+1, -26, 0xC32048C10FD7B5CAuL, 0x44E1AA286DC6C33BuL), (-1, -27, 0xBA3B521E19F1B547uL, 0xD335C3A066F85FBFuL)),
                ((+1, -28, 0xB21E66E49C3C6556uL, 0xDBCC3CF2E256C303uL), (-1, -29, 0xAAAFDD81A1E047ECuL, 0xFA9066981DAAC347uL)),
                ((+1, -30, 0xA3DA5DA774B7B62BuL, 0xEEA6A67C0DAA6875uL), (-1, -31, 0x9D8BFA3D1271B839uL, 0x6F173A75B813D5EDuL)),
                ((+1, -32, 0x97B58420C304176AuL, 0x9BC13A29606469B1uL), (-1, -33, 0x924A05AA58C5F317uL, 0xBC3CA62A66421DFBuL)),
                ((+1, -34, 0x8D3E5BE7BEBB8B43uL, 0xB7028DDBAF23D6EAuL), (-1, -35, 0x8888E5E2D9CF7127uL, 0x14EF92800AE243D0uL)),
                ((+1, -36, 0x8421447B4C822759uL, 0x985B05B91CA65669uL), (-1, -37, 0x800026E476791C03uL, 0x42BFF00462352C3FuL)),
                ((+1, -39, 0xF83E41CC653FD809uL, 0x8F966579165931F9uL), (-1, -40, 0xF0F11179FB28755CuL, 0x8F05A08DBF894970uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPolyX3Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0x876D7CF855282BD5uL, 0xE28021FE82E712EDuL), (+1, -2, 0xB6706466E3499CBCuL, 0xFDA4050701986E24uL)),
                ((+1, -4, 0xA466641329ED731AuL, 0xB77BC42B3636FC13uL), (-1, -7, 0x993BAF605590CAB8uL, 0xD2917F42D47A72C0uL)),
                ((+1, -10, 0xDDF9EE125DEB6311uL, 0xA4243976A8BFED61uL), (-1, -12, 0xC3E070C75B0CB890uL, 0xDE66ECA548CC2C5AuL)),
                ((+1, -14, 0xC117068ECEB379C5uL, 0xC865B3E236C27B26uL), (-1, -16, 0xCC0424080ABC2D0BuL, 0xC50CCEF77943FEBDuL)),
                ((+1, -18, 0xE1D2C7DD0E56A4F7uL, 0xB4C5CD12FFFB6259uL), (-1, -19, 0x81227BFB42E6655AuL, 0xA46A2BB9BDEDF834uL)),
                ((+1, -21, 0x973FCC933246646EuL, 0x05CB76CF55421721uL), (-1, -23, 0xB457FA59B61C7A2EuL, 0xAC3922ACD115B7BEuL)),
                ((+1, -25, 0xDA015CBF1BF75203uL, 0x377C47CD7DA69F58uL), (-1, -26, 0x8531070B09234EB8uL, 0x661219C900925A52uL)),
                ((+1, -28, 0xA4274D4D857A0DFFuL, 0xB1651752190B4D7BuL), (-1, -30, 0xCBBB4FBB37742B26uL, 0x1DFE686D28BBED2BuL)),
                ((+1, -32, 0xFE509B3133F404C1uL, 0x943DF98E86AF3ED4uL), (-1, -33, 0x9F7F3247DEC77EF8uL, 0xFC85BC998FF550FCuL)),
                ((+1, -35, 0xC8E1E2FB5FBB3D6BuL, 0xAF473FE9AADFC7BDuL), (-1, -37, 0xFDE5EEEBCD5F9FBDuL, 0x826FA51A44815D21uL)),
                ((+1, -38, 0xA0F1A15E25263F4DuL, 0xC2CA6B9BAEFA64B1uL), (-1, -40, 0xCC96F39069F6A1B4uL, 0xDBAEF78116E680EDuL)),
                ((+1, -41, 0x82584BD8DFA77C93uL, 0xABAD6E514019FF9EuL), (-1, -43, 0xA67068D28CBEE6D7uL, 0x12DB294344957FACuL)),
                ((+1, -45, 0xD4EF2427A21103E5uL, 0x44B8B89824FE8100uL), (-1, -46, 0x8871CA34AD088743uL, 0x94B07063562A6D14uL)),
                ((+1, -48, 0xAF2363E51AAD6117uL, 0xA8C251898CC39025uL), (-1, -50, 0xE1213D57221757D2uL, 0x4340A8E0DA9F18B3uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX2p25Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, -5, 0x9067C67F89FC7F9CuL, 0x98B9407BB7EB4323uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, -3, 0xAA8203E055EBC61CuL, 0x98250D0819F003CFuL), (+1, 0, 0xB9A5D10E0B762213uL, 0x0F1005E4813D793FuL)),
                ((-1, -5, 0xFBF4A755E16CD16EuL, 0xAD37AC71D93BA551uL), (+1, -1, 0xD0F1B92120F19FFDuL, 0x8CF9064FA9E55AEBuL)),
                ((+1, -3, 0xDCD79F0670B828BEuL, 0x24423C0924CE7A93uL), (+1, -3, 0xE50FF78B96D0D313uL, 0x96A30B8C650DB1E8uL)),
                ((+1, -3, 0xF553F8DC7C3A0DFFuL, 0x3C95DED6FDB6156BuL), (+1, -6, 0xFA488058608775D9uL, 0x52C58B0841422A62uL)),
                ((+1, -4, 0xCFC1B3BDF18FDD75uL, 0x51FC8F801AD55521uL), (+1, -10, 0xF47FCBACD2EF5FEBuL, 0x15D9CBA0544E58E1uL)),
                ((+1, -6, 0xA6C97190AC3705A8uL, 0x186AA918E7590080uL), (+1, -15, 0x8E4FAE7277CCED48uL, 0x6DA10E7264F15C43uL)),
                ((+1, -10, 0xF4720B1DCC23B2DFuL, 0x1BAC497F432DF950uL), (-1, -23, 0x93394B3A63D1110EuL, 0xBB0D6CDC7A8EFAECuL)),
                ((+1, -15, 0xF86C650297C077E4uL, 0x67D9BC0FDB115124uL), (+1, -30, 0xDD1444318DB0D755uL, 0xF34F35787C5D8623uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX2p50Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, -5, 0xDC922F0B176648D3uL, 0x4F745E19EB538786uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, -4, 0xC5C08D2CFADEAE6AuL, 0x0763C32E5C4D4050uL), (+1, 0, 0xA6F05A5377E5784EuL, 0x20C5AD463EC9932DuL)),
                ((+1, -3, 0x990EE283B39CB88AuL, 0x6E009C0307249CBEuL), (+1, -1, 0xA8F4DF9A2FF45D68uL, 0xE72837C298BD52B2uL)),
                ((+1, -2, 0xBA8AE1E9B85AF8A0uL, 0x895B9711EC01487AuL), (+1, -3, 0xA692285B11B50D37uL, 0x6906D971C54BFFEDuL)),
                ((+1, -2, 0x8523A1478FA0EB16uL, 0x0FF89927D2DE1A01uL), (+1, -6, 0xA3B317A894A8E5C0uL, 0x4D9520CA9BB7F163uL)),
                ((+1, -4, 0xB2C214534C557CF0uL, 0xD1B87CB8E37C3059uL), (+1, -10, 0x8FEDDCC4855A8C76uL, 0x3471232DAC38B8D8uL)),
                ((+1, -7, 0xF159F4D4DBA60583uL, 0x4BA8E06206C31561uL), (+1, -16, 0x975FA812D85A9231uL, 0xF0488F48CC93B18DuL)),
                ((+1, -10, 0x989FE0DBE5D7975BuL, 0x1B56F19FEECB74EEuL), (-1, -24, 0x88D0FE4F2D523BB0uL, 0xC764AFE344B7A2BEuL)),
                ((+1, -15, 0x87BB1C75D4E53DDEuL, 0x9CCAB99B71C87C5AuL), (+1, -31, 0xB576F8697DD2C6F1uL, 0xA77CC443490D2097uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode s, Hexcode r)> SterlingTable
            = new(new (Hexcode s, Hexcode r)[]{
                ((-1, -8, 0x8888888888888888uL, 0x8888888888888888uL), (+1, -3, 0xF3CF3CF3CF3CF3CFuL, 0x3CF3CF3CF3CF3CF3uL)),
                ((-1, -11, 0xB60B60B60B60B60BuL, 0x60B60B60B60B60B6uL), (+1, 0, 0xAE8BA2E8BA2E8BA2uL, 0xE8BA2E8BA2E8BA2EuL)),
                ((-1, -9, 0x8A3BD6F0A23D5708uL, 0xA3BD6F0A23D5708AuL), (+1, 1, 0xD2B588B4CB058EA2uL, 0x44E8A8F011C86DA9uL)),
                ((-1, -5, 0x81AF6641AF6641AFuL, 0x6641AF6641AF6641uL), (+1, 2, 0xC0E9CF771BBFC487uL, 0xE65FE79DC7A709BAuL)),
                ((-1, 0, 0xBC22107B0495E92CuL, 0xECCBB25AF4093D79uL), (+1, 3, 0x993290AC966E2E82uL, 0xEE61D760E62CB3E0uL)),
                ((-1, 7, 0xA3FA4DF653C2536BuL, 0x0824DF653C2536B0uL), (+1, 3, 0xDEE8168C29CA49B3uL, 0x78C4D734A052C7D8uL)),
                ((-1, 15, 0x927991F539CF3304uL, 0xD806E188941F539CuL), (+1, 4, 0x98CAD716EB545A3AuL, 0x13FED0C14F0D60E7uL)),
                ((-1, 23, 0xF0447241E4286CB0uL, 0xF5397DC2064A8ED3uL), (+1, 4, 0xC89DAE7A6E85BB57uL, 0x3E40D39D2B394231uL)),
                ((-1, 33, 0xA6ED8202F953184AuL, 0x5F98F54869BD5318uL), (+1, 4, 0xFEEC91B071D9EC6FuL, 0xDD39B5FFB3FCD695uL)),
                ((-1, 43, 0xB8BCFFF811677446uL, 0x32A2B401BF760104uL), (+1, 5, 0x9DDBC05F3F317631uL, 0x9C611BFA5FECE453uL)),
                ((-1, 54, 0x9B18D46661E92599uL, 0x3BC04194CB62F8F7uL), (+1, 5, 0xBF7F3DD284B91E2CuL, 0xECD6E9A8E095416DuL)),
                ((-1, 65, 0xBDEB068B3A62D600uL, 0xF08F4CD7FE9AC1BBuL), (+1, 5, 0xE460C1320E348DF3uL, 0x3CD7F8348EB1DCF8uL)),
            });
    }
}
