using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class BarnesGTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode c, Hexcode d)>> tables = new(){
                { nameof(PadeX0Table), PadeX0Table },
                { nameof(PadeX1Table), PadeX1Table },
                { nameof(PadeX2Table), PadeX2Table },
                { nameof(PadeX3Table), PadeX3Table },
                { nameof(LogPadeX0p25Table), LogPadeX0p25Table },
                { nameof(LogPadeX0p75Table), LogPadeX0p75Table },
                { nameof(LogPadeX1p25Table), LogPadeX1p25Table },
                { nameof(LogPadeX1p75Table), LogPadeX1p75Table },
                { nameof(LogPadeX2p25Table), LogPadeX2p25Table },
                { nameof(LogPadeX2p75Table), LogPadeX2p75Table },
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach ((Hexcode c, Hexcode d) in tables[key]) {
                    stream.Write((UInt64)c.Hi);
                    stream.Write((UInt64)c.Lo);
                    stream.Write((UInt64)d.Hi);
                    stream.Write((UInt64)d.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX0Table
            = new(new (Hexcode c, Hexcode d)[]{
                (Hexcode.Zero, (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0x8000000000000000uL, 0x0000000000002A97uL), (+1, 1, 0x8AAA3877C377B985uL, 0xB304107AA69362F7uL)),
                ((+1, 1, 0xCA6B36016C6154BCuL, 0x0CA2C45B37EAF717uL), (+1, 1, 0x9F32E73F432AF663uL, 0x1079A1A3F9045795uL)),
                ((+1, 1, 0xE1F9DD9EB82037A5uL, 0x43C5A715063C59A3uL), (+1, 0, 0xF345BCEA39CAEA2BuL, 0xF67A245D5A1F059BuL)),
                ((+1, 0, 0xBC61D2E1C0B80D93uL, 0x140531BC52A2DEB5uL), (+1, 0, 0x87C79A20E2F7FC91uL, 0xF01F05873EFE9A14uL)),
                ((+1, -6, 0xF85682A9DA22ACDBuL, 0xF44C020EFE112B69uL), (+1, -2, 0xE49A15872C15B45FuL, 0x086A954D82955267uL)),
                ((-1, -6, 0xCF9375F963166189uL, 0xE24E23A02A58A590uL), (+1, -3, 0x911147E59B99D30EuL, 0x047747AD4FBCEB8EuL)),
                ((+1, -4, 0x80135BE8F2FA441FuL, 0x8A912750BB94864BuL), (+1, -5, 0x82D5D32675DEB9A9uL, 0xEB78D5F3A0834BA8uL)),
                ((+1, -7, 0x97F619EA0F0334ABuL, 0x02AEFDC793E9EBD0uL), (+1, -8, 0x80BC264424B1ADC6uL, 0x3AD5C6C5AB7A8874uL)),
                ((-1, -8, 0x9C0E8E9FC96D5DE4uL, 0x76042BF8BB4B7D11uL), (-1, -12, 0xCA118751AEEEA83BuL, 0x1C893A914E7A06F4uL)),
                ((+1, -10, 0x8086768589AD87E7uL, 0x779FBF15B3FA79F6uL), (-1, -12, 0xAE8377E6D31D4FC8uL, 0x425EB4FFB5DCC928uL)),
                ((+1, -12, 0xBEE844128E028785uL, 0x9F9EA69947AC6C34uL), (-1, -14, 0xB6AEB580893758ADuL, 0xF7DC8B0CBC906241uL)),
                ((-1, -14, 0xEBA269A294047E26uL, 0x809E52BFE190E2F7uL), (-1, -17, 0xC2B464648C8974A5uL, 0xD9E828DE40CB9F86uL)),
                ((+1, -17, 0xA92ED8905AEAA6ACuL, 0x3DE9A93A8D53C2C8uL), (-1, -24, 0xA9BCE4684DC62CF2uL, 0x7A307C611784DF85uL)),
                ((+1, -18, 0x9435AFCCC176F98BuL, 0x056CFD736BB71126uL), (+1, -22, 0xACB45DB57EBB8026uL, 0xE1A798B676D0A394uL)),
                ((-1, -20, 0x92986CD3827B849CuL, 0x2F570E44D56428BFuL), (+1, -24, 0x8BBCC9D5699ABA85uL, 0x4D8CD5570A42354AuL)),
                ((+1, -23, 0x841F6DAA7A05C629uL, 0x89911413F7818465uL), (+1, -28, 0xD6571BE214EF0C55uL, 0x510E6DCE79EAF742uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX1Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 1, 0x8593E51930862F87uL, 0xBAAA2AC8119C378DuL), (+1, 0, 0xD5880310CE118C75uL, 0x2AF60D8F812D85ECuL)),
                ((+1, 0, 0xB41588BCE6FB4349uL, 0xD4517BA2A2A5A9C0uL), (+1, 0, 0xB4563A1EADB81661uL, 0x47011E6756153F59uL)),
                ((+1, -2, 0xC0104B1E27B12195uL, 0x9EAF7C5B72067EB9uL), (+1, -1, 0xB94FD250F3026F72uL, 0x69E9CA4E24F4C9A4uL)),
                ((+1, -4, 0xCF848D78253CF328uL, 0x68AF33B8A3FBFD3BuL), (+1, -3, 0xEAC3130ECCACAC1AuL, 0x75A7C33C185B280EuL)),
                ((+1, -5, 0xF01B010C90EA2530uL, 0xBB2FD1BF61C1201BuL), (+1, -5, 0x802D0E34BE087178uL, 0x5AC7010D5B203796uL)),
                ((+1, -7, 0xE266EF0F7D0F355FuL, 0x8D713630DC63F692uL), (-1, -7, 0x86367EF6E01EEA10uL, 0xDC953EB4054E0583uL)),
                ((+1, -9, 0x844205258C520B09uL, 0x3BEE0A1DDADB8116uL), (-1, -8, 0xBA2D135FB875B706uL, 0xC751D9B76B42E276uL)),
                ((+1, -10, 0x8A510AFC385E3545uL, 0x80404DA0D6687FAFuL), (-1, -10, 0xB2423C5DE8DAA73AuL, 0xAAAC2C4623456CD9uL)),
                ((+1, -13, 0xE36FBF8290D2A375uL, 0x7F5F41A45AE5AC0EuL), (-1, -14, 0xA36751D25C5B670FuL, 0xD935342345A03793uL)),
                ((+1, -16, 0xF62D173671264D1AuL, 0x2889761AF12231BFuL), (+1, -15, 0xD35CFC4CF53DCA38uL, 0x277F07D08EC2AF7EuL)),
                ((+1, -17, 0x8A20451838ABA763uL, 0x56B58B03AD02EC16uL), (+1, -16, 0x870351D723292D1FuL, 0x9B341F4ABC072FE4uL)),
                ((+1, -19, 0x8095B8A97B6FA542uL, 0x65031CC9747ECA9FuL), (+1, -20, 0xF055630F3B9B8B23uL, 0xDEA6FA4D98DA9212uL)),
                ((+1, -22, 0xC2FAE3873113013CuL, 0x32612145545BD6BBuL), (-1, -23, 0xB75B652F0EB46B1DuL, 0x7DFC3645CE9B81C0uL)),
                ((-1, -26, 0xB6C8A07F5F0C3CBCuL, 0xC9F88B6E07A0434AuL), (-1, -24, 0x9F710BEC7EF9A517uL, 0xE39EE57D874B8C09uL)),
                ((+1, -26, 0xA1DC17A24CEA24FCuL, 0x94B9A5E1AC4C54BBuL), (-1, -27, 0x9BD353DDAFC70DDEuL, 0x03774B8D237D0B42uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -1, 0x98554C84F02F5F4BuL, 0x34F5696937C76453uL), (+1, -1, 0xC0DA262547EA81BBuL, 0x71F718E8F51AC16DuL)),
                ((+1, -4, 0xAE4D4D8B17E844F3uL, 0x06311F3667C5BDA2uL), (+1, -3, 0xA1BFC1E86FB80E65uL, 0xF95DA6E779ABDED3uL)),
                ((+1, -4, 0xB6BABA1B618C95FDuL, 0x467EF80BF03C05ADuL), (-1, -5, 0xFF47E2C0C06573A1uL, 0x932D2E109758BD60uL)),
                ((+1, -5, 0x87B0B511AEF9275FuL, 0x788BFF45A0283F0AuL), (-1, -5, 0x9D8C49E9229EAA2CuL, 0x032DC09FF86A2562uL)),
                ((+1, -9, 0x933C04897C8FE17EuL, 0xDAC38A34FBACF37BuL), (-1, -8, 0x930FAA6074A06636uL, 0x28CCD979DEB8EDA8uL)),
                ((+1, -9, 0xD8C3F7D1BA5446BEuL, 0xC083B323EC7CD1CCuL), (+1, -9, 0x8659076C2B1C3B3FuL, 0xB6FFDB09596817D1uL)),
                ((+1, -11, 0xA2557D9BE4F006DDuL, 0x854F893C6FD89F2FuL), (+1, -11, 0xBD7AA4C1A3B71412uL, 0xDE2C52D16F611FB4uL)),
                ((+1, -16, 0x841909997A1A170DuL, 0xB9E85ED7DE08FB48uL), (+1, -16, 0xBB12674CCEDCA0BDuL, 0x0931655DB0BCE7AEuL)),
                ((+1, -14, 0x8D8BB727B287FC39uL, 0xE5BAD0CE319E2A9AuL), (-1, -15, 0x800A4A23823B84D7uL, 0xCB2C1D230F5B4827uL)),
                ((+1, -20, 0xCAC4A5211B1AEB80uL, 0x77043D8509179B8DuL), (-1, -18, 0xB145443F36C56D7AuL, 0x27D0E1E22E906E06uL)),
                ((+1, -21, 0xB46503F278DCA11CuL, 0xF24E21B99A6973B0uL), (+1, -22, 0x91FC8707AE7D9E63uL, 0xBE6559DE0A41630FuL)),
                ((+1, -21, 0xA47192D08AF9FF29uL, 0x554D1D82D1251EC2uL), (+1, -23, 0xAC35EBB85CF93678uL, 0x0095B5C3609D17C4uL)),
                ((-1, -25, 0xF7BAAAC8084F1F1CuL, 0x399204F63A2CB765uL), (+1, -27, 0x90D26A97C7B5B648uL, 0x46BA1372F9191EF3uL)),
                ((+1, -26, 0x88D5EAED518CD41DuL, 0xE89CCBEA8487F28AuL), (-1, -30, 0xAFCEF25A79DB5C4CuL, 0x262946FC19FA7BFFuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX3Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xDDEEE15AEDCE9089uL, 0xA27A39C8C04B8B1AuL), (+1, -3, 0xAD02C8C5314CC967uL, 0x7FF42F947B064D01uL)),
                ((+1, -3, 0xE838AE9C4FF22629uL, 0x8B4DBA1333B88209uL), (-1, -3, 0xD63DA9C493008EFFuL, 0x79B132260E0ABFA8uL)),
                ((+1, -4, 0xE317F017B8E6E82FuL, 0x49D8A622B3C229F2uL), (-1, -4, 0x9EB6ADABEBDAEE72uL, 0xB287D68C7CE1F19CuL)),
                ((+1, -5, 0x8E48A04D3B78205FuL, 0x1CD61D37D2C2F672uL), (+1, -6, 0x9C2B3D9BB041A365uL, 0x6B57087BC1315498uL)),
                ((+1, -7, 0xCB56F3F7743A2F2CuL, 0x1D28A4B912AA0F24uL), (+1, -7, 0xBB8725246F87C7A1uL, 0x422601209DC14152uL)),
                ((+1, -9, 0xEC55AE3DCACB74ECuL, 0x8A7D6F260B14AD4AuL), (-1, -13, 0xBFBA5288C6B0B0E9uL, 0x39BA52A5A48E821CuL)),
                ((+1, -11, 0xF87BAAE745E8711CuL, 0xBB43BC6A02D77618uL), (-1, -11, 0xFD62B21C19A038CCuL, 0xA3F72ABD600EED32uL)),
                ((+1, -13, 0xEFC58612228F2D05uL, 0x689B8EE88F7996B3uL), (-1, -14, 0xBBB9D386D16E374DuL, 0xB867B65B0962C84FuL)),
                ((+1, -15, 0xE180CB4DA55F4BDAuL, 0x6CF8433EF244411EuL), (+1, -15, 0xBC0E7E28BFAE9280uL, 0x3BA09409531EA597uL)),
                ((+1, -17, 0xA7D702AEDB189921uL, 0x7D148819F92CB62CuL), (+1, -17, 0x948A8FA7003543A9uL, 0x43B48309255E5538uL)),
                ((+1, -20, 0xF16BDCDA265FE7CEuL, 0xED5690C9A396DDCFuL), (-1, -20, 0x9CBD0A79716C1C88uL, 0xA7C6CAFF9514AF76uL)),
                ((+1, -22, 0xBDFCC3F9FA9D6ADFuL, 0xE499E04BA1663125uL), (-1, -22, 0xC021F4E57241CA24uL, 0xF37A3B6C180049C5uL)),
                ((+1, -26, 0xC6F9D201A1D28F9FuL, 0x75B769D08EE53E85uL), (+1, -28, 0x977686B39764D71BuL, 0x2334C65926D71409uL)),
                ((+1, -28, 0xFC9F1DA60C0DE97CuL, 0x8D82C932BA85C05EuL), (+1, -27, 0x860E9D9D9CDFF93EuL, 0xD9F4BD11A1B2965AuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX0p25Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 0, 0x9CCCFE5841701C34uL, 0x31F57124DB8C8FF6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 4, 0xCA876FF667756A67uL, 0x097FE062E5200AC2uL), (+1, 4, 0xC1AB2EDE4EB0BD84uL, 0xD9AF3127483A8A1CuL)),
                ((-1, 7, 0xDCC11692F755A44BuL, 0x4452DD9652D42416uL), (+1, 8, 0x8148800C6542BF4FuL, 0x4E822EE8C4B221C8uL)),
                ((-1, 10, 0x82230A91596B81C5uL, 0x4FE705527EB9E312uL), (+1, 10, 0xC893731F096B8CD8uL, 0x50B831900414F758uL)),
                ((-1, 11, 0xAD323ACFC6AED02AuL, 0xDE19E6F7622D1912uL), (+1, 12, 0xC86E63B8DDE6E296uL, 0xC3A260E8DA3BDD9DuL)),
                ((-1, 11, 0xE09E570AC532F43DuL, 0x33D37EDDCAC6D13EuL), (+1, 14, 0x872E0C3AC9F2E53BuL, 0x27F0626370CB3CDEuL)),
                ((+1, 8, 0xD64509BB43D0FECDuL, 0xC40D0D5FA323E6B2uL), (+1, 14, 0xFADC9FF90C9347C0uL, 0x4223791D3B0028D6uL)),
                ((+1, 13, 0x83BE02F9A92797B9uL, 0x46BC428B3F0DB207uL), (+1, 15, 0xA0401AC0571CB7A7uL, 0xA7CAEFF8DAE1E4F3uL)),
                ((+1, 13, 0xACACE3283616AB28uL, 0x4A1D04CF33471595uL), (+1, 15, 0x8AE7037BF82F80F2uL, 0xC9C818F9FF82F071uL)),
                ((+1, 11, 0xFB9EED4699DC88C1uL, 0x07CAC01B0A1F5CAEuL), (+1, 14, 0x9E4FE0A0DDAD0E9AuL, 0xA522C2EFECEA291CuL)),
                ((-1, 11, 0xBA3E3789AD183343uL, 0xC93F25ED9BF5A023uL), (+1, 12, 0xE0B80F073FBEF3FDuL, 0x551FDF8E0F940571uL)),
                ((-1, 11, 0xB5B6101CDDCB7C2EuL, 0xF01AD4F36D2D4740uL), (+1, 10, 0xB50DCC449646CC27uL, 0x3B8BB6618D76F475uL)),
                ((-1, 8, 0xDEC06B3682BEA08FuL, 0x7EB52EBA0CB47D0CuL), (+1, 7, 0x8AEF1B96FADDB023uL, 0xD9F6C05E6C4E0F84uL)),
                ((+1, 7, 0xFBBE4D2C1A70A342uL, 0x3AD8D21EC04D1BF4uL), (+1, 1, 0xFF7AD5D7D10A062EuL, 0xD776D73936F20D7CuL)),
                ((+1, 6, 0xA923E57CD3EF1A4DuL, 0x7E8A298083A9989BuL), (-1, -6, 0xF075DE40E424E698uL, 0x5898DF69F169A567uL)),
                ((+1, 2, 0xC42A90DF5245834DuL, 0xC24034CC1F784457uL), (+1, -11, 0x9791CA091D6E548DuL, 0xB8C6CAF46C427977uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX0p75Table
            = new(new (Hexcode c, Hexcode d)[]{
                (Hexcode.Zero, (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xD67F1C864BEB4A69uL, 0x297920028831CD86uL), (+1, 2, 0xAFDC684BC79C33B8uL, 0xA924AC2696563083uL)),
                ((+1, 0, 0xC1C2084607592E89uL, 0xC4927D06CFD9B189uL), (+1, 3, 0xD0B9C652BADE89A8uL, 0xC034173814639D74uL)),
                ((+1, 0, 0xD6FD053D6F197437uL, 0xAA000335780FAA0AuL), (+1, 4, 0x8C0428A1E259BC1CuL, 0x21B7638653DDDCE8uL)),
                ((-1, -3, 0xF866710EE98510FAuL, 0xE22570EE2F358E91uL), (+1, 3, 0xE943A3BA9A5FE71AuL, 0x177D546A31D6E83CuL)),
                ((-1, 0, 0xFD0380FD5DEDBD31uL, 0x0C5B3323FE014690uL), (+1, 2, 0xF97C402A6C6E4DD6uL, 0x3C18B991AE6A7D22uL)),
                ((-1, 0, 0xC4D8B67925A41FF4uL, 0x4BA0251167F5FD33uL), (+1, 1, 0xAB0D2521613CED13uL, 0x926476CB084986D4uL)),
                ((-1, -2, 0x8CC9232E5C05933EuL, 0x4D5D99E7812A11FBuL), (+1, -1, 0x918408CEA099A0E1uL, 0x25582CA9DED28818uL)),
                ((+1, -3, 0xEC5D1D1D43426E89uL, 0x78001D5469C4C1FCuL), (+1, -4, 0x8E8109B84D466CB3uL, 0xECA322EEC07E6C17uL)),
                ((+1, -3, 0x98EE517A17B12974uL, 0x6F1E860AE1CABFEBuL), (+1, -8, 0x89114D61AF2AEF5EuL, 0xD446E733E6D9B203uL)),
                ((+1, -5, 0x926857D77515FD8CuL, 0x356664DEB964C75EuL), (+1, -14, 0xA71327FD7EC6A231uL, 0x1B3D0DBF9E549A06uL)),
                ((+1, -9, 0xF69DA93F6D5BE140uL, 0x04028B3E5A90C45FuL), (-1, -22, 0xC36EF70A4B6B3BE4uL, 0x49A3B717034577BFuL)),
                ((+1, -13, 0x8F4B14F310591A0BuL, 0xEA48BE0D8D317922uL), (+1, -28, 0xADA99687B23C025AuL, 0x003CFD2EF8887335uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX1p25Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -4, 0x810EDB5CA07BCBD5uL, 0x9943C37A553864FAuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xB26F5C2C849DCE5DuL, 0x5B340B6A3ABE69E2uL), (+1, 1, 0xF01EC7EB854D34E8uL, 0x93130FBD8DB2D5B2uL)),
                ((+1, -2, 0xA958C8460A2357D6uL, 0xA39C71257F891595uL), (+1, 2, 0xBE1521E952DE10F7uL, 0xE1E59C97D820D544uL)),
                ((-1, -2, 0xD006BD64827A9725uL, 0xBEC2C364B2D486E1uL), (+1, 2, 0xA52CF3360154EC94uL, 0x73C176FF72163EBAuL)),
                ((-1, -1, 0xDB3115996286622EuL, 0x9F5FE041727BA6D1uL), (+1, 1, 0xAB9CD5DC39FA0DAFuL, 0x0B2D544851D2C12BuL)),
                ((-1, -2, 0xE027D7A85BC7C6D7uL, 0x63165581F9E108CFuL), (+1, -1, 0xD9A65A9B95795A8BuL, 0x13109D60EFE4D941uL)),
                ((+1, -5, 0xEB8B578A36820D7BuL, 0x7675B1E8524CFE8AuL), (+1, -3, 0xA4D65C375B2C1E9CuL, 0x050B20186E144738uL)),
                ((+1, -3, 0x912D28D8B0B07964uL, 0x3A828CE3819E876CuL), (+1, -6, 0x8B1AAE6DE940FD96uL, 0xFD87F74B432E11C6uL)),
                ((+1, -5, 0xEC1EA129DF42B152uL, 0x5FA1F5566F34FD15uL), (+1, -11, 0xDFF3B38551A79A41uL, 0x327A3242080ED204uL)),
                ((+1, -7, 0xABF21996C49B74ECuL, 0xAE546EAB95420406uL), (+1, -17, 0xDF9510B057AB1C19uL, 0x0C0B936F2F8D623FuL)),
                ((+1, -11, 0xE1CC8DBFA501EBABuL, 0xD56FDDD3B04C5923uL), (-1, -25, 0xBF16E4DBD5E82EEBuL, 0x6F0E29CAA126C3F3uL)),
                ((+1, -16, 0xCAF0C64D846DCE5CuL, 0xC8286C3D8E10E886uL), (+1, -32, 0xF0109945A4BCF669uL, 0xFB5EBF2D0BD9D756uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX1p75Table
            = new(new (Hexcode c, Hexcode d)[]{
                (Hexcode.Zero, (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, -3, 0xA21366815EEC89C0uL, 0xF406BDFEF4EAB4A4uL), (+1, 1, 0x8B97FF6D2344120CuL, 0x082C5533A9F1EC0BuL)),
                ((-1, -2, 0x9F6B895E8E48F28BuL, 0xCFCC45BCF6D9E092uL), (+1, 0, 0xFCD9B6A59EEFA4A2uL, 0x8EA1BD690AFBCCC3uL)),
                ((-1, -4, 0xBABD95DEA5362DFFuL, 0x4BF218BBD91598E2uL), (+1, -1, 0xF5DC72189D3B5ABBuL, 0xC234A3BEC9D090C1uL)),
                ((+1, -3, 0xD3E769580EA7DD62uL, 0xEB103011AF0D2F7BuL), (+1, -2, 0x8A71F7F719B7A17CuL, 0xC5AAC98473598E06uL)),
                ((+1, -3, 0xE688222D8FD030ADuL, 0xEDAE617C30CF88D5uL), (+1, -5, 0xB55783EFA19849C7uL, 0xC15E5B5EA7295369uL)),
                ((+1, -4, 0xCF890FF87CF8E849uL, 0xADF2B8016666E3F2uL), (+1, -8, 0x82E472665FEE469AuL, 0xB07FAEFE1E04A9C8uL)),
                ((+1, -6, 0xC5BB278961B472ABuL, 0x5538A6DC8377BDD5uL), (+1, -13, 0xB45634A3A3816429uL, 0xBFBE460CB44D8978uL)),
                ((+1, -9, 0xCA7F0A2A44F226CAuL, 0x7979E855493B8A29uL), (+1, -19, 0x9C0A5662D2BF314CuL, 0x1C0AF8A1EC830E75uL)),
                ((+1, -13, 0xCAA947D602F1727DuL, 0x75E8618FF7FE38DEuL), (-1, -28, 0xE3182432860CE6B7uL, 0xC3ABF00F68B0DE6BuL)),
                ((+1, -18, 0x92A0132CF7ED2D96uL, 0x55748E207A569F6DuL), (+1, -35, 0xFF722DEC919CC15BuL, 0x925739771CCC46C1uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX2p25Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, -5, 0x9067C67F89FC7F9CuL, 0x98B9407BB7EB4323uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, -3, 0xB9E85579DA0A9518uL, 0xC4A17CFEB48C9069uL), (+1, 0, 0xF03F99EC63D15309uL, 0xF19E8DC3B7B037BEuL)),
                ((-1, -3, 0x8886228FE3835132uL, 0xE1D173AD0253C2B8uL), (+1, 0, 0xBA81A587397D2967uL, 0x8D39A6CD5B8C8FC1uL)),
                ((+1, -3, 0xBE2CC59257982C1DuL, 0x8B26DF83479C8174uL), (+1, -1, 0x9AB89E7334956D92uL, 0x1E42DB3CE3DE371AuL)),
                ((+1, -2, 0xA90B27800C50627BuL, 0x898250D79C3CEBACuL), (+1, -3, 0x93D1E8A5C2172761uL, 0xCE9DEEBBD3013748uL)),
                ((+1, -3, 0xD5719782E28B5BDDuL, 0xA771A99A3F5EF5BBuL), (+1, -6, 0xA31FB4C14D109A73uL, 0xF2B04B5CA218AC1BuL)),
                ((+1, -4, 0x8D5ADFD8D3931EBCuL, 0x6240D98A0F909A92uL), (+1, -10, 0xC4BF0E9AEE6D0A60uL, 0xA58E3449D920706AuL)),
                ((+1, -7, 0xD2486FED27589EDEuL, 0x350D12283BC63D20uL), (+1, -15, 0xE053A72A7008FCDAuL, 0xA23787F3173A8772uL)),
                ((+1, -10, 0xAB7AE0689E946279uL, 0x69C620E5CF0EC6C8uL), (+1, -21, 0x9F96A68EBDE69668uL, 0x894CEBBA4EC3572EuL)),
                ((+1, -14, 0x8928C8597B66CD49uL, 0x9D772A328DD595ADuL), (-1, -30, 0xAF8BA5780A31A950uL, 0x8840529D6B1FD135uL)),
                ((+1, -20, 0x9DA6284FBD9BF79EuL, 0x9E91837C5278753AuL), (+1, -37, 0x944B571E68D12F68uL, 0x83F5484E53038F9BuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> LogPadeX2p75Table
            = new(new (Hexcode c, Hexcode d)[]{
                (Hexcode.Zero, (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0x876D7CF855282BD5uL, 0xE28021FE82ED124EuL), (+1, 0, 0xA1FA070D352799B4uL, 0xD58DB21C76402EC6uL)),
                ((+1, -1, 0xB0E85272A4CEFBF8uL, 0xCA7C7E483FF90613uL), (+1, -1, 0xA572C58FB7C32627uL, 0xF3C4E4D269513419uL)),
                ((+1, -1, 0xB3BECED821FFF363uL, 0xEF4CF0EF8F0EEC48uL), (+1, -3, 0xAE7744A5EFCC4CD1uL, 0x20F909ABFDAA3016uL)),
                ((+1, -2, 0xBC33B99724737D8EuL, 0x46503F530225A1C2uL), (+1, -6, 0xC93FA6CFE580A176uL, 0x4A6DEBE8579394C6uL)),
                ((+1, -4, 0xDF1EC60F9E6A32DCuL, 0x72A4E72852A6115AuL), (+1, -10, 0xF693D320FECF08CCuL, 0x86798FBC353C9622uL)),
                ((+1, -6, 0x98CE50DABD4BB997uL, 0xB827CE88CB25F428uL), (+1, -14, 0x8CE94733873365F1uL, 0x938682E152EFD0B6uL)),
                ((+1, -10, 0xE95EF76FC4ECCA91uL, 0x9E21EF9F887167D2uL), (+1, -21, 0xC8682852068DDD3BuL, 0xE33B417A0871C6BEuL)),
                ((+1, -14, 0xB191077D1AB82FFEuL, 0x0CC49D0323C2F9A8uL), (-1, -30, 0xDEF2198D7E049EF7uL, 0xA082B295E0C120A6uL)),
                ((+1, -20, 0xC5DA84C140392B3FuL, 0x4CA291A9A6892BCAuL), (+1, -37, 0xC24E4DBC6368EFCBuL, 0x56DD9A2445D80D5FuL)),
        });
    }
}
