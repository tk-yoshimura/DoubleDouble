using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class CiSiTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)>> tables = new(){
                { nameof(PadeX0Table), PadeX0Table },
                { nameof(PadeX1Table), PadeX1Table },
                { nameof(PadeX2Table), PadeX2Table },
                { nameof(PadeX3Table), PadeX3Table },
                { nameof(PadeX4Table), PadeX4Table },
                { nameof(PadeX5Table), PadeX5Table },
                { nameof(PadeX6Table), PadeX6Table },
                { nameof(PadeX7Table), PadeX7Table },
                { nameof(PadeX8Table), PadeX8Table },
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach((Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd) in tables[key]) {
                    stream.Write((UInt64)fc.Hi);
                    stream.Write((UInt64)fc.Lo);
                    stream.Write((UInt64)fd.Hi);
                    stream.Write((UInt64)fd.Lo);
                    stream.Write((UInt64)gc.Hi);
                    stream.Write((UInt64)gc.Lo);
                    stream.Write((UInt64)gd.Hi);
                    stream.Write((UInt64)gd.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX0Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0x9F175294344D7CC2uL, 0x816661D1F0F37DF9uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -2, 0xAFCF3C761A9FA924uL, 0xF69B41CA1D861207uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 1, 0xF46BF265F68D032FuL, 0xC0DD623681AB47DEuL), (+1, 2, 0xB655F9BE794B6FB2uL, 0x03558C31C4178257uL), (+1, 1, 0x8B26E72B3E696896uL, 0x76F75A120A69F0BAuL), (+1, 2, 0xADE6621622667978uL, 0x27C7D2222C5847CEuL)),
                ((+1, 3, 0xA58C4914FB1BCD78uL, 0x196F8BB2A127B93CuL), (+1, 3, 0xE5905DD532D24C21uL, 0xC434C12F59764FE9uL), (+1, 2, 0xC1537F56A9510D7FuL, 0x0925381E1353905AuL), (+1, 3, 0xCF714C4E1E698132uL, 0x8C8C1A140EB13A41uL)),
                ((+1, 4, 0x822EE26C597E0110uL, 0x87F68C97A6731821uL), (+1, 4, 0xA8661EFF5DCDD6DBuL, 0x903515366771E163uL), (+1, 3, 0x9AEBAC50CD897A1DuL, 0xE6201FBE00D45C9AuL), (+1, 4, 0x8F1E2080182EAC89uL, 0xC017265D9989DFD3uL)),
                ((+1, 4, 0x83C7A19ADBA3F96FuL, 0x723C6A1E5ADB0CE9uL), (+1, 4, 0x9FD8C824F13F8699uL, 0xF05A3C7207F16DC3uL), (+1, 3, 0x9E649FBAF6CCD29FuL, 0x9D8616E2B5D5682BuL), (+1, 3, 0xFD7DDDCA73CFEE42uL, 0xB1C88B4179140043uL)),
                ((+1, 3, 0xB40E7BB291E86181uL, 0x1C6AC768DCDCA46DuL), (+1, 3, 0xCE4327512CE7F390uL, 0x56E2A123ECD5B7D0uL), (+1, 2, 0xD7FE1C99E53D74C0uL, 0x648B2A0E628DF400uL), (+1, 3, 0x9755E4F39F916BC6uL, 0x17FB83D129D5C800uL)),
                ((+1, 2, 0xA9897FB3A6DFEBACuL, 0x186D539E335C7F33uL), (+1, 2, 0xB91BDA6EE9109EF6uL, 0x8CCD4220AD967ADBuL), (+1, 1, 0xC7D96F8BFA034E2EuL, 0x22C73AFDFC6E5A33uL), (+1, 1, 0xF96AA63D51A45FAAuL, 0xB2AC3975E6E04FA6uL)),
                ((+1, 0, 0xDD2571AEB9C32872uL, 0x185F0FB51188E41DuL), (+1, 0, 0xE8B6EF3E5ADE76EFuL, 0x1CD0A1721EC2B915uL), (+1, -1, 0xFB6A0D84BF95C8FFuL, 0xEF01A84C6B2C6907uL), (+1, 0, 0x8F1CBBCCFD89B2ABuL, 0x8471D58D42A06E66uL)),
                ((+1, -2, 0xC6B9E4943BD277DCuL, 0xBA51A35316C68A38uL), (+1, -2, 0xCBFC8E92125CA995uL, 0x55FABBB92DE2355EuL), (+1, -3, 0xD5B0714C4EA83BDEuL, 0xC13A6B366F68A1C8uL), (+1, -3, 0xE46F9D130C5E5CD7uL, 0x6EDFE9FC309F6285uL)),
                ((+1, -5, 0xF2B6C42A992934A5uL, 0x1B33C5076E28A5DAuL), (+1, -5, 0xF5A03CF0AA09C651uL, 0x093F1847FC3D518BuL), (+1, -6, 0xF359C81D6B156D4EuL, 0x0540F463B972DBAAuL), (+1, -6, 0xFAF9157A424AD74FuL, 0xF705E127CFFCFF8EuL)),
                ((+1, -8, 0xC4B746F2D19B8B89uL, 0x2B62D2706339F96BuL), (+1, -8, 0xC59D2A11E50E3434uL, 0x9796FCD9AD794E87uL), (+1, -9, 0xB74F2710F7FFB58CuL, 0x5781AFF92BF7A390uL), (+1, -9, 0xB986A36952A38793uL, 0xDAE0526CAAEE6420uL)),
                ((+1, -12, 0xC9ED9113F7B08BB6uL, 0x8CD2FD353DAE8431uL), (+1, -12, 0xCA2B2758E4A40375uL, 0x610FBA6C6171FC34uL), (+1, -13, 0xAFC2002B2A4C03A4uL, 0x96C966AE84B50C20uL), (+1, -13, 0xB0524313FA78C7D8uL, 0x1D4CB00F821ABA3EuL)),
                ((+1, -17, 0xEDC6218C330EA729uL, 0x9E0010F4FB538F31uL), (+1, -17, 0xEDC60A5FBBF5A833uL, 0xAFF83613B57C5B66uL), (+1, -18, 0xC33B3D805B53F591uL, 0xFD5659CA914CC7D6uL), (+1, -18, 0xC33B51289C81785DuL, 0xE8107E9687AC49CBuL)),
                ((+1, -23, 0xF5E4735CF36EB01DuL, 0x8D830FCF64E669BEuL), (+1, -23, 0xF5E48715FAF02792uL, 0x034A6FB1FB3DFABEuL), (+1, -24, 0xC05A6EB4A9650180uL, 0xC629F60201970EE0uL), (+1, -24, 0xC05A4FC168585D2DuL, 0xB97DDB8D1959E443uL)),
            });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX1Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xCC4C7AA0DBF5A9D6uL, 0x6DDA4D74558AAE8CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0x9403AF1557CF6D98uL, 0xBB0DCB1573E530BAuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 1, 0xA98509EBE84ACA62uL, 0xFC43A0498D03EB18uL), (+1, 1, 0xCB9A7ED96881F120uL, 0x0979E54D6FA0F27CuL), (+1, 0, 0xF58273F72BC7DCE3uL, 0x59EC436FABA85B75uL), (+1, 1, 0xC105B01EBF2F0E4FuL, 0x4287F3E959FAE425uL)),
                ((+1, 1, 0xF993E858409AE923uL, 0x95047668B8699A8AuL), (+1, 2, 0x9017B0EAC00A0A8DuL, 0xED22A74EBF65B4B6uL), (+1, 1, 0xB3EFFA533B4DB509uL, 0x492C05497FD5591BuL), (+1, 2, 0x81332B92C8435B0DuL, 0x7B3DF5FAB7B6D94DuL)),
                ((+1, 1, 0xD6F6C0BAB51FE9ECuL, 0x6C62F75F814349E1uL), (+1, 1, 0xEF8D33364A017C5EuL, 0x05131A547B3018BDuL), (+1, 1, 0x999B0F0A87D46B1FuL, 0x153B747DC587BB88uL), (+1, 1, 0xCACB97836BDBCC2AuL, 0x25062AA637C6616CuL)),
                ((+1, 0, 0xF0B4A2169A44BD76uL, 0x0E250E214823CC89uL), (+1, 1, 0x820B75079F377BACuL, 0x8411F194B76CC183uL), (+1, 0, 0xA99EB91D37BD52FAuL, 0xFDB2D2167027253CuL), (+1, 0, 0xCFBF81F7BACBF2FCuL, 0x27622845E4D7CD12uL)),
                ((+1, -1, 0xB842EDAE45BC4440uL, 0x4DD8B42C9D527F94uL), (+1, -1, 0xC21ABF753EFDF791uL, 0xF38E5E28AC8164D3uL), (+1, -2, 0xFED3DFFF9D7CE253uL, 0x8195C003BC07B1B0uL), (+1, -1, 0x92734D091D3EBE0CuL, 0x33EA19D67D0DB3A6uL)),
                ((+1, -3, 0xC5B387CA983AD0D6uL, 0x8C85BD585E0491BDuL), (+1, -3, 0xCC3C83546BD9EFFDuL, 0xBDD94B9D83183268uL), (+1, -3, 0x85A19B0C8F1DBF0AuL, 0x8CC3427664409A67uL), (+1, -3, 0x9218F13500C8C9B1uL, 0xF1BFA7392574B564uL)),
                ((+1, -5, 0x962103131E074F38uL, 0xA14F4A9FBA45633BuL), (+1, -5, 0x98F9B5DCBB130C27uL, 0x28393E3F8883B0F0uL), (+1, -6, 0xC63183CDD779FF19uL, 0xCADC2064E5CE7A07uL), (+1, -6, 0xD10085B158D45C29uL, 0x403CABBC866BAAD7uL)),
                ((+1, -8, 0xA1376E03FBECAD7AuL, 0xD0AC8D7D221760D8uL), (+1, -8, 0xA2D56915630A52CBuL, 0xF0C76A2A11EBA7DEuL), (+1, -9, 0xD0B552939203F8F5uL, 0x80CE26A0A4EA1265uL), (+1, -9, 0xD6ECCEE886FF3C17uL, 0xB6BF06A37243174BuL)),
                ((+1, -12, 0xF1F6CCC409BF3D38uL, 0x094449B2D55D4BACuL), (+1, -12, 0xF31D7532258A66B6uL, 0x2F54B1291EEBF4E7uL), (+1, -12, 0x9B4D5BE4622649D0uL, 0x5FEBA0F2E7BB7386uL), (+1, -12, 0x9D9B07CE1CE56BF7uL, 0xF49D4A877BA82D1CuL)),
                ((+1, -16, 0xF70EC5737EC70A20uL, 0x35FBE07088F0ED25uL), (+1, -16, 0xF78594D4382A3CECuL, 0x30646B8BCA14AB30uL), (+1, -16, 0xA03724221815F63FuL, 0x7EA9BBAF2D8FE92FuL), (+1, -16, 0xA138E694B19A0B9CuL, 0x180D374469307695uL)),
                ((+1, -20, 0xA2BF383EC1CE6086uL, 0x96E69FD6499CD7E8uL), (+1, -20, 0xA2D3A3BC2E6CE7CAuL, 0x5E4C70F3F8A332F9uL), (+1, -21, 0xDB3C0B0B6E014307uL, 0x7C99047F30A6EEE7uL), (+1, -21, 0xDBA290105D808106uL, 0x04059A27F1888684uL)),
                ((+1, -26, 0xF7D03C7EDBAAB08DuL, 0x78207AA288444A24uL), (+1, -26, 0xF7D03D69FBFFD0F7uL, 0xC0D53C5DCE9847D8uL), (+1, -26, 0xB4638E5FD86F5EB9uL, 0xF0F66986425912FCuL), (+1, -26, 0xB4638CEBEED390A7uL, 0xBF6B8AEE558BA72AuL)),
                ((+1, -32, 0xA362FEF23F20BF07uL, 0x55C2C5F37DAE602CuL), (+1, -32, 0xA362FE7317930223uL, 0x1E82603EBE5FBF01uL), (+1, -32, 0x88AE259243143F6CuL, 0x8F91F864D694A6A0uL), (+1, -32, 0x88AE26717E41F794uL, 0x56C64A158E720C46uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX2Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xEAB174E09B3CB0CCuL, 0x8F9EA4AB675EE333uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xCB7B52599B0E102CuL, 0xD4738E520E3B2F97uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0xB6F4309A7D67E4E9uL, 0xEF7C8A53F60ABF56uL), (+1, 0, 0xC34ECF752DE9C4D2uL, 0x0441331900B5A2B1uL), (+1, 0, 0x98B38782AE97BC15uL, 0x939AA7ABC0C3F56FuL), (+1, 0, 0xB5B9AFE9E1BF8B87uL, 0xD5C3310A9F77C986uL)),
                ((+1, -1, 0xFDA8F8DCADB1EDA5uL, 0x200225AB3AFE1264uL), (+1, 0, 0x84FA0DC97F0A76E9uL, 0x3A165A05360A5455uL), (+1, -1, 0xCA6762BF64A1B160uL, 0x42663585D20C82B6uL), (+1, -1, 0xE5B938DAAA9FE627uL, 0xA1D65DCA482F2523uL)),
                ((+1, -2, 0xCEA2B10546987672uL, 0x779E903CEFACCBA1uL), (+1, -2, 0xD58BA3679D8E9706uL, 0x69A0493DDDB35EDCuL), (+1, -2, 0x9C8FFFE9717023DFuL, 0x19F04547FD011880uL), (+1, -2, 0xAAFAFC5EDC5914BEuL, 0xB1C95CB266A8CAD4uL)),
                ((+1, -4, 0xDC4ADCA01DFBDBF1uL, 0xA75720DDD55068A7uL), (+1, -4, 0xE12A815B4D75FF5BuL, 0xF56AD52070EB60A3uL), (+1, -4, 0x9D88C8D91F21F136uL, 0x7F7E1837CE028383uL), (+1, -4, 0xA706DD2EB48239B0uL, 0x10E2B25D6DFBA38FuL)),
                ((+1, -6, 0xA2066DC7E395BECDuL, 0x208E7BA64D01CCF8uL), (+1, -6, 0xA44B553F5184A036uL, 0xFC0F88103518614AuL), (+1, -7, 0xD9B64085CC312DE2uL, 0xAE774F18EF0EB76FuL), (+1, -7, 0xE1F0F11D02C9C421uL, 0x15A1BB56A3400D3CuL)),
                ((+1, -9, 0xA8E58597574A9B09uL, 0x3ADE62A4200934ECuL), (+1, -9, 0xAA529BB05C8F57D0uL, 0x72D831E7AB19167DuL), (+1, -10, 0xD4A698E2A069A6C7uL, 0xDE0887FDB62F7A84uL), (+1, -10, 0xD97824F5F3F39F9CuL, 0xD0BE8514167C690BuL)),
                ((+1, -13, 0xFC1517C629FCF4DDuL, 0x148971548EB827ADuL), (+1, -13, 0xFD49A1F0F0DCCF75uL, 0x7EAC405578B393DDuL), (+1, -13, 0x949BFFD683087883uL, 0x271267995ABB5E0DuL), (+1, -13, 0x96830387B479C391uL, 0x65E22E6CD81E0351uL)),
                ((+1, -16, 0x8620CCF108A78C41uL, 0xD6861688AEC859E2uL), (+1, -16, 0x8675652E1AEB0DEEuL, 0xD42C0E26F3D977A6uL), (+1, -17, 0x9442D016443F6763uL, 0x14A76556F14023D9uL), (+1, -17, 0x953D54BCDC920E79uL, 0x908D0FC581278527uL)),
                ((+1, -21, 0xC759D2EA0788C964uL, 0x58D174499BA5CFC5uL), (+1, -21, 0xC790A390E710F02BuL, 0x7A95FF19888D1049uL), (+1, -22, 0xCF142BD501E3E2B8uL, 0x3D47C0B3F32A4A4AuL), (+1, -22, 0xCFAD219EFEE87324uL, 0x7F55428C4F8F5F94uL)),
                ((+1, -26, 0xC569E38AECEF7597uL, 0x6022F831DB8416CCuL), (+1, -26, 0xC579F94A7CCA8A2EuL, 0xCCF3B4EFDC9B3CB0uL), (+1, -27, 0xC155CA7D238D08D3uL, 0xBDD8A5A345F09D5DuL), (+1, -27, 0xC18045A008C31B20uL, 0x7AFB0271FF228D9FuL)),
                ((+1, -32, 0xEB5860ADFDC74E38uL, 0x620EE52C820C610CuL), (+1, -32, 0xEB5860AD94FF99D5uL, 0x03029EBCE7AF1F1EuL), (+1, -33, 0xDA1B6E6CB2A5AE39uL, 0xB0904F5C620B32CDuL), (+1, -33, 0xDA1B6E6EFC7AE701uL, 0x6582D721CF76297FuL)),
                ((+1, -38, 0x80ADF6FBB32C8C95uL, 0x4D1FBABC65B8B6AAuL), (+1, -38, 0x80ADF6FBD2FF8950uL, 0x999E13A9003C9FC0uL), (+1, -40, 0xE290C3BE88241D14uL, 0xE0BA6B75FF12564EuL), (+1, -40, 0xE290C3BC3727C90FuL, 0x90FE8CF0B3263023uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX3Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xF91627AB24B382F5uL, 0xDCC0D437D42E6605uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xECE87611DA1A71B1uL, 0x4EE52FC1A3C314EBuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -1, 0xDB21B474EF452CE1uL, 0x0E267F28A2A750D3uL), (+1, -1, 0xDFA62E9818601595uL, 0xA754164B1D9207ECuL), (+1, -1, 0xC44D82EA300A3342uL, 0xDD619C01135EDF99uL), (+1, -1, 0xCFE320E7AAF2AD29uL, 0xE934433639E3243CuL)),
                ((+1, -2, 0xAE0F251E1973B4A2uL, 0xA29D2D4C824120CFuL), (+1, -2, 0xB0A8F7F92CEAFB86uL, 0x83EF0B0D1BA2DE9BuL), (+1, -2, 0x927E3D01C9AA8A5FuL, 0x303FB87CEF1F06C3uL), (+1, -2, 0x98AC0E23048D3CF6uL, 0xCDE7759BB72FA4D6uL)),
                ((+1, -4, 0xA52EDB747A6917DCuL, 0x26EA1A2B0CDCF4F9uL), (+1, -4, 0xA6ED1DA4A9E7AF48uL, 0x5E6E34153F9E29D9uL), (+1, -4, 0x825E6275404494B2uL, 0x3F54BE80AD507B48uL), (+1, -4, 0x8633B3AD1023499CuL, 0x3E00001B1DD1D22EuL)),
                ((+1, -7, 0xD0CCB186AF8E59D6uL, 0xB2D9151F9F6E68D2uL), (+1, -7, 0xD24FD68BE2A88465uL, 0xAB63CF9A4540BE50uL), (+1, -7, 0x9A5AAA059906B081uL, 0xA2931D0ACC18DBE1uL), (+1, -7, 0x9D6F022FDA5C4090uL, 0x2E17E4A0FE427167uL)),
                ((+1, -10, 0xB96AC60188A56C9BuL, 0x6DE63CD14B27B53DuL), (+1, -10, 0xBA4ED84B0DF2D16FuL, 0xE25846B178BA224BuL), (+1, -10, 0x8052A806F05D4E9AuL, 0x615F11801F882AA7uL), (+1, -10, 0x8201518348DC9FF1uL, 0xFA24EFF56AB11EABuL)),
                ((+1, -14, 0xED96600D4BD49610uL, 0xBA48F41BDE662F7CuL), (+1, -14, 0xEE4FE7CA0AFBBC63uL, 0x16D14C6B961B9DC3uL), (+1, -14, 0x99F2AE306488A607uL, 0xE1EFC94726F62526uL), (+1, -14, 0x9B38249A801278ADuL, 0xA51C3E071CAF5480uL)),
                ((+1, -18, 0xDDB7451945AC70EDuL, 0x79F5392039A1934EuL), (+1, -18, 0xDE1E8CFECBC444FAuL, 0xAF959A4C8C557248uL), (+1, -18, 0x8692A1BD5D35CC1FuL, 0x4DE333B485DFFB84uL), (+1, -18, 0x873B466DF8503A31uL, 0x339B8E4E13FF6568uL)),
                ((+1, -22, 0x95DDEE2693EB7A3BuL, 0x88D3C4B6B96AD6A3uL), (+1, -22, 0x9603B9F785AD5B72uL, 0x3F8CDE427043E5D9uL), (+1, -23, 0xAA8B5B154A041488uL, 0x0F0534B54CF3D276uL), (+1, -23, 0xAAFE743242C1B70EuL, 0x86DE795E01BBD06BuL)),
                ((+1, -27, 0x8F75B5E6DBBFFED2uL, 0xC6A90CEAC0766166uL), (+1, -27, 0x8F86326D9DF78725uL, 0xEC76D7550B18A582uL), (+1, -28, 0x992CF7F2929878B1uL, 0x6492BDAEBDCB66A3uL), (+1, -28, 0x995BD9D9BFD56F8FuL, 0xFFA06EA4491B3252uL)),
                ((+1, -33, 0xB91A3261A2F79D28uL, 0x4937B2006479545EuL), (+1, -33, 0xB920BBEC4CE3DE97uL, 0x919B19051E63C88AuL), (+1, -34, 0xB999F2DE4D4414B6uL, 0x199E94EE15DF32CBuL), (+1, -34, 0xB9AB529B3BD760A1uL, 0xBC526395D3463195uL)),
                ((+1, -39, 0x90F74B5BB25073EEuL, 0x95BF9DED27802788uL), (+1, -39, 0x90F74B5BB2B338FAuL, 0x3FD842FB2AFB3F3FuL), (+1, -40, 0x889A3B9866B77B1CuL, 0x352AD3AC9563D71DuL), (+1, -40, 0x889A3B986B8BFBD4uL, 0x89C26A04DC171A05uL)),
                ((+1, -47, 0xD131555AA6E9AD7CuL, 0x775BC99691820556uL), (+1, -47, 0xD131555AA693F937uL, 0x2EA3DAEAD97E285CuL), (+1, -48, 0xB9528A6B439628F1uL, 0x2D1D1D42BE6CC738uL), (+1, -48, 0xB9528A6B3F6D3B6AuL, 0x844FD7E19392F2C2uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX4Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xFE15A79BE08354F6uL, 0x27A2812439BC4051uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xFA684EFADF855A1EuL, 0xAF7215C6CCE6AFF0uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -1, 0x809AEC0CFBF9C199uL, 0x183ED519E3CF227DuL), (+1, -1, 0x8157D549F2FE58F6uL, 0x2AF82A2C5A52F52BuL), (+1, -2, 0xFECA1F0E08E2A109uL, 0x015B7A650900C942uL), (+1, -1, 0x81922D9F4FA7FD6AuL, 0x5C2743E76852760AuL)),
                ((+1, -4, 0xEE20AA7429133A34uL, 0x65E06FC5163BCE22uL), (+1, -4, 0xEF26CFE70CF5CA8AuL, 0xAB2B635561DA1FBFuL), (+1, -4, 0xEC1DEF1FFC2F644AuL, 0xFE41A2E1B1046D2BuL), (+1, -4, 0xEF2491D40956D027uL, 0x06F279B9161697A8uL)),
                ((+1, -6, 0x85678EB0E2974EBFuL, 0x3A19558731AF2B67uL), (+1, -6, 0x85D390238B1B1123uL, 0xCCD4530E5BDB462EuL), (+1, -6, 0x83ECE2F3C1DD281DuL, 0xEFE9D23B7CC6FA0FuL), (+1, -6, 0x852AB41C2A8B972CuL, 0xC0104C82CAB0B185uL)),
                ((+1, -10, 0xC9A36693A6F070DDuL, 0x2088CB486FABE322uL), (+1, -10, 0xCA189F7B55882D20uL, 0x845EDEA8E5042424uL), (+1, -10, 0xC63DE446F9743BEAuL, 0xB2320161709EEC4CuL), (+1, -10, 0xC793C64B0BCA9619uL, 0xE9BF6BD6B6D86002uL)),
                ((+1, -14, 0xD8C26D0D3D024627uL, 0xAEC955D4880A67EAuL), (+1, -14, 0xD91A1A635AA5468DuL, 0x66D75898A570EFBBuL), (+1, -14, 0xD34AA75D55D46881uL, 0xDCD6F9786E6543D2uL), (+1, -14, 0xD4473320DA5D0EC4uL, 0xBBC07696CE0E78C0uL)),
                ((+1, -18, 0xAA18FC405E6A6789uL, 0xD984B094889CEAC5uL), (+1, -18, 0xAA46D2BD3EAE17E5uL, 0x1392CBCBD3154423uL), (+1, -18, 0xA403281A871BAD5AuL, 0xAB29FD2C881DDC33uL), (+1, -18, 0xA48532C70310922CuL, 0x9116EE896C6ADC15uL)),
                ((+1, -23, 0xC490867BE4A8EB50uL, 0xF8CD2D632CFE1D41uL), (+1, -23, 0xC4B1A86BAEC33C45uL, 0x2C53E61DBB8E9A4EuL), (+1, -23, 0xBB1CFC9F50620542uL, 0xF509788856A0FD5DuL), (+1, -23, 0xBB795F7E0FE19196uL, 0xAF3F342EED203E8BuL)),
                ((+1, -28, 0xA62FC4599D8C2B2FuL, 0x793D8B652E9EA377uL), (+1, -28, 0xA63FA3978296B757uL, 0x2A7E30E626BF697BuL), (+1, -28, 0x9BEB2BC249D0763FuL, 0x867F738DE5C3A3ACuL), (+1, -28, 0x9C16994B005DAC77uL, 0x9E22E6BA9FC0BA3CuL)),
                ((+1, -34, 0xC8C1781842A22D97uL, 0xA785B32C8B2033EBuL), (+1, -34, 0xC8CA966BB76B6841uL, 0xBA838011648B1C86uL), (+1, -34, 0xB9621C3169BCBCA7uL, 0x6BCF398461C025C2uL), (+1, -34, 0xB97A8F530AA7AE06uL, 0xB442AA9F271E97ADuL)),
                ((+1, -40, 0xA4B132F232048C77uL, 0x61D012C9E1BC549FuL), (+1, -40, 0xA4B396F5F9ACD764uL, 0x62C8CF43FCA36493uL), (+1, -40, 0x9582A45002BCFB1EuL, 0x164F7AA6A1115C74uL), (+1, -40, 0x9588EAB7C62D95A6uL, 0x4DCC1C1D5D2281D1uL)),
                ((+1, -47, 0xA5055589D7CDAEE3uL, 0xFBE277C7A983BE10uL), (+1, -47, 0xA5055589D7CDA815uL, 0x36D8D2A26F63E229uL), (+1, -47, 0x9321C80E1B83DDCEuL, 0xCBD4F86A7BFA469EuL), (+1, -47, 0x9321C80E1B836CEDuL, 0x8070825C03DA146FuL)),
                ((+1, -55, 0x9900F1EA0F65C33EuL, 0x0FD1DD6DDDF347C1uL), (+1, -55, 0x9900F1EA0F65C6C5uL, 0x8EEFA918E82F78AFuL), (+1, -55, 0x85DDFAF3FA381614uL, 0x2FDBF4118BE6CD83uL), (+1, -55, 0x85DDFAF3FA384FE7uL, 0x4291340BC62B0C5AuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX5Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xFF8175512EB13D81uL, 0x50539D381BDE133CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xFE873644A1191F8FuL, 0xC272238D0A7C04A0uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -3, 0xE9AEFC315C432768uL, 0x859AD73A7E87AF27uL), (+1, -3, 0xEA0360BF085DBEF6uL, 0x575F9B2477F57F2BuL), (+1, -2, 0x8150956623BE756CuL, 0x5A3E88EC88D8BCCDuL), (+1, -2, 0x81E183E4BBAF7B3DuL, 0xF2AFAEF988A29E22uL)),
                ((+1, -6, 0xBE46E0622192A5E7uL, 0xB84E149077BECCCFuL), (+1, -6, 0xBE7764DD91BFECBAuL, 0x2D7FDAF5D61D612EuL), (+1, -6, 0xEDA22DB6CF49F0DFuL, 0x4199CD81E0601233uL), (+1, -6, 0xEE6743944CB155D6uL, 0x4C4B710CAE127597uL)),
                ((+1, -10, 0xB4F24E8EC63351B7uL, 0xA4741F87CB9883AAuL), (+1, -10, 0xB511693B723BFAFBuL, 0x8357AA977F894132uL), (+1, -9, 0x820F7D3B7AFE57DEuL, 0x86095C71A626A270uL), (+1, -9, 0x825CDF291FD719BFuL, 0xB9137F52C1493F56uL)),
                ((+1, -15, 0xDD34FF12AA933B45uL, 0x20044D8B27E0FBD6uL), (+1, -15, 0xDD4CE6561A4DFEE7uL, 0xB05D92D8D9420DE5uL), (+1, -14, 0xBBEC5DA7F009B104uL, 0xFA28E5DF79CCF083uL), (+1, -14, 0xBC392B5D8A121B8EuL, 0xE91C40D6AE2BE0A5uL)),
                ((+1, -20, 0xB3C8C325AA38F636uL, 0xD904E81DDFFE6F63uL), (+1, -20, 0xB3D3A326D6076E8EuL, 0x581CCA282338BBDBuL), (+1, -19, 0xBB59A487753AE1AFuL, 0x2DD108747B75696BuL), (+1, -19, 0xBB8B0147A449DD99uL, 0xF2E186F2D43C1C06uL)),
                ((+1, -26, 0xC11A8360EC475776uL, 0x12A5903DF703FCE6uL), (+1, -26, 0xC11FB51A0D4A3B61uL, 0xC7EE8FDD2B459342uL), (+1, -24, 0x829640D326BF9098uL, 0x93FF518AB9A4A61EuL), (+1, -24, 0x82AA54C632208DDEuL, 0x76B1D6A1D8E37ADBuL)),
                ((+1, -32, 0x82067937DE9F2707uL, 0x4C6B8FF6314D4789uL), (+1, -32, 0x820733B9046A6F21uL, 0xFD7254DE943D3917uL), (+1, -31, 0xFB7FF1BF9C530EF3uL, 0xC4F25EC9D7064672uL), (+1, -31, 0xFB92DCDA4724135CuL, 0xA2151C0A6B8D83EEuL)),
                ((+1, -40, 0xBBDD5FB2AA62D1AAuL, 0xBB1884ADA55E753BuL), (+1, -40, 0xBBDC8CCD542CF929uL, 0xDE656D6EA73E4AA7uL), (+1, -37, 0xA0346E4FC8BC373DuL, 0x57C4DF27AF197C4CuL), (+1, -37, 0xA038631978370B33uL, 0xD3C1577CD4CD6282uL)),
                ((+1, -49, 0x85C7D03DD3133E8DuL, 0xCA2E0EF7229CC2FAuL), (+1, -49, 0x85C7D03DD3133C6CuL, 0xBF38D846A4C6EF42uL), (+1, -45, 0xF3FED9187E3CBDD1uL, 0xC04533023AE3EF07uL), (+1, -45, 0xF3FED9187E3CBE7DuL, 0xEBD8F404F7F7EF03uL)),
                ((-1, -57, 0xD2E55635DA071FB4uL, 0x89F5E806B9D96AB6uL), (-1, -57, 0xD2E55635DA071EF3uL, 0xC873A4D2EDC9BC9DuL), (+1, -53, 0xA8CC47E9CE26F559uL, 0x880673772B25654EuL), (+1, -53, 0xA8CC47E9CE26F51BuL, 0xEE3D6C064365DD33uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX6Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xFFE017D39A2569F2uL, 0x3C5EFD24C089A788uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xFFA076CA64CFFC49uL, 0x2D96CB088E9C9BF4uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -3, 0x86900730232FB1D6uL, 0xD4B084BBB014C5CDuL), (+1, -3, 0x869CD432BAD03C64uL, 0x3E7EA9C3188E1BBAuL), (+1, -3, 0x853308141A6717B7uL, 0x7065494F7025A97EuL), (+1, -3, 0x8558E917A926AE74uL, 0xAEC59322607E3373uL)),
                ((+1, -8, 0xFC34B1851C5D8E91uL, 0x4CDFA0A2FDB71A49uL), (+1, -8, 0xFC4660D0618FA68AuL, 0xBEEA8B765837E781uL), (+1, -8, 0xF772BE14BF196713uL, 0x1F04BED6A22F8F49uL), (+1, -8, 0xF7A67EAD51404ED0uL, 0xF8A59E0EA41EA7AEuL)),
                ((+1, -12, 0x8A35C469F30577FCuL, 0x464A139BAC43B9EAuL), (+1, -12, 0x8A3C959B4B7098EEuL, 0x2A321A1D307739F4uL), (+1, -12, 0x867488E5E6C6021CuL, 0xA89B835CCCBE2419uL), (+1, -12, 0x868846EEF41FC849uL, 0x803290DF530F0029uL)),
                ((+1, -18, 0xC3419C3D1514067CuL, 0x21C2E7E5105B4248uL), (+1, -18, 0xC347F2460439AF0FuL, 0xDD16EADB379FDE3DuL), (+1, -18, 0xBC6A30E704B90B4AuL, 0x80E7B6156CAB3BB4uL), (+1, -18, 0xBC7C5C9ECC1A2766uL, 0x3A9838B28ACB4119uL)),
                ((+1, -24, 0xB8628F3D9290370CuL, 0xCB70382236025927uL), (+1, -24, 0xB8661C145D9ED9E6uL, 0xEB3C1D54741E3D40uL), (+1, -24, 0xB08DAE028C50F893uL, 0xFE2ED7F7DDA85446uL), (+1, -24, 0xB097C4D7EE91B3AAuL, 0x5A85A439574D4B85uL)),
                ((+1, -31, 0xE8CB269BB19C357DuL, 0xE800CE1D21D48ECCuL), (+1, -31, 0xE8CD5F301DC8F080uL, 0x044607F0553DAD41uL), (+1, -31, 0xDD46F39728D5C46CuL, 0xE8995DECF2A9E8ACuL), (+1, -31, 0xDD4D35F35915B814uL, 0x49223590D057DBB2uL)),
                ((+1, -38, 0xBD7A1FA98B8962B7uL, 0xDDB96006DCD34854uL), (+1, -38, 0xBD7AB8E0E137CF6FuL, 0x2CE745649043EE40uL), (+1, -38, 0xB2DC9D865772D2D6uL, 0x005F8F73EDB60BFDuL), (+1, -38, 0xB2DE4A0431B1EBB6uL, 0x4652E2006F1A7A8DuL)),
                ((+1, -46, 0xB472F076C9EE59DAuL, 0x9D88157FEA76DCA2uL), (+1, -46, 0xB472F076C9EE59DAuL, 0x9E408D03426E718EuL), (+1, -46, 0xA93CD635410B4910uL, 0xCC5446FC70BC3D2BuL), (+1, -46, 0xA93CD635410B4910uL, 0xD68F090865B4F706uL)),
                ((+1, -55, 0x993755AE6CB750EFuL, 0x39BB965CCDBCBA7BuL), (+1, -55, 0x993755AE6CB750EFuL, 0x396EF81543A1BE6AuL), (+1, -55, 0x8ED49E15084ACA50uL, 0x9AC325CC19951911uL), (+1, -55, 0x8ED49E15084ACA50uL, 0x9686B72474FC6807uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX7Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xFFF8017F4C9CA447uL, 0xCF5FBF3B8B7A6E00uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xFFE8077B19801293uL, 0xABCB68EB845C2839uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -5, 0xFD0FB48AB7F9C146uL, 0xE9F3C764ECA146C1uL), (+1, -5, 0xFD159C7C2664FE71uL, 0xDAA8F3D4C192CDE8uL), (+1, -5, 0xFC7AE73A826354EDuL, 0x90AB287547C12954uL), (+1, -5, 0xFC8C90C3208527E6uL, 0x21236B3DB3B0FFC4uL)),
                ((+1, -10, 0xDB1A65E21DBDDC74uL, 0xDE6BE95391A16426uL), (+1, -10, 0xDB1E0A36F62430D1uL, 0x0DFF523FDB841377uL), (+1, -10, 0xDA2EB35887792038uL, 0xA94FCE713B63C57AuL), (+1, -10, 0xDA3990D0E4D0F151uL, 0x9C4E3BBFDC493953uL)),
                ((+1, -16, 0xD8FDC7B52D8F55F1uL, 0xCCDD7EEE4267BF5EuL), (+1, -16, 0xD9002DF072236FD0uL, 0xEA6559A2E27F1F6AuL), (+1, -16, 0xD7B2CB47135C133AuL, 0x7DE47D56E256DDACuL), (+1, -16, 0xD7B9EFD0D95A15F8uL, 0x54C8A83DD3FAF784uL)),
                ((+1, -22, 0x866E44522EC91A5DuL, 0x907C12D1CA3BD04CuL), (+1, -22, 0x866F285037C5819BuL, 0x91EC38A97EFC2C62uL), (+1, -22, 0x8569EF907F756ED3uL, 0xFC98147B5C6C5FB4uL), (+1, -22, 0x856C9502EB690857uL, 0x3E03FEE8536719B3uL)),
                ((+1, -30, 0xD5649B1486EF35D5uL, 0xF5323A1B484D5CCBuL), (+1, -30, 0xD5654FE9B5BE6618uL, 0xF618C811A1DC7A7AuL), (+1, -30, 0xD377DEE2BAFE5854uL, 0x62A9DF1CF57C413FuL), (+1, -30, 0xD379F756D10EA3D1uL, 0x4A30BB7B8882D967uL)),
                ((+1, -38, 0xD3E64F540374F24FuL, 0x8D0A2B336948B3A1uL), (+1, -38, 0xD3E68B30447C86C3uL, 0xE40394C62C377A9CuL), (+1, -38, 0xD1B65ABB6D69C89CuL, 0xF473FF313F719A79uL), (+1, -38, 0xD1B70C131BBE5408uL, 0xA020C3A9443010D0uL)),
                ((+1, -47, 0xF0B16FD6C4B757E0uL, 0xA5F11E4E64879935uL), (+1, -47, 0xF0B16FD6C4B757E0uL, 0xA5F0F2B937D7394CuL), (+1, -47, 0xEDEE96CC47A2DBBFuL, 0x2C1C6936DF56CFD0uL), (+1, -47, 0xEDEE96CC47A2DBBFuL, 0x2C19F1ECC2CC782EuL)),
                ((+1, -57, 0xEF71041E51D15BE4uL, 0x33B2802093B2CD0EuL), (+1, -57, 0xEF71041E51D15BE4uL, 0x33B294DF2EE3A4E9uL), (+1, -57, 0xEC74E870B9E4E4DFuL, 0x5C7B668DFE547F7EuL), (+1, -57, 0xEC74E870B9E4E4DFuL, 0x5C7C92CBA274E870uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)> PadeX8Table
            = new(new (Hexcode fc, Hexcode fd, Hexcode gc, Hexcode gd)[] {
                ((+1, -1, 0xFFFE0017FD309D48uL, 0xBD78C2B5B20FAFD3uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, -1, 0xFFFA0077EC558720uL, 0x5CF9965A2AD52F88uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -6, 0xE26B667E92A469E7uL, 0xF949FC6EAA0A0494uL), (+1, -6, 0xE26CAB4EAF729D2CuL, 0x86ED61904E0EFC78uL), (+1, -6, 0xE2474C7AE15E4211uL, 0x76B2C3518A0377E0uL), (+1, -6, 0xE24B1A0F6D2A6404uL, 0xCA7292D624F664D2uL)),
                ((+1, -12, 0xABA83329AA7A080CuL, 0x15CB5E956495382CuL), (+1, -12, 0xABA8D80C519FD658uL, 0x058BC80D50E290CDuL), (+1, -12, 0xAB76045014009E10uL, 0xE41F1D7799F7E7FEuL), (+1, -12, 0xAB77F232A5FD53E6uL, 0xEC9ED53BA1CE4172uL)),
                ((+1, -19, 0x909A52842869BCE9uL, 0x38B83FBE94F95E88uL), (+1, -19, 0x909AA638DDAAACD8uL, 0x34E0A5BD414F4DEAuL), (+1, -19, 0x905E6C3755F8A008uL, 0x727954EA9D1A65D0uL), (+1, -19, 0x905F66CB07E70CD1uL, 0x9E82D499B86C8F87uL)),
                ((+1, -27, 0x922DE2C86DD844B0uL, 0xF143724347574516uL), (+1, -27, 0x922E0D47CC5AA845uL, 0xA6A5528CC6A685C1uL), (+1, -27, 0x91E122CB698FE67BuL, 0x9B2823CC41821CDEuL), (+1, -27, 0x91E1A1F299548E9CuL, 0x73F00CC7EB0E94E9uL)),
                ((+1, -36, 0xB15561EEBF0A7C13uL, 0x4D852E7C90475EAFuL), (+1, -36, 0xB1557331F1BC9102uL, 0xA679F43222DF85FFuL), (+1, -36, 0xB0E69AF47FEFCA42uL, 0x7828A4DD065FE669uL), (+1, -36, 0xB0E6CE952BF1E7ADuL, 0xDEA4820181FCF46BuL)),
                ((+1, -46, 0xEF0A44D1E210395AuL, 0x8FA4031A422E2473uL), (+1, -46, 0xEF0A44D1E210395AuL, 0x8FA403CFEFE7D88DuL), (+1, -46, 0xEE5FCFB3B210545AuL, 0x3AF3B12D73B63147uL), (+1, -46, 0xEE5FCFB3B210545AuL, 0x3AF3B9FDC1BB900CuL)),
                ((+1, -56, 0x8A199590A77AC7A6uL, 0x385CF57CF654495CuL), (+1, -56, 0x8A199590A77AC7A6uL, 0x385CF54C0BF573BFuL), (+1, -56, 0x89AC755AF91E669FuL, 0xCF4C5FB02AAB3617uL), (+1, -56, 0x89AC755AF91E669FuL, 0xCF4C5D50B57F1C23uL)),
        });
    }
}
