using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class InverseGammaTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode c, Hexcode d)>> tables = new(){
                { nameof(PadeX0Table), PadeX0Table },
                { nameof(PadeX0p5Table), PadeX0p5Table },
                { nameof(PadeX1Table), PadeX1Table },
                { nameof(PadeX2Table), PadeX2Table },
                { nameof(PadeX4Table), PadeX4Table },
                { nameof(PadeX8Table), PadeX8Table },
                { nameof(PadeX16Table), PadeX16Table },
                { nameof(PadeX32Table), PadeX32Table },
                { nameof(PadeX64Table), PadeX64Table },
                { nameof(PadeX128Table), PadeX128Table },
                { nameof(PadeX256Table), PadeX256Table },
                { nameof(PadeX512Table), PadeX512Table },

                { nameof(PadeXSingularRcp256Table), PadeXSingularRcp256Table },
                { nameof(PadeXSingularRcp128Table), PadeXSingularRcp128Table },
                { nameof(PadeXSingularRcp32Table), PadeXSingularRcp32Table },
                { nameof(PadeXSingularRcp8Table), PadeXSingularRcp8Table },
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach ((Hexcode c, Hexcode d) in tables[key]) {
                    stream.Write((UInt64)c.Hi);
                    stream.Write((UInt64)c.Lo);
                    stream.Write((UInt64)d.Hi);
                    stream.Write((UInt64)d.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX0Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 1, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 6, 0x9235D56BA2E78533uL, 0x5342603731BD9DD1uL), (+1, 5, 0x8EEE6B4668B2DE09uL, 0x4847B3CB7E41B779uL)),
                ((+1, 10, 0x952E20FB14933639uL, 0xA17F98A30FBA0921uL), (+1, 9, 0x8E1D10FEF895F7B5uL, 0xC1202D3B8CAC7F7AuL)),
                ((+1, 13, 0xB397E2959DF2B6CDuL, 0xAFBCE9073F789486uL), (+1, 12, 0xA615B6BFBE50BE1AuL, 0x8C51BD07A60A7B45uL)),
                ((+1, 16, 0x8DF6ED547C914D33uL, 0xACC1F0E6C991C0C5uL), (+1, 14, 0xFDB659F15658CA47uL, 0x2574BFB0A559277BuL)),
                ((+1, 18, 0x9B41D7AB7AA29588uL, 0x5A8E2681C95C859EuL), (+1, 17, 0x8548B5495F17CE01uL, 0x1CDC85B5122AD56CuL)),
                ((+1, 19, 0xF12E8F52C322A225uL, 0x2B511E51DC06B740uL), (+1, 18, 0xC57D3693DCA6237DuL, 0x2FC4EB370A65AF17uL)),
                ((+1, 21, 0x8686F279282965B9uL, 0x802E86E320C551EFuL), (+1, 19, 0xD03B1082E911E124uL, 0x1F3C48866BD25099uL)),
                ((+1, 21, 0xD7953F2C6046D8B4uL, 0x01D4E6275EC68E6BuL), (+1, 20, 0x9BD8922EA18A7C70uL, 0xDA16BA941DB2E5D7uL)),
                ((+1, 21, 0xF5E4724BDE22751EuL, 0xE10DADF2EB082D10uL), (+1, 20, 0xA37628C80014B704uL, 0x76A1587A3330433EuL)),
                ((+1, 21, 0xC3F960D4DFFA5A5CuL, 0xBDC203B670713EDBuL), (+1, 19, 0xEA8FA2CB21AEC25EuL, 0x9DF21F403D518B1BuL)),
                ((+1, 20, 0xD3F8D82F6F89725EuL, 0xB9531BF3D4CBA9EBuL), (+1, 18, 0xDDA667B83D5D3922uL, 0x06FDF7247AFB560AuL)),
                ((+1, 19, 0x94EA0FA9A4C5A815uL, 0x4E70208BB298310AuL), (+1, 17, 0x821FBC33E0162405uL, 0x47199A6C92F26B53uL)),
                ((+1, 16, 0xFE85E39A6B925249uL, 0x3729AED4D055063DuL), (+1, 14, 0xAD2B6782D3480BA9uL, 0x7E73BD44ECEC982CuL)),
                ((+1, 13, 0xEE9E03F84ACDC8B5uL, 0x89A1E595CC44B819uL), (+1, 10, 0xDEE12F196DDBB06FuL, 0x517B47048D165A52uL)),
                ((+1, 9, 0xCCA9E55D7859AE79uL, 0x9342D80BF7132A40uL), (+1, 5, 0xC684852412C43EC6uL, 0x31F8BE9643547884uL)),
                ((+1, 3, 0xD5EE8D805C0CF79CuL, 0x45A2B9498DBC390AuL), (+1, -4, 0xEB88A28FCE2E5214uL, 0xA5ADFD392E6D7523uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX0p5Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 1, 0xA578E3CBC8C70E11uL, 0x1CCDA2D1EFA76651uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 4, 0x9AFD9AADCED106D1uL, 0x7BB3B3D2203E3E93uL), (+1, 2, 0xE441D0FDA7A194F8uL, 0xC01670DF6AD75C45uL)),
                ((+1, 5, 0xFA06BC7CB1633E5FuL, 0xCD3CAEACAE866F75uL), (+1, 4, 0xADB32ACE0507F827uL, 0x5E1C227D97EFF205uL)),
                ((+1, 6, 0xE36B31CA58BFA8F6uL, 0x7CF981D04AD922F0uL), (+1, 5, 0x9359C816D8BC2F66uL, 0x9669FC8FE18930D6uL)),
                ((+1, 7, 0x80533564E2B89B0EuL, 0x7343CE92D7D9CF4FuL), (+1, 5, 0x98BCC1907C5A241BuL, 0xDC6A7BD95E53FEBFuL)),
                ((+1, 6, 0xBA573917683773FDuL, 0x5936D91E4B3C3E9AuL), (+1, 4, 0xC783E95B7D0F3055uL, 0xAB0B22BDE50834FCuL)),
                ((+1, 5, 0xAED2819631379847uL, 0x1987DFC33250E982uL), (+1, 3, 0xA37E69081C0EA48AuL, 0x6EDB8977F6ED8CA0uL)),
                ((+1, 3, 0xCF80910B8EA4EF44uL, 0x67A9550F1C0D381CuL), (+1, 1, 0xA2398FD4397AFE74uL, 0x9322544286F0D34EuL)),
                ((+1, 1, 0x944C73E70B8C7CBBuL, 0x635EE349B7E09381uL), (+1, -2, 0xB4B800FA7D58F28EuL, 0x59F72AE1EFFFC515uL)),
                ((+1, -3, 0xE90B1DE2A139AEF9uL, 0x6F6A685AABAF835EuL), (+1, -6, 0xC3372ADFB9385D91uL, 0x6AA3347ED2923E0CuL)),
                ((+1, -7, 0xA9784B0A6C8F29D9uL, 0x187D1FDE05192494uL), (+1, -11, 0x939794417C91A9F5uL, 0xED0B35C0A2B5FFF0uL)),
                ((+1, -13, 0x99077AA9DE7A4488uL, 0xE7E4F7F67CA7E35AuL), (+1, -20, 0x958A9F71094D8849uL, 0x0CFC6E84B69F0260uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX1Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 1, 0xC000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 3, 0xE1847901AB5547BBuL, 0x47869B96975D1190uL), (+1, 2, 0x8E552E7C055E6537uL, 0x9A2040E1B7D6EE4CuL)),
                ((+1, 4, 0xE71C70980412534CuL, 0xCEDFCF6BA467F0B2uL), (+1, 3, 0x88E630F96D4ECB32uL, 0x50D39580878DB6FEuL)),
                ((+1, 5, 0x87BB0BC85459EA79uL, 0x7016AD53F220FC8BuL), (+1, 3, 0x954A91191B3C3FD5uL, 0xF5DD68E8677E3055uL)),
                ((+1, 4, 0xC9E6DDA72D4218DCuL, 0x351D0DD273E2FA7AuL), (+1, 2, 0xCB58AE51D742D7ADuL, 0x7FD07F9B5F5D8880uL)),
                ((+1, 3, 0xC663CEFCFD9B0DBDuL, 0x4E78F85BAE30D6E4uL), (+1, 1, 0xB3B04DBF8619B683uL, 0xE52DB3BFD05825F0uL)),
                ((+1, 2, 0x826C901C059832FFuL, 0xDF7021BEAB6A1AFBuL), (+1, -1, 0xCF63BB19804685BDuL, 0x96145A98BB3ACC84uL)),
                ((+1, -1, 0xE3941C5098DAA0E8uL, 0x4488F12B0F22E04DuL), (+1, -3, 0x99938456A24EB3ACuL, 0x23B5142F3FFCB290uL)),
                ((+1, -3, 0x800E485957C74ED3uL, 0xC55100601B4A40FBuL), (+1, -6, 0x8BABC73E852356D8uL, 0xCC6713810C10CDE8uL)),
                ((+1, -7, 0xB026F708156165B3uL, 0x4940E7BB3A1E807EuL), (+1, -10, 0x8FC965555402DBBEuL, 0x9220806EB3463453uL)),
                ((+1, -11, 0x86D26C0F2D09C6D0uL, 0xD10D5B298CB12F97uL), (+1, -15, 0x8FF5F4A1C5475CB2uL, 0x0D4055107156694AuL)),
                ((+1, -17, 0xC0FEB822DA8815C3uL, 0x1062854D35C340E5uL), (+1, -22, 0xC8D1998C77A0DB4AuL, 0xF9C7723E7E4AA70FuL)),
                ((+1, -24, 0xAD1772D97E44959FuL, 0x3449DEB7494B0021uL), (+1, -32, 0xAC91E2AC9AEF5192uL, 0x670FF1A94D4FE94BuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 1, 0xEA7F836ADE470C2DuL, 0x08BA55A9901F5ED7uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 3, 0x9581EC65031462DCuL, 0x070BF3CC98BC0C78uL), (+1, 1, 0x98BE0D76ADBC3FADuL, 0x97B92566E7D68E0BuL)),
                ((+1, 3, 0xA66BC993C510A9E4uL, 0x6798A660B26DEFD1uL), (+1, 1, 0x9D8908AA01BD70FCuL, 0x72FD7B224F4A2151uL)),
                ((+1, 2, 0xD474444B331F9820uL, 0x1CFBCC91EE4E1E98uL), (+1, 0, 0xB80DD972699B0B36uL, 0xAF695CE8E6038FEBuL)),
                ((+1, 1, 0xABDC12C580CC7065uL, 0xB968285C7D42112DuL), (+1, -1, 0x8626BE8FBA4CAEB7uL, 0x84B348DB74146168uL)),
                ((+1, -1, 0xB7D0F3B4AABED7A8uL, 0x61287EA02A8EEEAAuL), (+1, -4, 0xFD6C099182955B2FuL, 0x6322CC28E78BAEDFuL)),
                ((+1, -3, 0x83A98870E11E7630uL, 0x1FFE1EFC904E7C91uL), (+1, -6, 0x9C15F7E89C33F717uL, 0xFABF159D6CB2E2ABuL)),
                ((+1, -7, 0xFA93F0291BC0D9A2uL, 0x67C1AEF5FB4AA4C5uL), (+1, -10, 0xF645AFD06DBD3D3FuL, 0x6DDB03C75C0DD459uL)),
                ((+1, -10, 0x99F9A9A77FAAFC24uL, 0xB83EBAA83699A56CuL), (+1, -14, 0xEE0E58C875D25DAFuL, 0x3E97F97ABCA5F4E4uL)),
                ((+1, -15, 0xE79E606CFD89D51FuL, 0xC48FAD0F72720DEBuL), (+1, -18, 0x81D7D57805416302uL, 0x23DE4A9EA3A4CD2FuL)),
                ((+1, -20, 0xC22479FFBD027005uL, 0xC157B8439FCC00FAuL), (+1, -24, 0x8923EDC79B08919BuL, 0x6C8EA446DEDBF8AAuL)),
                ((+1, -26, 0x98682F0A0A0CE046uL, 0x0F6F649B4D42DB30uL), (+1, -32, 0xC81772E842458DC8uL, 0x93927DCDF0699DF0uL)),
                ((+1, -34, 0x9621FDE21FE5DC53uL, 0xE2266A6D8165D985uL), (+1, -43, 0xA723692038BCAA1BuL, 0xA90BCB512899DB81uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX4Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 2, 0x9734301D41B0E2A5uL, 0xD4EEC2B78B3C9B67uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 2, 0xCA87BC316CC4083DuL, 0x99F032B0E1E873A4uL), (+1, 0, 0x9E70CE9C5B63E5A6uL, 0x12302CF76E461010uL)),
                ((+1, 1, 0xECF9382BD7EAEAB7uL, 0xA03EA02D5F8EBB92uL), (+1, -1, 0xA96BD92A690E82F4uL, 0x778D220C3704E6ACuL)),
                ((+1, 0, 0x9F1D8519CA565E84uL, 0x7CF57B2947F3045EuL), (+1, -3, 0xCD185CF6A8005DF6uL, 0xF882CA83F2AB166BuL)),
                ((+1, -2, 0x878160EE6153C825uL, 0x66CFB28D120A0038uL), (+1, -5, 0x9AC7744368353E73uL, 0xD665D79B9D6961DAuL)),
                ((+1, -5, 0x98B739EBCB70F782uL, 0x55A2168CBEE11837uL), (+1, -8, 0x973D31DAE07D7ECEuL, 0xA701771CA4A317CAuL)),
                ((+1, -9, 0xE6BCF2F3A2AA405EuL, 0x428EFE72A086D163uL), (+1, -12, 0xC08675ED9DAA3612uL, 0x971459FD38E17DBFuL)),
                ((+1, -13, 0xE7CFB5FE873DAC20uL, 0xBF59AFC12BBABBA9uL), (+1, -16, 0x9CC095B28522210AuL, 0x63AD17ED8F7A50F0uL)),
                ((+1, -17, 0x968AE21C3FA50F1EuL, 0x2E18CB58F14FFA79uL), (+1, -21, 0x9C1D9019A6C092FDuL, 0xEFFF4E63597ADAC9uL)),
                ((+1, -23, 0xEF94B661D8D1A0EFuL, 0x5BB60477C8F08084uL), (+1, -27, 0xAF0E45971A6B07DEuL, 0x45DA909810B7B149uL)),
                ((+1, -29, 0xD4AB359D3357EDA6uL, 0x66A7EAAE2BEDC497uL), (+1, -34, 0xBD60DFB81BCD81EBuL, 0x66B627DE58F2C4C7uL)),
                ((+1, -36, 0xB0F645BBA58EFFEDuL, 0x27A7BEC990CA741EuL), (+1, -42, 0x8C762F29C13429F5uL, 0x1E5D80CD6FA41878uL)),
                ((+1, -45, 0xB8EAD01ED7F4331EuL, 0xB70E4F8C0B7F79FDuL), (+1, -55, 0xDDC476664850787FuL, 0x17283802361D06DEuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX8Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 2, 0xCDE603544375A02BuL, 0xF0FED978BAE24041uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 2, 0x8E340B3A3A947185uL, 0x1168862AC5D2D030uL), (+1, -1, 0xA1544F5684DE4E37uL, 0x49A630DF46E5600BuL)),
                ((+1, 0, 0xABB09F434D277618uL, 0x501BCF163B05B725uL), (+1, -3, 0xAF973DFEC38031D1uL, 0x9375A3AB56A96794uL)),
                ((+1, -3, 0xEE106463ADFED6BFuL, 0x8A79498739691A18uL), (+1, -6, 0xD843FE8522808572uL, 0x0B277E247EEC7711uL)),
                ((+1, -6, 0xD17AB73A4CB945BFuL, 0x1540804958C6D9C6uL), (+1, -9, 0xA5F71423209C11FBuL, 0xEADF02D55ABAA951uL)),
                ((+1, -10, 0xF41B353A65C2564FuL, 0x598F1FD373F6E2B9uL), (+1, -13, 0xA4CDC638A9728FEDuL, 0x9D2C74A89AEDEF62uL)),
                ((+1, -14, 0xBED04BCFCC5ACEBEuL, 0xECE04F149031ABA4uL), (+1, -18, 0xD50908953CA6FC2CuL, 0x48CCA4F64EB5BB48uL)),
                ((+1, -19, 0xC6806AFC17FC76F4uL, 0xFD74CB23D963BC4CuL), (+1, -23, 0xAFF544ECAF883CBAuL, 0xC200548504BA4523uL)),
                ((+1, -24, 0x8593B4DC099A0835uL, 0x3F5EAF2E906F8FEDuL), (+1, -29, 0xB18B4181909D3978uL, 0x77CE2DF1C0331A44uL)),
                ((+1, -31, 0xDC6B384678742EA1uL, 0x1A771C47085AFFC5uL), (+1, -36, 0xC95369C52AF6D1F4uL, 0xBBC96E9BB34DC0FDuL)),
                ((+1, -38, 0xCAFCB09A0EDCA228uL, 0xCD2DA28875EFE929uL), (+1, -44, 0xDB98F443C6D638B6uL, 0x111AFAFA1C88E116uL)),
                ((+1, -46, 0xAF50012D3580C35CuL, 0x0091040EF058BB83uL), (+1, -53, 0xA328C0BB4492B10CuL, 0x72EF036284B2B7C2uL)),
                ((+1, -56, 0xBE39A09D263992ACuL, 0x6037B652EEC3D632uL), (+1, -67, 0xF03F05218E52EF4FuL, 0x2D88765912CFD702uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX16Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 3, 0x939BCA78381A5260uL, 0xFCB90B063888A4AFuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 1, 0xD00F20280F22C961uL, 0x9D1E348425076106uL), (+1, -2, 0xA2AAA8ADA7ED29F1uL, 0xCDE2944E7B64F206uL)),
                ((+1, -1, 0x803A03D6B850281DuL, 0x3A245A5C4DED312AuL), (+1, -5, 0xB2765503DE4DB234uL, 0xF96F9E7B77631C58uL)),
                ((+1, -5, 0xB599A4D600F746D0uL, 0x77293C344844B701uL), (+1, -9, 0xDD7BF1555BE7B42BuL, 0x074807D054D8BE42uL)),
                ((+1, -9, 0xA34A1ADA4DD92AE1uL, 0x540DBAD79D7581EAuL), (+1, -13, 0xAB333ED41E832C41uL, 0x6C7E50BA08449E55uL)),
                ((+1, -14, 0xC288A6AB7E72D67AuL, 0x76656CE0F26078D1uL), (+1, -18, 0xAB259C85F767622EuL, 0x6660AA1149A7429FuL)),
                ((+1, -19, 0x9B8898AA72CF93C0uL, 0x976C1102770A5F81uL), (+1, -24, 0xDE95EB05E2087A93uL, 0xDA3853C0A2E7A383uL)),
                ((+1, -25, 0xA590630C3585B181uL, 0x6EF44C8012032218uL), (+1, -30, 0xB8D2262EFE81575BuL, 0xC74F50E9EA8EA49CuL)),
                ((+1, -32, 0xE41915D12E238626uL, 0xE609A09A7AD25A22uL), (+1, -37, 0xBB4633BE9F34D19FuL, 0x34600A3B3CA5FB5AuL)),
                ((+1, -39, 0xC0B6B9EBE9BFC99AuL, 0x15AB8E854B76E2A3uL), (+1, -45, 0xD4ED1AC9DB592666uL, 0x0DF93A28BA48E0D9uL)),
                ((+1, -47, 0xB5C88677710E36F4uL, 0x70677C33BD05982AuL), (+1, -54, 0xE8467182B2399143uL, 0xBECC6C8367C3B8ABuL)),
                ((+1, -56, 0xA0D90F9687177A9EuL, 0xF8CF19EF7FB9692BuL), (+1, -64, 0xAB9A82EA628BF1E1uL, 0xD979D0631EEB8872uL)),
                ((+1, -67, 0xB2DC01418C1E15D6uL, 0xB0EB77006CFC04B9uL), (+1, -79, 0xEA719AF9982F5249uL, 0xA7EE4D19B8A57584uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX32Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 3, 0xDDB6470C74DB0B1BuL, 0xA4428B9E8D356DC6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 1, 0x9E71C0D50383E8B7uL, 0x418C627C04752100uL), (+1, -3, 0xA3303E643C39A255uL, 0xB94E862F28D6FBCCuL)),
                ((+1, -3, 0xC617D168E5C1F160uL, 0xDECABD04C60E3E4CuL), (+1, -7, 0xB390BE3165D95120uL, 0x138B4D53EAD6F531uL)),
                ((+1, -7, 0x8E52C607489CA46DuL, 0x90242FEDBA298CDFuL), (+1, -12, 0xDF7318DCCAC89925uL, 0x9CBCDA8B7E9209B4uL)),
                ((+1, -12, 0x81E143CDEFE65E4AuL, 0x6EB746615182542CuL), (+1, -17, 0xAD1F3618D514FB16uL, 0xC2ED8583F6665875uL)),
                ((+1, -18, 0x9D14AE40D0F12973uL, 0x17A9B48F856DBA09uL), (+1, -23, 0xAD6600C36BB4A2A6uL, 0xD4DE315C51DD89F9uL)),
                ((+1, -25, 0xFF0EBDCAA8DFF6B8uL, 0x2C86539F390F3E50uL), (+1, -30, 0xE1D36018CCE3D934uL, 0x1794B225E53575D5uL)),
                ((+1, -31, 0x89E1B700997F6BFEuL, 0xFC22CE8F78A04B46uL), (+1, -37, 0xBBA4AE7C417A3115uL, 0x42EB5C85FE8EBCC3uL)),
                ((+1, -39, 0xC0F9FFC2F3DB575DuL, 0x846F5B09F24A3F3DuL), (+1, -45, 0xBE17EDF843B4B417uL, 0x8AA3B7897CAC1A7AuL)),
                ((+1, -47, 0xA5A7EF9818EBA4D7uL, 0x5B957B2D06422ABFuL), (+1, -54, 0xD7CBBB4D7F748026uL, 0x0336D88A7DCF3D8AuL)),
                ((+1, -56, 0x9EC952C26EACABBDuL, 0x3DE188693EAF960FuL), (+1, -64, 0xEA82DCF1C49AF057uL, 0x0920B24DF5DE99B3uL)),
                ((+1, -66, 0x8EC9B6845112BCDDuL, 0x6731F0EA7DBDB7B8uL), (+1, -75, 0xABB4E9258FD7894DuL, 0xAD5D047ACFA68AFFuL)),
                ((+1, -78, 0xA166FCB2861E2438uL, 0xFCB4D2AC6A1BEAF8uL), (+1, -91, 0xD980AA3166D7434AuL, 0xE64EE9419CC02AD5uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX64Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 4, 0xAD56457428E46E35uL, 0xAE1EA5E5EA7FA03AuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0xFA3277BD8894E575uL, 0x2C3C1277EFF693A7uL), (+1, -4, 0xA34B40E5EB2794A9uL, 0x746072362033DD96uL)),
                ((+1, -4, 0x9DFA31B1DE2E1583uL, 0x756740F448D61EB1uL), (+1, -9, 0xB3C276ED0B0785DFuL, 0xBCE5CB689681D4D4uL)),
                ((+1, -10, 0xE553C33A36B79353uL, 0x6A08EDA94D90DE96uL), (+1, -15, 0xDFBB926E2BB8BF6BuL, 0x537D952145EA5AA7uL)),
                ((+1, -16, 0xD3743762FB1FBEA4uL, 0x0A38DFB1E29EBADAuL), (+1, -21, 0xAD5250FA08925084uL, 0x05AEA67DF6209A50uL)),
                ((+1, -22, 0x8138123C66910BAEuL, 0x3D36B6FA89307991uL), (+1, -28, 0xAD83F05097777E92uL, 0x9C5089EEDC4CA863uL)),
                ((+1, -30, 0xD40F858731D0C084uL, 0xC85350B6C3ED4A46uL), (+1, -36, 0xE1C457F2C73E1AF2uL, 0x28D657BE32689614uL)),
                ((+1, -38, 0xE7C10F75410F8850uL, 0x703A2CE8F1664D55uL), (+1, -44, 0xBB4F0CA23F27DD0FuL, 0xCCA1ABFD3DEA2DE8uL)),
                ((+1, -46, 0xA3F2AFD606372F7DuL, 0x7707D552BE0CC376uL), (+1, -53, 0xBD5046ED1A7CA452uL, 0xA292ED931C64682EuL)),
                ((+1, -55, 0x8E4864D97BFF0DFBuL, 0x290424628D9CC91DuL), (+1, -63, 0xD6285E5D52544105uL, 0xC7E8DB115C900D61uL)),
                ((+1, -65, 0x89E3B06A44B666C6uL, 0x40EB778AED16E184uL), (+1, -74, 0xE7739282987D711EuL, 0x920347EDBFA5A773uL)),
                ((+1, -77, 0xFAC17C70E86C9561uL, 0xB6991ECF65FFB92EuL), (+1, -86, 0xA7C06947FFB0AB48uL, 0x666139FF6F875196uL)),
                ((+1, -89, 0x8F55D168E5DA9340uL, 0xE213CBAA6C43A680uL), (+1, -103, 0xC5535DD181949FFBuL, 0xC9839BA21D97E481uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX128Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 5, 0x8C290F8F690E1485uL, 0x39EAD0153D0C59AAuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0xCBBDDE19CB592EB6uL, 0x9546EF557FC3E9F2uL), (+1, -5, 0xA330BD2D6B34A457uL, 0x784CF2D24E0D8DD3uL)),
                ((+1, -5, 0x81917B6094845390uL, 0xDDE75D1C68CC88C4uL), (+1, -11, 0xB37F6E48573B8782uL, 0x2B7D050ED51B1CD5uL)),
                ((+1, -12, 0xBD74904938192A09uL, 0x657189F1EB4C2BCDuL), (+1, -18, 0xDF2C627D817B7F31uL, 0xDBC22D361B20AD19uL)),
                ((+1, -19, 0xAFF9BF3DC6D7AB2BuL, 0x96985C8FA6046FD2uL), (+1, -25, 0xACA96AFC4A573779uL, 0x8D5694FF5B07E030uL)),
                ((+1, -27, 0xD8AD50527032B44FuL, 0x8D37E67BCE87FB08uL), (+1, -33, 0xAC929A82C578FC78uL, 0x77EB016F8780828FuL)),
                ((+1, -35, 0xB321193A35305E0FuL, 0xCB10DAAAE4A54172uL), (+1, -42, 0xE0154AF8CFF2B025uL, 0xF2917FE7D8105334uL)),
                ((+1, -44, 0xC53F3187FEB06910uL, 0xF49A241546676FC5uL), (+1, -51, 0xB96FA947368628CCuL, 0xAD37298C7E06FDD6uL)),
                ((+1, -53, 0x8C99AA81295F7150uL, 0xE43EF9624CA9F1BFuL), (+1, -61, 0xBACED99C77B0FDCEuL, 0x7148AD1E5CCEF371uL)),
                ((+1, -64, 0xF5E949F3B0DC23C4uL, 0x3B5A8273932BA8FBuL), (+1, -72, 0xD268F63B7A704E99uL, 0x3A0E612DD93E4479uL)),
                ((+1, -75, 0xF028072A66BC479EuL, 0xC439D9AA51CFA058uL), (+1, -84, 0xE202E9B9FDAFB35CuL, 0x551639CD2603D225uL)),
                ((+1, -87, 0xDC11AECA7FBB10F6uL, 0x6F6E18F799E10400uL), (+1, -97, 0xA21FAE87619E6984uL, 0xBBA81D7F0FA819A6uL)),
                ((+1, -101, 0xFD9C1110E3B1173EuL, 0x7C1A3EC9CC18EF39uL), (+1, -115, 0xB18C2212517EF2F1uL, 0xC86A4B3CCB44252EuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX256Table
            = new(new (Hexcode c, Hexcode d)[]{

                ((+1, 5, 0xE9092C6D7289A871uL, 0x6013295BEA81D987uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0xAA3CE5D8F9645957uL, 0x32CAB37D18116F86uL), (+1, -6, 0xA2FC426710AF4B76uL, 0xB78BEDC8775F0989uL)),
                ((+1, -7, 0xD9A3C0DEC642F6AFuL, 0xD5024D7B4862FCBCuL), (+1, -13, 0xB3043E3870981790uL, 0x26A4AD64693DF7BEuL)),
                ((+1, -14, 0x9FF2058793AA6E55uL, 0xF47D374086E580E3uL), (+1, -21, 0xDE369036C6CB2EECuL, 0x893EE3B67853AA91uL)),
                ((+1, -22, 0x95589902A7F08EF0uL, 0x3520F8B8A5A7FC18uL), (+1, -29, 0xAB992E70ABE15641uL, 0x4270333BF4FD8DDFuL)),
                ((+1, -31, 0xB8DCE6DF8B870D0DuL, 0x2474364A9DEC3D11uL), (+1, -38, 0xAB23EE7FF5590AA5uL, 0x4DE6E2D0AD750162uL)),
                ((+1, -40, 0x99A4E293DD8E8AB0uL, 0x6D3F21E66D1B9503uL), (+1, -48, 0xDDAA0E0B0F595EFFuL, 0x4A99E9BC591C8D3EuL)),
                ((+1, -50, 0xAA17CDA72C5FB332uL, 0xAF9FB9E17E68CD87uL), (+1, -58, 0xB6E316EA7458EC20uL, 0x96F6D7E7599D6242uL)),
                ((+1, -61, 0xF3CCB13F823E4021uL, 0xD405197AB1EF0A9BuL), (+1, -69, 0xB7929093C6D9EC7BuL, 0xE3C5F6BD9893D0FCuL)),
                ((+1, -72, 0xD65CEEF1C9FAB381uL, 0x0720E771E677FD88uL), (+1, -81, 0xCDD22E6C11FA3DE2uL, 0x267525158E199B86uL)),
                ((+1, -84, 0xD27E771448309DC4uL, 0x531692224F950782uL), (+1, -94, 0xDBB704F9A40C5B83uL, 0xDDCF606057D46583uL)),
                ((+1, -97, 0xC1F650427777B045uL, 0x198A564D9EA4EECDuL), (+1, -108, 0x9C092FF4F1FC5A95uL, 0x61876316429578FFuL)),
                ((+1, -112, 0xE0D181F47E050687uL, 0x3B3E5610A3EA4223uL), (+1, -127, 0x9F8FE9B574355062uL, 0x97BEAA7D31921369uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX512Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, 6, 0xC6274A75733803D1uL, 0x01FFE69C32806710uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0x914A1D7A044DD909uL, 0x65768B5432A43B2DuL), (+1, -7, 0xA2BC566613E8FE6DuL, 0x9960CEE9DCE66DEAuL)),
                ((+1, -8, 0xBA6F90412F7AFFE5uL, 0x6C6492522E284C46uL), (+1, -15, 0xB270DE5238780C17uL, 0xCBFE8473E8A80FE3uL)),
                ((+1, -16, 0x89870B4E3E49AD90uL, 0x4DBE39A61C4184ACuL), (+1, -24, 0xDD15BFB2678547D9uL, 0x493D9E4FA4478AD2uL)),
                ((+1, -25, 0x80E63E468BDF2E83uL, 0x9B2BE7295E0CA5B3uL), (+1, -33, 0xAA5F22185D7F9413uL, 0x04601205F47A523FuL)),
                ((+1, -35, 0xA0294B6B1EBBA9AAuL, 0x88F15C03B438ACB9uL), (+1, -43, 0xA984C1E6F55C0E9CuL, 0x77388547F8B63D30uL)),
                ((+1, -45, 0x859FD0D1E455E925uL, 0x8D0618FC35DD6B4EuL), (+1, -54, 0xDAFA35B4FBFA13E0uL, 0x097B2F33EFB24D22uL)),
                ((+1, -56, 0x9480225BBE6F7192uL, 0x98D6DECBBB1C3131uL), (+1, -65, 0xB41C83B9695D2720uL, 0x7F7F574086B99DC7uL)),
                ((+1, -68, 0xD5AD406D88529072uL, 0xDF6DBD5B85E6DE38uL), (+1, -77, 0xB41F79F64A85F5EFuL, 0x189BC17D297DA330uL)),
                ((+1, -80, 0xBC9CBEB4E8D5A40DuL, 0xAFE2FE92FA62A3D4uL), (+1, -90, 0xC90A1E584349B99AuL, 0x92F171FD36031310uL)),
                ((+1, -93, 0xB9F0ECE43B60B13AuL, 0x0195C292E68D7EFEuL), (+1, -104, 0xD55350CB2EF5CAB8uL, 0xB2D060288B43A9AEuL)),
                ((+1, -107, 0xAC07E08741B6611CuL, 0xF40C09C6C4823446uL), (+1, -119, 0x9611D03935ECEF66uL, 0x98B01242064E437CuL)),
                ((+1, -123, 0xC83EEED187D6EF33uL, 0x3D9FCEE0AC27FC3FuL), (+1, -139, 0x8FBCA8BA9625BC7BuL, 0x50468FBD2100DB7EuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeXSingularRcp256Table
            = new(new (Hexcode c, Hexcode d)[]{
                (Hexcode.Zero, (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -112, 0x86042E256FB7A172uL, 0x46B145B85B93BD1DuL), (+1, 13, 0xCB67A490A9C6DAB1uL, 0xF9710D6573B433D2uL)),
                ((+1, 9, 0xEF0ECFA491495989uL, 0xA00DA7BA3308C417uL), (+1, 26, 0x943492E0A542B066uL, 0x6316CB0D45A03BAFuL)),
                ((+1, 23, 0xB25E46404B358870uL, 0x1891171995A7BCC6uL), (+1, 38, 0x835A870C59308984uL, 0x0385BEF517AEFB60uL)),
                ((+1, 35, 0xF2D4B0924CB51C9DuL, 0x8090B278C29FDF7DuL), (+1, 49, 0x9E68DA642983AACBuL, 0xE5CDF9072E8C1EF4uL)),
                ((+1, 47, 0xC7EAAA895C185F04uL, 0x1F2010453089B398uL), (+1, 60, 0x89C5A931DD8E4605uL, 0xA23BFC6094694059uL)),
                ((+1, 58, 0xDE87B4B88D7A2B9FuL, 0x1DB415A8AD0D118AuL), (+1, 70, 0xB2C909510ADC0D59uL, 0xED23D8731FCF172DuL)),
                ((+1, 69, 0xB15F0E73C6665FB6uL, 0x146D2CEC325C57E2uL), (+1, 80, 0xB0AAC5E539FBDD7CuL, 0xA650D8F47B60B7B7uL)),
                ((+1, 79, 0xD1467ECEADCECE8AuL, 0xE0FBB5D50938469BuL), (+1, 90, 0x868AD33299265C21uL, 0x5C15DE9C0294B61CuL)),
                ((+1, 89, 0xBA5A4AC29D02EF2AuL, 0x317A353F0019CE02uL), (+1, 99, 0x9EE6B5A0BB5478EDuL, 0x1BD8043C7259AD83uL)),
                ((+1, 98, 0xFD394EF16E916F68uL, 0x7CF235785DD1257AuL), (+1, 108, 0x91BF688917D5495EuL, 0xEAF20A2C54752AC8uL)),
                ((+1, 108, 0x83E6BC7A0D0EA8A6uL, 0xEF9AB7A653E409A1uL), (+1, 116, 0xCF2841A0C9388AE3uL, 0x9D053DB3F641A67CuL)),
                ((+1, 116, 0xD2B170DAF7A59353uL, 0x2BC4B046FD5F5A01uL), (+1, 124, 0xE2C970096AC88AA9uL, 0x58A0504E4DF76AD8uL)),
                ((+1, 125, 0x8077055F03266159uL, 0x1301036DA2B97553uL), (+1, 132, 0xBD6841F775004E56uL, 0x39CC3A04551847D8uL)),
                ((+1, 132, 0xED3877B3759FE7E6uL, 0xF9BBDEE038A53345uL), (+1, 139, 0xEE1A8624212CC42CuL, 0x53EC3355C2EEEFEAuL)),
                ((+1, 140, 0xA3C3C09B87A4FBDAuL, 0x44A79B855ADD4B72uL), (+1, 146, 0xDD2C0611B7D24BCCuL, 0x50F40EBED645225EuL)),
                ((+1, 147, 0xA623576CFC6D52BCuL, 0x9BA8122CEF2CE29AuL), (+1, 153, 0x942615483FE0A90EuL, 0xDD7C1E99E0169852uL)),
                ((+1, 153, 0xF1E9AB66A26674B5uL, 0xBDF37176F7EF6682uL), (+1, 159, 0x8A87B8E22499839DuL, 0xF7F9140EA0194A8EuL)),
                ((+1, 159, 0xF4E042683CC27236uL, 0xB48B0253279C2584uL), (+1, 164, 0xACF433A9BC4323BCuL, 0x937A30BCDB7BB91CuL)),
                ((+1, 165, 0xA4F2FFE0ACAFADA4uL, 0x5B2EAEC46C7641F7uL), (+1, 169, 0x87502F0912921A42uL, 0x5900E922836CB99DuL)),
                ((+1, 170, 0x8AED3B5017BB7AA2uL, 0xD6D15F54962C1FBFuL), (+1, 172, 0xF11AC3EA99C3A102uL, 0xA89B6D678A036F5AuL)),
                ((+1, 174, 0x8500A9B10BCBC2DFuL, 0xD03E2A1105299EEAuL), (+1, 175, 0xD0347A1A34CEF916uL, 0x00D6DEEBC3861694uL)),
                ((+1, 176, 0xF5CECA250F6CC58FuL, 0x15DB17E5CBDEE067uL), (+1, 176, 0xFACA9F03B4690D26uL, 0x5E7151926B3B94D5uL)),
                ((+1, 178, 0x98F4701216B4BFF7uL, 0x09CC38982CB9C818uL), (+1, 174, 0xFECF25892C584427uL, 0x1FB8B28A7B8C542FuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeXSingularRcp128Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -8, 0x8E64DF5D78F6DD0DuL, 0xDCDD7800C629D2A7uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 2, 0xD0A672CA1853764FuL, 0x9943DF42855C0F3EuL), (+1, 10, 0x8F59F65A22546B3DuL, 0x5496AAB471FA7D2FuL)),
                ((+1, 12, 0x85E5423698C58390uL, 0xF7F75F103D0AD24FuL), (+1, 19, 0x8ABA85A1ADC3C039uL, 0x7F1E5AE79A9A7781uL)),
                ((+1, 20, 0xC5E637A0DF9801B9uL, 0x79975DFAD9A15E7EuL), (+1, 27, 0x98079C4041F6FAA8uL, 0x532D5432CFA37E02uL)),
                ((+1, 28, 0xBA472EADD1ACB387uL, 0x54B6236881639E23uL), (+1, 34, 0xCFC388157B05A46CuL, 0xB72FAB34AA6FFBB5uL)),
                ((+1, 35, 0xE944883893F6248BuL, 0xFFBBAB65B4294461uL), (+1, 41, 0xB7D1C66AF02CF5F0uL, 0x3DECB2D843E515D4uL)),
                ((+1, 42, 0xC51B09A621C94FB2uL, 0x44690F67D6D844FCuL), (+1, 47, 0xD3D41028A48D5AE7uL, 0x24E877ED0512B22AuL)),
                ((+1, 48, 0xDF5B4A1310C9F306uL, 0x2463555221EB7648uL), (+1, 53, 0x9C0432FAF197A6FBuL, 0x0850D09C6AD17C0DuL)),
                ((+1, 54, 0xA5678E58D6AFC38AuL, 0x9A6B5E35E0727DCBuL), (+1, 58, 0x8C578AFFD21E6806uL, 0xFB7171F28A9D6A12uL)),
                ((+1, 59, 0x9852748D0FE2E122uL, 0xEF9BDABE210C9FCBuL), (+1, 62, 0x8DB631E5B92B2770uL, 0x29E4C467E0253256uL)),
                ((+1, 63, 0x9FE3656BFA0D1C4DuL, 0xC7580036D053F219uL), (+1, 65, 0x895DB2DFC577A450uL, 0x9415ADE8FB27B511uL)),
                ((+1, 66, 0xA2F444F972E01F11uL, 0x52C5CB6ADCC882BAuL), (+1, 66, 0xB63B5D8EEAD22309uL, 0xFE4D932414658CDDuL)),
                ((+1, 67, 0xDFBA147C7CFAFC6AuL, 0xB6B6674BDA1E7C80uL), (+1, 64, 0xB597285748B80369uL, 0xE5C086A37E2A39CCuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeXSingularRcp32Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -7, 0xB3317C8103DA4C1CuL, 0x5995D799BE25F283uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 3, 0x9D33E99105159BA5uL, 0x134BBDC18CD8D99EuL), (+1, 9, 0xB7707424A5EC734FuL, 0x61A07409A9D65A07uL)),
                ((+1, 11, 0xF77DF93D2D751A70uL, 0x9DE77E7043873F10uL), (+1, 17, 0xE9ABC3CE454F6CA4uL, 0x72E7B19784A82628uL)),
                ((+1, 19, 0xE700415730778FEDuL, 0x0381E92EE306F9FCuL), (+1, 25, 0xAE8F8701983D4B34uL, 0x92E1566D7F45F501uL)),
                ((+1, 27, 0x8E53A53D053AC3D6uL, 0xFEBB94DAE17855D7uL), (+1, 32, 0xAA0156526F0A16AEuL, 0xC8295E9BFA862888uL)),
                ((+1, 33, 0xF40934BCA845218FuL, 0xD50805E609D912F5uL), (+1, 38, 0xE30183637E419654uL, 0x523F9E60A691213EuL)),
                ((+1, 40, 0x957EF25564170888uL, 0x0DF4E5889F2695BDuL), (+1, 44, 0xD4D9F084DBD4ED7BuL, 0x6FB8C76A311BA692uL)),
                ((+1, 46, 0x84616836AC0055B8uL, 0xB46FD5DA9D78489EuL), (+1, 50, 0x8D439322E19D32E0uL, 0x256ECF99ACE2A417uL)),
                ((+1, 51, 0xA983888A8B6B146BuL, 0xF39FC36420AC9AB8uL), (+1, 55, 0x842AA261C0E7B5BCuL, 0xB373AD675BA3AA99uL)),
                ((+1, 56, 0x9B84A99DFC0755D5uL, 0x70D89151EC355931uL), (+1, 59, 0xABAB1F9F954DC22CuL, 0x8A6C05D2A2AC745EuL)),
                ((+1, 60, 0xC89FABF1A80DCDB1uL, 0x23D3598BDC9E06F2uL), (+1, 63, 0x968CDC060D16AB89uL, 0x0B2083C46375D03BuL)),
                ((+1, 64, 0xB0780BA43F902883uL, 0x2B11C94A73163C60uL), (+1, 66, 0xAAA4C9C29D3E3168uL, 0x5197CF0BA4318697uL)),
                ((+1, 67, 0xC9F03FD3D6D098EEuL, 0x8768E8D012FE8F37uL), (+1, 68, 0xE980D5DBD6BDFCEFuL, 0x317C62E2120646D6uL)),
                ((+1, 70, 0x8B9EA266F783FF86uL, 0x30E9C032E57F7872uL), (+1, 70, 0xAC96464B81143811uL, 0x3C8E6242A256AEB1uL)),
                ((+1, 71, 0xCD9C44499EB53CE3uL, 0x123AAB4817348573uL), (+1, 70, 0xE10E5B7791E28609uL, 0xB59B661F55D3097FuL)),
                ((+1, 71, 0xF6DD9DCBB7FED186uL, 0x35123B06F791E1B4uL), (+1, 69, 0xA25B8845A61FAA4FuL, 0x7EAD3690B8DBCC2CuL)),
                ((+1, 69, 0x94C669E2E9A6EBC0uL, 0x23B4904E46FEE73CuL), (+1, 64, 0xF6AB231C8D8BD528uL, 0x753BFAD86C800313uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeXSingularRcp8Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -5, 0xF1C1A317BED2F1AFuL, 0xBE938C0F24897EB6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 3, 0xDD2BE8032015D019uL, 0x7170F68B42245836uL), (+1, 7, 0xC5229F64ADBEB630uL, 0xFB747743CE325107uL)),
                ((+1, 10, 0xB5FFF2202CAB42D6uL, 0x2FD3F1295B176C15uL), (+1, 14, 0x872D8DD5E0C75E64uL, 0xF48B0E11DA80473BuL)),
                ((+1, 16, 0xB20D438F1189FA7BuL, 0xD58C056DDCEFA4A0uL), (+1, 19, 0xD9E7E9CA91FD6BC3uL, 0x2AB18476EB7403C5uL)),
                ((+1, 21, 0xE6A3C09FB03E5F86uL, 0x6CBE1D44962FE68CuL), (+1, 24, 0xE58EBB7FBCA35B6BuL, 0xE31840FBE389C4A4uL)),
                ((+1, 26, 0xD084C14134077EA9uL, 0x46EFA32EE67A8A4CuL), (+1, 29, 0xA64CBE8668EC0654uL, 0xFF750A9BE104D40AuL)),
                ((+1, 31, 0x872F29F00AC51DE5uL, 0x36649A673B84954CuL), (+1, 33, 0xA9D6E20524EE9048uL, 0x6E6D17B5B130AC8BuL)),
                ((+1, 34, 0xFE5C0C1D41DCE889uL, 0xB883D2B90A2987F0uL), (+1, 36, 0xF6B5EAF0535C53DAuL, 0xC2AD6F124F06CE9DuL)),
                ((+1, 38, 0xADC2CE0FFE1482B9uL, 0x004D6BD596C7345CuL), (+1, 39, 0xFE20F24289C6591AuL, 0x605371A032432DA3uL)),
                ((+1, 41, 0xAAE064DC73F8D184uL, 0xD4AF0999CD5028C2uL), (+1, 42, 0xB72257B57678A268uL, 0x0594A86CC6D386D4uL)),
                ((+1, 43, 0xED69D3AA4C136613uL, 0x63099D84D84E6E56uL), (+1, 44, 0xB41A9D40C671B22EuL, 0x756A0DC95ED50896uL)),
                ((+1, 45, 0xE1E863CD7BBCD086uL, 0xD6832CBD27A23C06uL), (+1, 45, 0xE862031DEB26B87BuL, 0x98544BCBC43A43B6uL)),
                ((+1, 47, 0x8C395FC111BEDDDFuL, 0x3CED6FC29AE3243EuL), (+1, 46, 0xB93683BDA81D4E2DuL, 0x03DF3CA6C3A3733AuL)),
                ((+1, 47, 0xD1FDF57ACD2316CEuL, 0xCE23EB0227E15B0DuL), (+1, 46, 0xA622C8CE3F4CF4C1uL, 0x110033113790CC38uL)),
                ((+1, 47, 0xA55289AD38132D92uL, 0x0CBA70C8F2132974uL), (+1, 45, 0x906202B2FB523A72uL, 0x5AE05C7C235F0085uL)),
                ((+1, 45, 0xCF0F813262EC1652uL, 0xEF7FB31D2EB577D2uL), (+1, 42, 0xBFBA22927D063120uL, 0x095BA3E66151FF90uL)),
                ((+1, 41, 0xFC806A5818B16FF2uL, 0xC8137681A831A519uL), (+1, 37, 0xD984BACA418120C1uL, 0xD785FE4E8D8D9F9EuL)),
        });
    }
}
