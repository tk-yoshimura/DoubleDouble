using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class ScorerTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode c, Hexcode d)>> tables = new(){
                { nameof(HiPadeX0Table), HiPadeX0Table },
                { nameof(HiPadeX1Table), HiPadeX1Table },
                { nameof(HiPadeX2Table), HiPadeX2Table },
                { nameof(HiPadeX4Table), HiPadeX4Table },
                { nameof(HiPadeX8Table), HiPadeX8Table },
                { nameof(HiPadeX16Table), HiPadeX16Table },
                { nameof(HiPadeX32Table), HiPadeX32Table },
                { nameof(GiPadeX0Table), GiPadeX0Table },
                { nameof(GiPadeX1Table), GiPadeX1Table },
                { nameof(GiPadeX2Table), GiPadeX2Table },
                { nameof(GiPadeX4Table), GiPadeX4Table },
                { nameof(GiPadeX8Table), GiPadeX8Table },
                { nameof(GiPadeX16Table), GiPadeX16Table },
                { nameof(GiPadeX32Table), GiPadeX32Table },
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach ((Hexcode c, Hexcode d) in tables[key]) {
                    stream.Write((UInt64)c.Hi);
                    stream.Write((UInt64)c.Lo);
                    stream.Write((UInt64)d.Hi);
                    stream.Write((UInt64)d.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX0Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 0, 0xA4AB4184614CAF01uL, 0x2B1D0C1A9AEA5018uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 1, 0x8C05758B19EC87BAuL, 0x8A54FE162630003CuL), (+1, -1, 0xE2131B83F9970AFBuL, 0x6E46B5B32E8E1B42uL)),
                ((-1, 0, 0xAEE61EB5DD6ED470uL, 0xB9A72253C998C282uL), (+1, -2, 0xF47EE9EFB22D326CuL, 0xA06F37627868E251uL)),
                ((-1, -1, 0x9678437175B7975CuL, 0x6856ADFB98826B31uL), (+1, -3, 0xB19FF962F8BD7E21uL, 0x893AE374BC9E673BuL)),
                ((-1, -3, 0xB37D50FD802DE7A8uL, 0xA3B48095A0BFADCAuL), (+1, -5, 0xC0397AB5925D82BAuL, 0x4647CF32A403649FuL)),
                ((-1, -5, 0xA30FBD38BD7CD7FFuL, 0xEC375BE97227BFDAuL), (+1, -7, 0x9CCE8D8558046419uL, 0x6174C7AE0ED3B56BuL)),
                ((-1, -8, 0xDCE72E5496C655C7uL, 0x8A8BFE1FA35A01D4uL), (+1, -10, 0xC32C3FCDAFD7C3BCuL, 0x8923891BDB99093CuL)),
                ((-1, -11, 0xE288EB524816F840uL, 0x6EF96578E884B7EFuL), (+1, -13, 0xB564E143C7E8DDF2uL, 0x2F2C276962B7A1B4uL)),
                ((-1, -14, 0xA6694D3BD77DC6CCuL, 0xB904BCA73E11EBC2uL), (+1, -17, 0xF27711DD3B27007AuL, 0x7EF445ED5A42A133uL)),
                ((-1, -18, 0xA62CDA2326D96A62uL, 0x75F4965253CF04DDuL), (+1, -21, 0xD5DC66E804153E3CuL, 0x52585C37298452FCuL)),
                ((-1, -23, 0xBC76C1475E012D40uL, 0x40C2D882242B08BEuL), (+1, -26, 0xCE816AF80D0D68D9uL, 0x88821C0D6784EB7BuL)),
                ((-1, -29, 0x970EC041087F88FDuL, 0x36310263D568AAB2uL), (+1, -33, 0xEF4E2A47BB2A357AuL, 0x2987FA602C5C0827uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX1Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 1, 0x8B85C72601368B72uL, 0x26C16F5F18361BF0uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 1, 0xACE0BB6D3CF68890uL, 0x59D6FD7B0F281B02uL), (+1, -1, 0xE4B3E674F26E7E98uL, 0xED5B5EBC2C629B40uL)),
                ((-1, 0, 0xBD56DB4B592F1865uL, 0x3B7DE2A96B18F38CuL), (+1, -2, 0xDA03414FA49526F7uL, 0xD0824FD86A00705AuL)),
                ((-1, -1, 0x833ECFD499ADE401uL, 0xD6ECD205A926D516uL), (+1, -3, 0x8596B454716CDE80uL, 0xE7A09ADA24AF6DAEuL)),
                ((-1, -4, 0xF76E26F5F980710FuL, 0x399C18EBB3BD7553uL), (+1, -6, 0xE4A7B298D8E54734uL, 0x9A596D468B4B4181uL)),
                ((-1, -6, 0xA5F5737B65B60993uL, 0xE8027A91B9625D95uL), (+1, -8, 0x8B3D2B608746CCF5uL, 0x2905718D39673A59uL)),
                ((-1, -9, 0x9CC0F21DEDD351A6uL, 0xCDA5578A239CC4D8uL), (+1, -12, 0xEFA6B8D42D7E8EC5uL, 0x25200A0DCCD413BBuL)),
                ((-1, -13, 0xCB1854268497CC47uL, 0xF70EED194B1C0CF2uL), (+1, -15, 0x8BA83E5FDA0B150CuL, 0x727054B95339681CuL)),
                ((-1, -17, 0xA55718A06F08FEDDuL, 0xE32CAFE6C06EB3C5uL), (+1, -20, 0xC963A3128DD93B2FuL, 0xC69DC47941097E38uL)),
                ((-1, -22, 0x8F15351270EC2F7AuL, 0x4CE560FADA0C5FE4uL), (+1, -25, 0x91CA2C741275EA34uL, 0x5286CC402AD4D2D8uL)),
                ((-1, -29, 0x92FD8884E74F6CDBuL, 0xB352C33DFDACE61AuL), (+1, -33, 0xDA8694DE75ECD196uL, 0xE86825490F32FF28uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 1, 0xB4E98D58A87992F9uL, 0x5AD7318F69333B24uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 1, 0xE0DE5433A627413FuL, 0x4CE8F198BBABDD96uL), (+1, 0, 0x8604AA2184A0C24FuL, 0x87A95EAA4756A349uL)),
                ((-1, 1, 0x830476EB21C33DE3uL, 0xF6CB49DE28A564D6uL), (+1, -1, 0x8C1ECE7DF482FCC7uL, 0x5FCF9E1B6DAD0AB7uL)),
                ((-1, -1, 0xBF9F9AEC07F7BC79uL, 0x5F87CFE570483B1EuL), (+1, -3, 0xBB848924A41E1F0DuL, 0x90EAD793DC401ADCuL)),
                ((-1, -3, 0xC2C88318D58B111AuL, 0x1BE11264CC96908BuL), (+1, -5, 0xB08710C6955E602CuL, 0xE35A23AF7900B018uL)),
                ((-1, -5, 0x907357B51AD229B1uL, 0x3DEF5BB0FA3D459BuL), (+1, -8, 0xF3CD4067023B863AuL, 0xD9BF1D9AC140761AuL)),
                ((-1, -8, 0x9F603EADDB183DB0uL, 0x2E0446E643411369uL), (+1, -11, 0xFB086D32874B94A2uL, 0x7342E160D0239DFCuL)),
                ((-1, -11, 0x82E93C5B3C130122uL, 0x295940542AABB224uL), (+1, -14, 0xC01D129B44FFDEB8uL, 0xE49BD7AC3A3536AAuL)),
                ((-1, -15, 0x9CFFB37B4F57A95DuL, 0x3278758FCC0D1ABFuL), (+1, -18, 0xD55B99D484B3A92DuL, 0xF8BD971186280952uL)),
                ((-1, -19, 0x82F2AA50CE4C14F9uL, 0x4F76A879DF5A861EuL), (+1, -22, 0xA29A6E6962EABE96uL, 0x2F68C0199C86D264uL)),
                ((-1, -24, 0x890F6C70DBE9A2C9uL, 0xD69AA921377951CCuL), (+1, -27, 0x973191311896B865uL, 0xB10BE4F80EAF1B09uL)),
                ((-1, -30, 0x8DEEB2BFA0464E05uL, 0x71D386398563B49FuL), (+1, -33, 0x8365F4B71F022361uL, 0x9BC4EC235328A39FuL)),
                ((-1, -38, 0xA1C6A948DB26D259uL, 0x8B647D51F46EC141uL), (+1, -42, 0xDF001F14BE3CD630uL, 0xF696ACF39186967FuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX4Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 1, 0xEC0F765FEBB4B24EuL, 0x2044DF5A2C202DCBuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 1, 0xF32AF77FB8BCDBE4uL, 0x7BCAA85F9B89CE7CuL), (+1, -1, 0xF05076C60969F132uL, 0xA60F5407C2FA77A4uL)),
                ((-1, 0, 0xE881DC784FDA2763uL, 0x68BB461CC7688E4EuL), (+1, -2, 0xD526B4627D4C68F2uL, 0xB3BDDECE39F4CF5BuL)),
                ((-1, -1, 0x87EC6B397859D06FuL, 0xC57AB39D0A9CAE40uL), (+1, -4, 0xE8F34F30619D1996uL, 0x703FA2013CB5363AuL)),
                ((-1, -4, 0xD7112EBA75C067F7uL, 0x6BB706E773F29D56uL), (+1, -6, 0xACE7057962D87021uL, 0x855575D4DBF04BD0uL)),
                ((-1, -7, 0xF0B7E436156D07FFuL, 0x4FD56222A1AAE282uL), (+1, -9, 0xB5AC090F1746ACC3uL, 0xC0EE20A5ECEA5A1FuL)),
                ((-1, -10, 0xC15E4AE3F9090DBBuL, 0xF6D096E539F1A1A3uL), (+1, -12, 0x88B99BDFAA98777FuL, 0x03C6429D52382F8CuL)),
                ((-1, -14, 0xDD34410A80D7EFA0uL, 0xF56607C9E3F75A9FuL), (+1, -16, 0x91C49FEC5DFC9F78uL, 0xBC67A08929F42CBFuL)),
                ((-1, -18, 0xAE6FE88BDF1B164CuL, 0xD9F453A56E115C4CuL), (+1, -21, 0xD4386080B559FA79uL, 0x65BE7243DE47747EuL)),
                ((-1, -23, 0xB14BB3E88E9916A0uL, 0xB1FAD8761820D242uL), (+1, -26, 0xC3CBAD00B34FEFA2uL, 0xFD9523F11A6CB919uL)),
                ((-1, -29, 0xCBDBFB3274F4FEE4uL, 0x72AD94BBAAF75A09uL), (+1, -32, 0xC6C95F3287F8D6AEuL, 0x5A45D8A340842D01uL)),
                ((-1, -36, 0xCF1BBA87D0C83678uL, 0x3C34639DB774F803uL), (+1, -39, 0xAA977A65C8BB4854uL, 0x52225E29E47339E9uL)),
                ((-1, -45, 0xD702809BC7DD1FDFuL, 0x1A5C644631C0510CuL), (+1, -48, 0x873A73ABBDD7AA68uL, 0xFE66A1151753FBA4uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX8Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 2, 0x9505AB198D661129uL, 0x82772F0BDA05E6EEuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 2, 0xA68C706E7A035E20uL, 0xB0A7A6305D57A9C8uL), (+1, 0, 0x8A26D4169763DDCAuL, 0x5DD8203C4B4344E5uL)),
                ((-1, 1, 0x927B4F92EAC00DFCuL, 0x97FAF1136CF62333uL), (+1, -2, 0xE7A88F08B54858F4uL, 0xC2E575804F27B652uL)),
                ((-1, -1, 0x8F6A8A715EDB1FF7uL, 0x8A9CB66538BFF763uL), (+1, -4, 0xD7A21F5C4CDF0EBAuL, 0xA2D5374DCF04F281uL)),
                ((-1, -4, 0xB2452834E759EAF5uL, 0x427650B040FF5255uL), (+1, -7, 0xFE671C8EB583329DuL, 0x53C55E6DBBA684DCuL)),
                ((-1, -7, 0x9540BF138DDC87D0uL, 0x4BA2E4652FC7FB26uL), (+1, -10, 0xC9ADAAE1E40C1273uL, 0x51F65F6401225BF1uL)),
                ((-1, -11, 0xAC41697DA399B708uL, 0x05EE02078088537AuL), (+1, -14, 0xDB8FF2BCEBF2B552uL, 0x4857428E6624AC19uL)),
                ((-1, -15, 0x88CC450A98D0C755uL, 0x646B72B86A742D10uL), (+1, -18, 0xA38B58F40E3A5B3DuL, 0x786F3EE3FB8D9AEEuL)),
                ((-1, -20, 0x91F62EC4081CED96uL, 0xB3AAB8901FDB9632uL), (+1, -23, 0xA2557D19BD9536B0uL, 0xC054F5CB39133EAFuL)),
                ((-1, -26, 0xC71EEAC5CE9B49DDuL, 0x8DD642F3016CB8A5uL), (+1, -29, 0xCBB5B93FFF88273EuL, 0x566870194732C06BuL)),
                ((-1, -32, 0x9FBADF94CDBD249EuL, 0x3C1AEDFB5187FB23uL), (+1, -35, 0x94102E0AC7593057uL, 0xB72F9B96A17A3367uL)),
                ((-1, -39, 0x836D52DB2F4EE684uL, 0x6DC3F9AF30503448uL), (+1, -43, 0xD81AF14B62CBF218uL, 0x7048AA716A55A142uL)),
                ((-1, -48, 0xADBEA79B58A866E3uL, 0x42F6C7F8727E4640uL), (+1, -52, 0xF45DDDE1034B4C21uL, 0xA1594F677A630E63uL)),
                ((-1, -59, 0xD1B003CDC4F93F71uL, 0x14CA234F696C1468uL), (+1, -63, 0xE63160969D129A68uL, 0x23E547E2B3493052uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX16Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 2, 0xB4DECCF87726ED7AuL, 0xA3D0634A9F05C74CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 1, 0xB1F3FA0638B3817DuL, 0xA297DC0FBD0624ECuL), (+1, -2, 0xF3B7078212F78DDAuL, 0x626745472FC44E6BuL)),
                ((-1, -1, 0x99575B28BB52DAD6uL, 0x780D5C4DE366F675uL), (+1, -4, 0xCA8596FCE6B91370uL, 0x78668AF826D6CEE4uL)),
                ((-1, -4, 0x98E9D998E04F23B3uL, 0xD6BFD15EB9044018uL), (+1, -7, 0xC226D68C93EC4140uL, 0x45B26127F3C777D5uL)),
                ((-1, -8, 0xC3DB5D4D1890BB13uL, 0xB81BAB57C8FDDFFEuL), (+1, -11, 0xEE44E487FA4D2C0FuL, 0x92351F37DA1EA15BuL)),
                ((-1, -12, 0xA8B752670BBFAC91uL, 0xBD5E9F5DDB4FE6C8uL), (+1, -15, 0xC3E7F991A93C466CuL, 0xB0EA3292CC2D9E18uL)),
                ((-1, -17, 0xC6C5E1144EE44196uL, 0x7372FD9F82066A5DuL), (+1, -20, 0xDB4A5B0A0F401943uL, 0xCFD478E4797C6F97uL)),
                ((-1, -22, 0x9F954F11DC3D9682uL, 0x9337518422CAB6D4uL), (+1, -25, 0xA6581BDC72611F5CuL, 0x0820F80E37891021uL)),
                ((-1, -28, 0xAAEB8063680F63D8uL, 0xFBD5840A693F3254uL), (+1, -31, 0xA72FA20967DCA25EuL, 0xBB80282070245B53uL)),
                ((-1, -35, 0xEA4C9EEAAA12F692uL, 0x0A1BF57F529156D8uL), (+1, -38, 0xD5335772195F5445uL, 0xCDDBBDA786633842uL)),
                ((-1, -42, 0xBFC5FB9FB9F15EDAuL, 0x2C44D6FB67ECCBDCuL), (+1, -45, 0xA06FD81C66622177uL, 0xFF77335ED1E4B8B9uL)),
                ((-1, -50, 0xA6D62197402FACACuL, 0x368FDA1A6C91A9FFuL), (+1, -54, 0xFC21B7A4350686ECuL, 0x0880C5BC895A2379uL)),
                ((-1, -60, 0xF8838B98FC52933CuL, 0x6DCAB860BCE94BBDuL), (+1, -63, 0xA43B73E80E1AB625uL, 0xA46A59FCDE73C855uL)),
                ((-1, -71, 0xBCAB7ED501A54645uL, 0x8B0CFF0ADF8E1A63uL), (+1, -75, 0xC8355B040801BDAEuL, 0x04EC4B048E8EB05CuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX32Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 2, 0xD4D9C6F80FC603DDuL, 0x05B82E8AFF5D1F1EuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 0, 0x9870E6E046799D05uL, 0x0841E360E2099810uL), (+1, -3, 0xB06797487AF124B8uL, 0xC36EB3CA31CB263BuL)),
                ((-1, -4, 0xBD9942FD813093E8uL, 0x8A73B1B376151B88uL), (+1, -7, 0xD2A41CD71108E9D3uL, 0x3E216EE226CA38DCuL)),
                ((-1, -8, 0x863D6E0EDE45D69CuL, 0x65C916E9F453802AuL), (+1, -11, 0x8ED0D458E023078DuL, 0x04919917C8DBAFCCuL)),
                ((-1, -14, 0xEE92E14A0F51E1DDuL, 0x03537AE6A0035A97uL), (+1, -17, 0xF252AC08F9AE6719uL, 0x8F59EA37A1C91B07uL)),
                ((-1, -19, 0x8A617F9B4850421DuL, 0x77BED08D594BECFEuL), (+1, -22, 0x85B659AA163302C2uL, 0xB5A0C06284E0E752uL)),
                ((-1, -26, 0xD3773047D7D494CBuL, 0x18889CC68B0636FDuL), (+1, -29, 0xC18A862861BB9256uL, 0xC65841FA0456C40AuL)),
                ((-1, -33, 0xD20570E70E307563uL, 0x763A2C9A30DBC479uL), (+1, -36, 0xB5144716985A3FC4uL, 0xFEF5E116D51541ADuL)),
                ((-1, -40, 0x82CEDBDF6C726881uL, 0xD5F6D0C85C0FA1EAuL), (+1, -44, 0xD2F88DC52FFB69BFuL, 0x8422EC4631FBD7B1uL)),
                ((-1, -49, 0xBF7CBAB936D2A959uL, 0xF56CC7991790ABF6uL), (+1, -52, 0x8EF833F9C41C1D15uL, 0x3B10B60AF1E295A3uL)),
                ((-1, -58, 0x93051E444FEEADAAuL, 0x38AE21673095462CuL), (+1, -62, 0xC80DD76DD6252C04uL, 0x747E4157E47EF446uL)),
                ((-1, -69, 0xBEF8073CB23553C1uL, 0x434504A157103191uL), (+1, -73, 0xE5DFDA548FFACC2AuL, 0x333F69BA00BDE7E0uL)),
                ((-1, -82, 0xF946D64D044595E8uL, 0x00E4320504973AD9uL), (+1, -86, 0xF504DB999235133AuL, 0x55D7A224F01EEC59uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX0Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 1, 0x9255A0C230A65780uL, 0x958E860D4D75280CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 3, 0xCA1B368ACEA15595uL, 0xF1962FDAC17C1D0CuL), (+1, 2, 0xBF80E7EAEA43191FuL, 0xCD2DED77070A87D0uL)),
                ((-1, 4, 0xE50DC9C0C19436E4uL, 0x47C13597A6052292uL), (+1, 3, 0xE9E0CDEAA85DA6F4uL, 0x769F68836FCCB295uL)),
                ((-1, 5, 0x8AFA3397A9EC077AuL, 0x6DF083FB9E6CDDE1uL), (+1, 4, 0x9438F872BC0C1EB4uL, 0x7DD32F02694039CDuL)),
                ((-1, 4, 0xCA574AB4C59FDA5EuL, 0x24DE1EE83510E427uL), (+1, 3, 0xCB16C1F3BB56AC9DuL, 0x9B671D2E6DF49B90uL)),
                ((-1, 3, 0xC4AF3F02D59D71CCuL, 0x32F31C770B123F42uL), (+1, 2, 0x8BB648DC1B6020FAuL, 0x76A50E0CB2D97ED7uL)),
                ((-1, 2, 0x8BAAE206D07F2AEFuL, 0xCBC6F2AFD6D84AB1uL), (+1, -1, 0xA7D20D9F1885A8ADuL, 0xBBAC7E3E8B531136uL)),
                ((-1, -1, 0xF731E4C03BA9BDAFuL, 0x7399C0C8F9066133uL), (+1, -3, 0xB2E8F67120B07430uL, 0xC47D73969DC706B8uL)),
                ((-1, -4, 0xB74631B29A5DC88DuL, 0x5A084C22171B577FuL), (+1, -4, 0xCD75854AAD9F019DuL, 0x280940D9EDAD7D33uL)),
                ((-1, -5, 0xE251C6BE9D2623F4uL, 0x7673E47E52AFBE77uL), (+1, -7, 0xCDEFE7DCA2AFC857uL, 0xB54251F1148BFD43uL)),
                ((-1, -6, 0xBE5C5DB8ECA21097uL, 0x2C598E3148AA5C5AuL), (-1, -14, 0xB68BFFB510B06ED1uL, 0x101F5B3CF3C78FCBuL)),
                ((+1, -10, 0xAE43C7D0BE6EC823uL, 0x893D9C8F4E2B67FFuL), (+1, -11, 0xBDBC7E6873591793uL, 0xFE0C0B43D3E8939CuL)),
                ((+1, -15, 0x9859C32549E29B90uL, 0x5C02F74C0EE8A7D2uL), (+1, -15, 0xCD82A26AED6CFFFDuL, 0x927B7C0DF87C228DuL)),
                ((-1, -13, 0xC107E2A95B03443CuL, 0x29AECD1E5278EF2FuL), (-1, -20, 0xD4B3B8C5BB8DFA4FuL, 0x33A490F94647FCD7uL)),
                ((+1, -16, 0x9C01A95549D1983BuL, 0xD26F65D971BC014BuL), (+1, -20, 0x90CC3B1E4E27B809uL, 0x6A07EC9FB2447805uL)),
                ((-1, -21, 0xFC8046625CD9D3C6uL, 0xEC1F961B05054BE2uL), (-1, -25, 0x98565B337A66D09BuL, 0x16F9D2F29F4064C9uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX1Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 1, 0x85A09847548614E6uL, 0x936983087F7F70D6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 1, 0x8743DD34AF5DAAA7uL, 0x69CC0ED3A1BBC926uL), (+1, -1, 0xDEB6287BA747C72DuL, 0x950CB77556F6DB33uL)),
                ((-1, -2, 0xA9FFBFDB4D3E3DF1uL, 0x826B86E1CE6DFB9FuL), (-1, -4, 0xCFC8ED0DB912A854uL, 0xA3A9E665AC7870AFuL)),
                ((+1, -2, 0xD73805FA1BE67636uL, 0x3D28B8D2746AEFADuL), (-1, -3, 0xF74C9BDDCB61E3DBuL, 0xAA8A99188FCBA893uL)),
                ((+1, -2, 0xAAB39004DEDCB733uL, 0xA38BC1BD8390E43BuL), (-1, -4, 0x99884F07AB944BADuL, 0x3979A1095A6ED45AuL)),
                ((+1, -3, 0x864BBE69D2140802uL, 0x3EE39519BF812220uL), (-1, -5, 0x8BFFFA7C780CA526uL, 0x19CE1C8E61891330uL)),
                ((+1, -5, 0xA8FB83DE6548C2BFuL, 0x5A9E5362FA103CD4uL), (-1, -7, 0xF8C403B65EC369B5uL, 0x9A7F71C3B7B00855uL)),
                ((+1, -6, 0x8083BB63B7EB63F6uL, 0x0E37B6B4A5B3EBA4uL), (-1, -9, 0xD96D74CCF449E19FuL, 0xFBD711799DAB627FuL)),
                ((+1, -9, 0xF80CA1AB141AD29BuL, 0x8906555646C6C3FCuL), (-1, -11, 0xD933B449021652E2uL, 0x775C1C6F8574F42AuL)),
                ((+1, -11, 0x9C537835234858A7uL, 0x9167B3EC2D17549AuL), (-1, -13, 0xCCF2082A080FAE43uL, 0x7F909A410374573DuL)),
                ((+1, -13, 0xA8EEE8953B8F49C2uL, 0xA255D50FBEB8CE77uL), (-1, -16, 0xE6D487E0F65C9DCBuL, 0xD74626717FA2D2ECuL)),
                ((+1, -16, 0xAA2D385AA2902B49uL, 0xC3186160CFF681DCuL), (-1, -18, 0x917C6741C4073D54uL, 0x90E152C4A63B547EuL)),
                ((+1, -20, 0xED35803850720312uL, 0xC661D9B072BE384CuL), (-1, -22, 0xE13FA9E990CB552AuL, 0xAAAF2BE479073274uL)),
                ((+1, -22, 0x862FB660215E2DD4uL, 0x6C682AEBBA55AA0AuL), (-1, -25, 0x89EE3AD303F23387uL, 0x6A1D6137DDEF6DF7uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 1, 0xA42DE57DADC0541AuL, 0x81B89D25F4446668uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 1, 0xCE6992E0B21A3E8BuL, 0xE1CB8A9C14F71776uL), (+1, 0, 0x844591D34D0E0FA9uL, 0x6572E91663C55C2EuL)),
                ((-1, 1, 0x8BFA9E3F8D0F3140uL, 0x8DABD40DFEE5EB60uL), (+1, -1, 0x9BFC961781DD2485uL, 0x2F3A28CD1CB5D7E5uL)),
                ((-1, 0, 0x914634127555FDCAuL, 0x9C0B67FACC89EEDCuL), (+1, -2, 0xA0BE2498D4F3D1F2uL, 0xC56545B266BCEF60uL)),
                ((-1, -2, 0xF705BCE9225CBAFAuL, 0xDAAD7D48F8853BDBuL), (+1, -3, 0x819415A9FE82B4C5uL, 0x46C567BB284F0B90uL)),
                ((-1, -3, 0xADC7604F1BE9FC0FuL, 0x2F2BB1E868A69960uL), (+1, -5, 0xAAE60D101E0ACE68uL, 0x615F2F3F103FE645uL)),
                ((-1, -5, 0xCE281B27D54080C1uL, 0x3A97578B2B9A80EEuL), (+1, -7, 0xCB15E3D84B09CD40uL, 0xCFB4AF413BB1952AuL)),
                ((-1, -7, 0xD69F3567981DF979uL, 0xBA7B91BDA5983B4AuL), (+1, -9, 0xC7E3DBEC358DFE60uL, 0xDB44E63C68E2BD24uL)),
                ((-1, -9, 0xC062A8053843B83AuL, 0xF0344FFF36A55577uL), (+1, -11, 0xAB2EF35957E21206uL, 0x53637F5209C0CA58uL)),
                ((-1, -11, 0x91C99250658134C0uL, 0x12FC65B3EEF9C442uL), (+1, -13, 0x836618A50069CBD5uL, 0x77AA30B8E5DB8E69uL)),
                ((-1, -14, 0xC96E67FBF449F2B0uL, 0x01C89257DB47AF8AuL), (+1, -16, 0xA4711B79C6294A20uL, 0x830C0A39B6AB1A0CuL)),
                ((-1, -17, 0xE4250A5281092239uL, 0x0DD60D2773F33734uL), (+1, -19, 0xBA2A4D95B0D9AE75uL, 0x35B4074BE36FE124uL)),
                ((-1, -20, 0xD653240BE745C3F7uL, 0x588B3F1102C3A2F6uL), (+1, -22, 0xAF2C63695FE33B44uL, 0x53F78385CA12608CuL)),
                ((-1, -23, 0xC341643360E26E90uL, 0x0A276C0C251C45D0uL), (+1, -25, 0x82670AB36D67A05AuL, 0x45062832E6E47EE7uL)),
                ((-1, -27, 0xC6255B7CDD8C5F4DuL, 0xAD2F04F1F93FCE7AuL), (+1, -29, 0x9F2F151EF0C500BBuL, 0xFE1F8BE14E2F0A4EuL)),
                ((-1, -31, 0xD141A7E9A908634FuL, 0xE933C9D8A2B22D05uL), (+1, -34, 0xC2A39D32CAA19C3AuL, 0x9835402BDDEB0D19uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX4Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 1, 0xE5FDFFA96B7E9A10uL, 0x74FBBB417CD38E60uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 2, 0x8A0332E3002576CAuL, 0x8B9941101E695ECAuL), (+1, 0, 0x8B4C42C11730AB8BuL, 0x89B04E13F5CB3904uL)),
                ((-1, 1, 0xC25AE5E1E81E2DD9uL, 0xCC950AB13C0E3B34uL), (+1, -1, 0xBD40B30931428A0FuL, 0xB0810D3047DB6B44uL)),
                ((-1, 0, 0xBF11DFC0FD0B0673uL, 0x346C5C19314AAD74uL), (+1, -2, 0xB251C2A27D61B8A8uL, 0xD96700FAC672051EuL)),
                ((-1, -1, 0x90B8DF4306F206AAuL, 0x4C75DD0EDDEAC998uL), (+1, -3, 0x82F45D8DCB4C1944uL, 0x9816BDE4C7E5D5BDuL)),
                ((-1, -3, 0xB0D7A37AAE67CE46uL, 0xA714E0EE2208A7A3uL), (+1, -5, 0x9B20E7EADB111393uL, 0x1DA7B11F6B49419CuL)),
                ((-1, -5, 0xB3D16CE264FA6537uL, 0xF251F857300DD8B5uL), (+1, -7, 0x996611FC2E2A2F9BuL, 0xE9E7DA8EFDE38036uL)),
                ((-1, -7, 0x9B421FB7CBA136B5uL, 0xA1D27B769301F316uL), (+1, -9, 0x811F190B5020C15AuL, 0xA9E0B981C619111CuL)),
                ((-1, -10, 0xE70674325CAC2AEDuL, 0x6364234C23DD92BFuL), (+1, -12, 0xBB1A2FF6CC6747B9uL, 0x5ED46F29E8447A2CuL)),
                ((-1, -12, 0x9541ED029F1B9EE6uL, 0xD3009E34D0E78AA8uL), (+1, -15, 0xEC53F30A2398609DuL, 0x7585D2E6125D1A2CuL)),
                ((-1, -15, 0xA8AC836663472F09uL, 0x5FB38FA96C4A7330uL), (+1, -17, 0x81F66D4C4D24C035uL, 0xE572BCCE988512C2uL)),
                ((-1, -18, 0xA67D7AD1DFCF8DBCuL, 0xD3B1F837FE1B9D5BuL), (+1, -21, 0xFAC3AFC6EE8DDCAAuL, 0xEB0F6B17641660D5uL)),
                ((-1, -21, 0x8F6762B00C969977uL, 0xC01E29898F9AFA63uL), (+1, -24, 0xD20E540645690E2CuL, 0x56BA66219FBF5771uL)),
                ((-1, -25, 0xD609EF78CEB0EBE3uL, 0xBBF0FE72388C8499uL), (+1, -27, 0x97C6AAEE1D358478uL, 0xE0B87F0509B84B48uL)),
                ((-1, -28, 0x8676065E5FC0690BuL, 0x2ABBB8D396442F78uL), (+1, -31, 0xB9DD0B4C46BC3586uL, 0xD99940A5F2D9267CuL)),
                ((-1, -32, 0x8EE40D28FDE91B69uL, 0x888295AF263A8CE0uL), (+1, -35, 0xB9FC8B9DE6F50502uL, 0x9E5F22F25B8CFAF0uL)),
                ((-1, -37, 0xE0D9865223F0656FuL, 0x423C7D2CD1183419uL), (+1, -39, 0x8D53DE93CD9E9704uL, 0xB7F403D0D2CAEFBCuL)),
                ((-1, -42, 0xFF0938736B315BACuL, 0xEC95F5D565833F9AuL), (+1, -44, 0x864A1CA43AE6BC4EuL, 0xBB27C344A46409E3uL)),
                ((-1, -48, 0x8BE4441794414737uL, 0x5C87476282607BE0uL), (+1, -52, 0xCAFB5883D5212938uL, 0xDC7824F08A958EA9uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX8Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 2, 0x94A8EABDB30D4CE5uL, 0x7EA376D1E612CD23uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 2, 0x8744FA3F0AEFA636uL, 0x9F39D2A965BE2D3FuL), (+1, -1, 0xDEE04C37E7AA69CFuL, 0x1165B33E5C9AF71CuL)),
                ((-1, 1, 0x852050908324F460uL, 0x7BA0FC63BAA4424FuL), (+1, -2, 0xD50945AE275B0DB5uL, 0xF5C70D3668B24101uL)),
                ((-1, -1, 0xB60EF356DA643D19uL, 0x16AB8E076C7C3290uL), (+1, -3, 0x8E0C8D59D9C11836uL, 0x286EFF4F18A54F7EuL)),
                ((-1, -3, 0xBF92EAF124D35525uL, 0xE22148AE844CFBD0uL), (+1, -5, 0x923F62B3540FC474uL, 0x9DF81BEB6FA4AF84uL)),
                ((-1, -5, 0xA3713C0CB7FB2965uL, 0xF8BE248814D93D29uL), (+1, -8, 0xF489FBC4634891BDuL, 0x2BCFD350EB5F53E5uL)),
                ((-1, -8, 0xE94F867DB48F14C1uL, 0x3E6BFC19A7BBD150uL), (+1, -10, 0xAB418BD8FD32B62EuL, 0x6C9DA304FAA6647DuL)),
                ((-1, -10, 0x8E0959A90DB3A0BDuL, 0x24728B8A404A7B9AuL), (+1, -13, 0xCCB00480296B2CF6uL, 0x01C176D1E7C67926uL)),
                ((-1, -13, 0x954D1A03900100F6uL, 0x9500F21380BC614AuL), (+1, -16, 0xD3423448BD82C745uL, 0x671EF40903046E52uL)),
                ((-1, -16, 0x8864C112745D94EDuL, 0x835F76F429EB2BA4uL), (+1, -19, 0xBD6C1F563F5EB0C9uL, 0x2DF4029B2ABC22E9uL)),
                ((-1, -20, 0xD90DEEDC036E3840uL, 0xF21256EB24A929F8uL), (+1, -22, 0x93D2CF7A30FBC8B4uL, 0xFEEF154B2C20E129uL)),
                ((-1, -23, 0x961D0F3224EBC9D2uL, 0xD789983DAFD555E4uL), (+1, -26, 0xC83F99F2D5B47E93uL, 0x84A99CBD86462BC1uL)),
                ((-1, -27, 0xB32DDC5CC3D2ABE2uL, 0xF1955CE17FFB8912uL), (+1, -30, 0xE988776D7796E500uL, 0x94F308E65C128A20uL)),
                ((-1, -31, 0xB60E31152FD44082uL, 0xD49F6953B7EAD548uL), (+1, -34, 0xE70C14EC24A237A6uL, 0x285375C1B102F0A7uL)),
                ((-1, -35, 0x99C4E47C7086F0C5uL, 0x096A7C9675E20FD9uL), (+1, -38, 0xBCC531843B03C961uL, 0x56CAEC0D70F0F4CBuL)),
                ((-1, -40, 0xCEF54CCF6B247A82uL, 0xD90D262537A30BCBuL), (+1, -43, 0xF38031D1C06A9DF5uL, 0xB16071BBF4102A59uL)),
                ((-1, -45, 0xCDEB7E347CCF62DBuL, 0x1B0EC23481677C4AuL), (+1, -48, 0xE2A9B561C4530EDFuL, 0xC6679C5DAFC62CA8uL)),
                ((-1, -51, 0xF8664336E292056BuL, 0xD3EA697865F1C49CuL), (+1, -54, 0xF298EA7E15A3F6F3uL, 0x6A6157901DCAD1D4uL)),
                ((-1, -58, 0xFCD13D4CEA0A02FDuL, 0xA699B33A00992FF7uL), (+1, -61, 0xCE3B98334D574F82uL, 0xE27379B605C3D845uL)),
                ((-1, -67, 0xEBD4382C277E6199uL, 0xEA4F8E79CA67C14EuL), (+1, -70, 0x917D49DCFE175021uL, 0xDDC0A5B68C48F5D6uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX16Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 2, 0xB4D34223F4F7CA2BuL, 0x9FD49A3989073A6CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 2, 0xAF9EACCCA9ABC5D5uL, 0x117800174A20B41BuL), (+1, -1, 0xF48A2107A666CBF9uL, 0x68CEFF178F12639DuL)),
                ((-1, 1, 0xA7D09914E044D2F2uL, 0xAC234087F64CDF52uL), (+1, -2, 0xE6059D6125AD83E2uL, 0x40A7474FEC7C5AEDuL)),
                ((-1, -1, 0xCE9DDCBC1D9F95DBuL, 0xD126F2EC5E6D722DuL), (+1, -3, 0x8B5FCF3E8AC27600uL, 0x745144B1C8048863uL)),
                ((-1, -3, 0xB5381BA503D9FA86uL, 0xA4D80B251F4CEDEFuL), (+1, -6, 0xF06DD3CA220494B3uL, 0xEDEC78192ABF2D6DuL)),
                ((-1, -6, 0xECF34F70AE714703uL, 0xD14029533B7526F4uL), (+1, -8, 0x9A5126CB3127F81EuL, 0x6C9C482426E996CBuL)),
                ((-1, -9, 0xEB2E6906701F2368uL, 0xC24B73D51FCFE83EuL), (+1, -11, 0x95F61BB9B55DBF0EuL, 0xFEC67E68207454CCuL)),
                ((-1, -12, 0xB16AF58089A3EE05uL, 0x86228E52E084333BuL), (+1, -15, 0xDCA1BA51A4D7E451uL, 0x1DD75752545E5038uL)),
                ((-1, -16, 0xC96E71374AA42590uL, 0x8294EADBEE280017uL), (+1, -19, 0xF2EF24A196324955uL, 0x5614CDD0333E8EBDuL)),
                ((-1, -20, 0xA92333C06D0C4CD4uL, 0x798DF0DBA10E4CB6uL), (+1, -23, 0xC482EAB5AEEBC8E5uL, 0x9D7D4FAA87E810F1uL)),
                ((-1, -25, 0xCD5811E77448B888uL, 0xCE1E94DDCF88DE01uL), (+1, -28, 0xE4198F459B1AA7CCuL, 0xD59CC1047C7D7E30uL)),
                ((-1, -30, 0xAF1F7392B83C4041uL, 0x36AD95BDE39F0775uL), (+1, -33, 0xB874C3519D4FE1AAuL, 0x69CF120130BBA997uL)),
                ((-1, -36, 0xCA17011A5E51341DuL, 0xF50D3383FD6053F3uL), (+1, -39, 0xC8062ACF65170BD5uL, 0x2E328B5F79A250CEuL)),
                ((-1, -42, 0x95D222BA50C89B61uL, 0x3FB1E19C09FEACDDuL), (+1, -45, 0x89EB15761290DB2AuL, 0x66489B61421A69E4uL)),
                ((-1, -49, 0x8446DE703E4087D3uL, 0xE156FE7B207441C9uL), (+1, -53, 0xDF9C7DD363F08DB7uL, 0xB36360EC577C76CAuL)),
                ((-1, -58, 0xF68605760055162CuL, 0x2C40D7F92C25A463uL), (+1, -61, 0xBBD5FF212B549ED0uL, 0x5ADF5B8790D17F53uL)),
                ((-1, -67, 0xC2BA6DB6C69A1732uL, 0x01A49BAFBDD2BDF6uL), (+1, -70, 0x8177D37E4D848128uL, 0xA58E76E0A85B8F42uL)),
                ((-1, -78, 0x9AF2817C37FA496DuL, 0x0A941681AD8174DDuL), (+1, -82, 0xA506D211C6A7BA17uL, 0x1F03C4045BF6B997uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX32Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((-1, 2, 0xD4D855A381130A28uL, 0x11DF17E547EDF38CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((-1, 0, 0xB9331377DBD11F15uL, 0x0581089F01DAF4EBuL), (+1, -3, 0xD7CEA182E6226B9DuL, 0x54F5A82AF23826DBuL)),
                ((-1, -3, 0x8DA5A6DB669ADF4CuL, 0x86E7E59871F2C40BuL), (+1, -6, 0x9F87C4683005C237uL, 0xC432A6DB8C25AEFFuL)),
                ((-1, -8, 0xFA96EBF109CB71A8uL, 0x1CF68D157EED50D1uL), (+1, -10, 0x8808455D91DEFE07uL, 0x34A60B23182E12D6uL)),
                ((-1, -12, 0x8DEA0B6B2AEF5936uL, 0x1B4B4598F3752806uL), (+1, -15, 0x9418F60667B0140AuL, 0x3B8FD74578AFBFCCuL)),
                ((-1, -18, 0xD74C15892F7E05F2uL, 0xD9FFAD9DFDE4CA78uL), (+1, -21, 0xD740667DC94141ECuL, 0x4D60002AB5ADD566uL)),
                ((-1, -24, 0xDE65118BB4E2E56BuL, 0xA08F66B0D491905BuL), (+1, -27, 0xD435AB69F39B8C7DuL, 0x8971D53431953C35uL)),
                ((-1, -30, 0x9BFD767A5ECD4C95uL, 0x20A2A12D8E4E4020uL), (+1, -33, 0x8D6A1C1AA51573EEuL, 0x792FDBCE207072B4uL)),
                ((-1, -37, 0x91A9083B29CFD41CuL, 0x81796C53F9987246uL), (+1, -41, 0xF97FC4AF30503300uL, 0x600D6C3453ED44BDuL)),
                ((-1, -45, 0xAE0E91894AA9A5E2uL, 0x7C5CCD39FD83EB91uL), (+1, -48, 0x8BCA6D8F92314611uL, 0xFE6DC587C30442EDuL)),
                ((-1, -54, 0xF8DA783A5E8DAAAAuL, 0xD916F33244E6AA66uL), (+1, -57, 0xB97C81F0043C1F56uL, 0x9C5BE3E86DF50551uL)),
                ((-1, -63, 0xBDCBD981B0203211uL, 0x8F8833C6D811A02FuL), (+1, -66, 0x812F6F781DEF34C5uL, 0xC88FC59622ACD672uL)),
                ((-1, -74, 0xF90EADD41F0D1B5BuL, 0x0B56E40E2500BB89uL), (+1, -77, 0x963A7C63E6D8C307uL, 0xEC047723F22D2493uL)),
                ((-1, -86, 0xA7268A6D893B7062uL, 0x6DB14FFA6F11F960uL), (+1, -90, 0xA4DA0374A8C94297uL, 0xD068B0A367E57505uL)),
        });
    }
}
