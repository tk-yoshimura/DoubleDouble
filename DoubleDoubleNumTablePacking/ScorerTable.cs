using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class ScorerTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode c, Hexcode d)>> tables = new(){
                { nameof(HiPadeX0Table), HiPadeX0Table },
                { nameof(HiPadeX1Table), HiPadeX1Table },
                { nameof(HiPadeX2Table), HiPadeX2Table },
                { nameof(HiPadeX4Table), HiPadeX4Table },
                { nameof(HiPadeX8Table), HiPadeX8Table },
                { nameof(HiPadeX16Table), HiPadeX16Table },
                { nameof(HiPadeX32Table), HiPadeX32Table },
                { nameof(GiPadeX0Table), GiPadeX0Table },
                { nameof(GiPadeX1Table), GiPadeX1Table },
                { nameof(GiPadeX2Table), GiPadeX2Table },
                { nameof(GiPadeX4Table), GiPadeX4Table },
                { nameof(GiPadeX8Table), GiPadeX8Table },
                { nameof(GiPadeX16Table), GiPadeX16Table },
                { nameof(GiPadeX32Table), GiPadeX32Table },
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach ((Hexcode c, Hexcode d) in tables[key]) {
                    stream.Write((UInt64)c.Hi);
                    stream.Write((UInt64)c.Lo);
                    stream.Write((UInt64)d.Hi);
                    stream.Write((UInt64)d.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX0Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xD1E51BCDC29C64E3uL, 0xE648AB114AA5A95CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -3, 0xBB809BFA16AFECE4uL, 0x3129BA3A7FB6C1D7uL), (+1, 0, 0x967C50A7C9F5AC60uL, 0x87194964DD754B7CuL)),
                ((+1, -4, 0x8C08DDC8D6A12ED4uL, 0xC9DA1F4AA7751919uL), (+1, -1, 0xA2B929B9CC845A84uL, 0xE997B5F0E942838AuL)),
                ((+1, -7, 0xE5D7E698A6F4C946uL, 0xA1899871BCFDA3D5uL), (+1, -3, 0xD4D54B12AB1EF6FAuL, 0xF240B102ADBCA209uL)),
                ((+1, -9, 0x929F93EFC2224483uL, 0xFBDAA321032F5A6CuL), (+1, -5, 0xB9F4CA2DD4A1E006uL, 0x1E4D66A6072591BCuL)),
                ((+1, -13, 0xEE25705874CC9921uL, 0x1CBF653E4BEBF054uL), (+1, -8, 0xE1AFC4202BE31F8EuL, 0x72C8DC341C1E91A2uL)),
                ((+1, -16, 0x8D7757ACBE5E3E13uL, 0xC0432F8C4B1EE2A8uL), (+1, -11, 0xBECD6B00EB709678uL, 0xD769DE36C7C18FA6uL)),
                ((+1, -21, 0xBBBCDA321BE91DBBuL, 0x185D9C797EC7D262uL), (+1, -15, 0xD976BF08DF8E205CuL, 0xBC9CD09178D90D07uL)),
                ((+1, -26, 0x88C0C62EA478213BuL, 0x428933E27AF86CEFuL), (+1, -19, 0x98389642B4818605uL, 0xA3684E84C0BBD8A6uL)),
                ((-1, -35, 0x949B14D812ABF0A1uL, 0x476C42BB9B69BECCuL), (+1, -25, 0xC86EB8CDD8BD0C08uL, 0xF4706CCAEE303FADuL)),
                ((+1, -41, 0x99C5BE9C9602B4A0uL, 0xBC71CE6D154CFB50uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX1Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -3, 0xE1F736A196780373uL, 0x32CD11AD94F0B1AFuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -3, 0x872B6BEE1D847DA8uL, 0xBF96E4D3796AA7B8uL), (+1, 0, 0x8F6EB2C222A5B2D1uL, 0x0CBF4908561ED2C8uL)),
                ((+1, -5, 0xBFD3905AEDDA227FuL, 0xBD9AABC33E610FC9uL), (+1, -1, 0x938BE7D1905DA831uL, 0xA84F4195A205DD23uL)),
                ((+1, -7, 0xA6D075F62F7368A9uL, 0xBD8C79978B80E490uL), (+1, -3, 0xB733A7CBA21E2F11uL, 0x939B610352EC5E44uL)),
                ((+1, -10, 0xC93DF54B19DC47DCuL, 0x130D3128FBCDBAD2uL), (+1, -5, 0x9798AD76D548050EuL, 0xA15699152011B0ABuL)),
                ((+1, -13, 0xA45BEE461E965027uL, 0x736334845E60FE13uL), (+1, -8, 0xADC993468B85FD43uL, 0xE13A1C62F66E3F71uL)),
                ((+1, -17, 0xB56E8E9336A2474BuL, 0xC29CD339B6562EBDuL), (+1, -11, 0x8A5CB6455708602CuL, 0x7DCAB284DBFC5650uL)),
                ((+1, -22, 0xF0C7F675424A0503uL, 0xC535FAE29C8FE5E2uL), (+1, -15, 0x93FD05DEA268E7EFuL, 0x6D733650A5F4D3ADuL)),
                ((+1, -27, 0x986C83D61C0BDD03uL, 0x4F56C4590DED144EuL), (+1, -20, 0xC1A246467B143E29uL, 0x338BFA5317B925DAuL)),
                ((-1, -39, 0xB0873BA9B0D3B6A8uL, 0x1A943CCA6867B8ECuL), (+1, -26, 0xED233E79B33E0DDDuL, 0x56FC050094117239uL)),
                ((+1, -45, 0xAB46C197A41FD23CuL, 0x6C6ABAF083560A44uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0x9054EF050B804DAEuL, 0xD52A487BEFEFC752uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xC3BB7ACA7007C9BCuL, 0xEA74C0D452ADD560uL), (+1, 0, 0x9EBA8C34047A7E6DuL, 0x51521E1C2FDC0A1DuL)),
                ((+1, -3, 0xE7092036853F3414uL, 0xD6824E2201D04677uL), (+1, -1, 0xB82060AEC18C4EE6uL, 0x7F488AAA01B9CB40uL)),
                ((+1, -4, 0xA7168BBDEE1AE82EuL, 0x24AF50C340369310uL), (+1, -2, 0x840EB0AE2CD72918uL, 0x9DF84AAEFE42B442uL)),
                ((+1, -6, 0xA5730CCD0332CDA2uL, 0x66C1EA480EB7142CuL), (+1, -4, 0x82573DB06BFECDC0uL, 0xA42FA4C9096F1FE2uL)),
                ((+1, -9, 0xECCB2253FECD777FuL, 0x45456A534A5E380CuL), (+1, -7, 0xBA3A054A3D3B993CuL, 0xD7EBA3AD00A30B35uL)),
                ((+1, -12, 0xFA92738B5AA9C488uL, 0x7F7A7C908C3DA26BuL), (+1, -10, 0xC4EA12B4D78BACABuL, 0xFB3CD3574712330CuL)),
                ((+1, -15, 0xC49E5510AAF5F37BuL, 0x21DD69C57A9CE2AEuL), (+1, -13, 0x9A743E091BF41B2BuL, 0xE2B8B2092AA2E535uL)),
                ((+1, -19, 0xE0DD64524FE02CBCuL, 0x4F29CDB5D448E705uL), (+1, -17, 0xB09E0C03AAB98F73uL, 0x4F5274A0143201CAuL)),
                ((+1, -23, 0xB313D6178734AA7CuL, 0x3F9FDBE4C6D91F33uL), (+1, -21, 0x8CA59288D40E0CF0uL, 0x4F540890C5E9494CuL)),
                ((+1, -28, 0xB36EB58C44B2EE44uL, 0xB4A8DA72315F4BBCuL), (+1, -26, 0x8CED196CBDFDDF03uL, 0x7465B3DFEB58E303uL)),
                ((+1, -34, 0xAC29AE82C8DF0F34uL, 0x711F4DCB35F66BC1uL), (+1, -32, 0x8737585F7D24D1E4uL, 0x35F85C0281CD579CuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX4Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0x9EDA95F1EF6AA0F1uL, 0xDB4A1D957698C8B0uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xC2283B1553FCA262uL, 0x6DEB01A43AE78808uL), (+1, 0, 0x9A59C796EB095411uL, 0x5E69D83DC5A5BDF7uL)),
                ((+1, -3, 0xDD4AF4156A852ED8uL, 0x80B397F4204E0B3AuL), (+1, -1, 0xAEED7B5CB994169BuL, 0x92AF415EFAA736F5uL)),
                ((+1, -4, 0x9C77F8BA7D0BC111uL, 0x3922D174C600800DuL), (+1, -3, 0xF6A7078FCF025D56uL, 0x1E2327896CED516BuL)),
                ((+1, -6, 0x994AA81C0BBCDBDDuL, 0x2088C762297447F6uL), (+1, -5, 0xF1431601C67158D0uL, 0x7293B5AAE3C73761uL)),
                ((+1, -9, 0xDBA95B53107B2B71uL, 0x6DA852334F91F067uL), (+1, -7, 0xACB465AF0C8F0C28uL, 0x4175676F80C508BDuL)),
                ((+1, -12, 0xEC7B00AC6B267F1DuL, 0xD291EECAF177A402uL), (+1, -10, 0xB9D51B4D57B1141FuL, 0xD89968D510E19C92uL)),
                ((+1, -15, 0xC1159881FC7F0A6AuL, 0xE0570714DBAFC0C7uL), (+1, -13, 0x97AFBCE35585E71CuL, 0x6182B82C53E17B37uL)),
                ((+1, -19, 0xEDD315BF44253348uL, 0xAC9E6216FFB080D9uL), (+1, -17, 0xBACE1E15B989BCA1uL, 0x4D138BC5E62B8F5BuL)),
                ((+1, -23, 0xD7FACC3F5780C548uL, 0x2051B57FA92E7AFFuL), (+1, -21, 0xA9A257B71CF1E839uL, 0xDD511BCDF31173FBuL)),
                ((+1, -27, 0x89A396DE30D9BE31uL, 0xB059BCA36BA60E49uL), (+1, -26, 0xD833EF39A14C6CE6uL, 0x68FB94854D8C0FD1uL)),
                ((+1, -33, 0xDDC1C24D1BF50B8CuL, 0x332FC5E2E25FD245uL), (+1, -31, 0xAE2ADD46AA1DEF4CuL, 0x47E5CD1C445DCC46uL)),
                ((+1, -39, 0xAB6B8F6A641DB769uL, 0xACCFF4651AB078E6uL), (+1, -37, 0x86A21150CB13E89BuL, 0xD942C139F435F3A3uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX8Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xA25C5275A9883AA4uL, 0xE021D984F586644BuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xAC209E2DCF2EADC0uL, 0x500813CB818622CAuL), (+1, 0, 0x87863EFEA496C74CuL, 0xEE6DD5887D7C3011uL)),
                ((+1, -3, 0xAA907C6D79FE6E25uL, 0x60EEBBFE4AD6F015uL), (+1, -1, 0x862DFB8045335C62uL, 0x4166ABD41957E9A8uL)),
                ((+1, -5, 0xD1207394677D6BE4uL, 0x7D692DFDFD02F339uL), (+1, -3, 0xA46BFEC50BEBF986uL, 0x19F22C9EADE8D80CuL)),
                ((+1, -7, 0xB0DD237E90444F57uL, 0x3242E368D077F3D1uL), (+1, -5, 0x8B0074125EDCAEAFuL, 0xA094CC2D9BE9A4E2uL)),
                ((+1, -10, 0xD9A10D8B3A7CD431uL, 0xF3C05294D1CCB448uL), (+1, -8, 0xAAFEC5D5436231FFuL, 0x8A426511DEFDB60DuL)),
                ((+1, -13, 0xC7FCC485CC6E44CFuL, 0x4DCF9EC300A4753AuL), (+1, -11, 0x9D1B296CEECCE82EuL, 0xD5A0ADFBD5B852C6uL)),
                ((+1, -16, 0x8A7481DCC2219A5CuL, 0x96C2BA07F48B7A78uL), (+1, -15, 0xD982AA35A044A72FuL, 0xDE8F80AA9000E684uL)),
                ((+1, -20, 0x8F8989AF8838791DuL, 0x71AB17A9E74CF7F5uL), (+1, -19, 0xE17A99078076A1F8uL, 0x3EAA9C491C920ABEuL)),
                ((+1, -25, 0xD9A0AE09FC3B0975uL, 0x51127C372FF0B0D5uL), (+1, -23, 0xAAED3756DE6B7D65uL, 0x6F763E794264DDA4uL)),
                ((+1, -30, 0xE566D41914706365uL, 0x6A46F5ECFD929CF5uL), (+1, -28, 0xB42BF178F84F73C1uL, 0xB5D3DC5EF5905EE8uL)),
                ((+1, -35, 0x9738AD96A9D7C903uL, 0xB869D6538619CB0EuL), (+1, -34, 0xED89BB87011A3E5AuL, 0x21D70794901C360DuL)),
                ((+1, -42, 0xBCF7AFB8AD57BEEDuL, 0x46BFDB1C3EE8B849uL), (+1, -40, 0x946A2CDDE4FE4AF1uL, 0x84DE4188B0178DF2uL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX16Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xA2E53D5E07BD4994uL, 0x888E63181926B16CuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -3, 0xBD4CBD48E7B026E3uL, 0x62041FE8D3E4BA5DuL), (+1, -1, 0x94B988BFD68C3B36uL, 0x78A2A089534D037BuL)),
                ((+1, -5, 0xC8301EDF0AA0C7F5uL, 0x1D8D9574002E7567uL), (+1, -3, 0x9D42E228522B8E19uL, 0x4F1509E4E3DEE141uL)),
                ((+1, -8, 0xFDAE8B46C2AD52E0uL, 0x79D12D9AF9803B2EuL), (+1, -6, 0xC7449DBDF286F7E9uL, 0x8FB17DC1AD2B82DDuL)),
                ((+1, -11, 0xD5481F773F30B3C7uL, 0x909DE93B224004E4uL), (+1, -9, 0xA78627E85FA091C6uL, 0x821D34EC92B181B9uL)),
                ((+1, -15, 0xF8986569AD007CF4uL, 0x3588D380A0A3C6E7uL), (+1, -13, 0xC3410541C3AAC3CFuL, 0x30E03F230CCC1BAFuL)),
                ((+1, -19, 0xCB628C81CD9A8254uL, 0xCFAC5A307B2E01BAuL), (+1, -17, 0x9FBDA2C1ABA5EFAFuL, 0xF065C39E21118BFEuL)),
                ((+1, -24, 0xE69F4471D57E8E23uL, 0x64956F38B861064BuL), (+1, -22, 0xB521872EE58C9A3EuL, 0x94E8D8398FD28DE7uL)),
                ((+1, -29, 0xAD66BDA9282D288FuL, 0x000D19B835FBB709uL), (+1, -27, 0x883068063C9C1B4AuL, 0x1E501886C4A6507EuL)),
                ((+1, -35, 0x9C18016EA2976D03uL, 0x3C6140BC51D2DFC6uL), (+1, -34, 0xF53107AE7FD8FD1EuL, 0xAC0CCABD3FA35D3FuL)),
                ((+1, -43, 0xFF6B98B3E807E0E8uL, 0x87CF0250321A8EA4uL), (+1, -41, 0xC89B4C56972E0721uL, 0x8D853E066E36B62AuL)),
                ((+1, -104, 0xA57E31FE6572C3FFuL, 0x61C23569A8423B68uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> HiPadeX32Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xA2F6F7EDF012DD0AuL, 0x9B62E42AB83DB14FuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -4, 0xB985ADE84CF1629BuL, 0xE999F9730EA0894AuL), (+1, -2, 0x91B6F98EBE4DD707uL, 0xC727E2082F23E08CuL)),
                ((+1, -7, 0xBC14953B39EB72DEuL, 0x3145595615ED8718uL), (+1, -5, 0x93B8C8B6E1C5CF9CuL, 0xBF1DA399B52ABA7BuL)),
                ((+1, -11, 0xDED7907786DE7A07uL, 0x1139C58E5AB26592uL), (+1, -9, 0xAF05B845A295967DuL, 0xB4B04FC446266635uL)),
                ((+1, -15, 0xAA03736A7ABAE37AuL, 0x1F2D8A69425FD91DuL), (+1, -13, 0x85877F0BE9325187uL, 0x9FF3AEB815AA6493uL)),
                ((+1, -20, 0xAD36D1FF90D5C4A0uL, 0xD99AC2BC07F2BF68uL), (+1, -18, 0x880AE052D9891714uL, 0x7DF193410D9AF696uL)),
                ((+1, -26, 0xEBA43B489AC8275CuL, 0xCDD61B982DA9DAAFuL), (+1, -24, 0xB91293D929ED7FE5uL, 0x95ACF5D33D488CA0uL)),
                ((+1, -32, 0xCE5B21BF671A4CADuL, 0xAC32B3CF72C15DCBuL), (+1, -30, 0xA21255128D813A95uL, 0x7B3E4671C7A36C52uL)),
                ((+1, -39, 0xD3164A1C43FACAC4uL, 0xDF94A543DEB10CAEuL), (+1, -37, 0xA5C992C533CB1D6BuL, 0x30C27DF35861A400uL)),
                ((+1, -47, 0xC025B2D109E54249uL, 0xB3346253A307B705uL), (+1, -45, 0x96E97FB566393D52uL, 0x01F86653283C932FuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX0Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -3, 0xD1E51BCDC29C64E3uL, 0xE648AB114A418585uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0x871FF5F7A4C94B31uL, 0xAC726065E7DA6ED6uL), (+1, -1, 0x8EFC3AC3CA28AB96uL, 0x77805E800C88DF16uL)),
                ((-1, -6, 0xFD98B312165A5ABDuL, 0x04F6AA998A03F07EuL), (+1, -3, 0xDF7DC83FD43CBEB6uL, 0x9E6C60206DED7A45uL)),
                ((-1, -7, 0xA8563284E759B06DuL, 0x3845A4A26E1AFC3FuL), (+1, -5, 0xECA9B3493667A6E0uL, 0x32732E984FB67E0CuL)),
                ((+1, -7, 0x82D2F050A9AA57DBuL, 0xB29FB3B6C98B2F31uL), (+1, -7, 0xCC1C20ACB6ACB279uL, 0x7B6E8317D84968DDuL)),
                ((-1, -12, 0xEC82630FBDE5EE69uL, 0xD829F4CDA553B83DuL), (+1, -9, 0x895E1BCB1B69EEA6uL, 0x3C3406B5F2748943uL)),
                ((-1, -13, 0xE9800F78A756A4A8uL, 0xEFA0C7E4551016A8uL), (+1, -12, 0x9C4A3D231F49BCE6uL, 0xE90A8E9E00A08223uL)),
                ((+1, -15, 0xF5CC165834448FA3uL, 0xFFAD4B7EADACE159uL), (+1, -15, 0x8C4520DFA6F5904FuL, 0xA4532F1AD2EA7B24uL)),
                ((-1, -19, 0xBD536113F2E3441DuL, 0x965163C11F7721ABuL), (+1, -19, 0xD35CC2F1905D6C9EuL, 0xED8369F55D0C927EuL)),
                ((-1, -21, 0xBE2CD6A56BF2376AuL, 0x519619CD2F602CA2uL), (+1, -23, 0xE30217181D74C5ABuL, 0xC2D15C23EAF4F557uL)),
                ((+1, -23, 0x94597A5D58824C28uL, 0xFF45724230E54F58uL), (+1, -27, 0xBEC136E3C57BB3B3uL, 0x5E4E5B580420E7BCuL)),
                ((-1, -27, 0xADF917F52FA1C210uL, 0x68369F97E72357F3uL), (+1, -33, 0xAF43DA6EC35C14E5uL, 0x76C88F59B556A595uL)),
                ((+1, -32, 0xA0354303D1CEC25FuL, 0x04CFDCA8FC0C8D81uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX1Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -3, 0xF0DD1A499B9F6F34uL, 0x0DCD355CBB734857uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -4, 0xBFAEA3FDFEAC4C02uL, 0xAD783264CCF225FAuL), (+1, -1, 0x9A94C845724A3F74uL, 0xDA049F151110E068uL)),
                ((-1, -7, 0xE3E255153D7A55B4uL, 0xC0DC58F3E51E77BFuL), (+1, -3, 0xF7A4C1F763AA82CBuL, 0xB7784B222A4ADD6EuL)),
                ((+1, -7, 0xA229682FF1404DA1uL, 0xEDCB282D3C29B354uL), (+1, -4, 0x878CCBB7BD7C59FCuL, 0x0C048AEE07B74212uL)),
                ((+1, -10, 0xBD168559911FD2ADuL, 0x570DA4B0C8DB1845uL), (+1, -7, 0xECA125FFD97A7BAAuL, 0xDB2D8DDF63D5A132uL)),
                ((-1, -12, 0xCC64F5DA650B6B39uL, 0x9AF17D9DF51AB9C9uL), (+1, -9, 0xA18370E64DCF4A72uL, 0xD6C95E8B877C016FuL)),
                ((+1, -14, 0xADAF505286737622uL, 0x0E0F0F206B6DD3E8uL), (+1, -12, 0xB6DFC155C0D6C3ECuL, 0xD3F322BFB36B61C0uL)),
                ((+1, -19, 0x8016E0FE237AB882uL, 0x4B0742533B3E6CD8uL), (+1, -15, 0xA2D8EE391C7A613BuL, 0x4F96ED4771F598F5uL)),
                ((-1, -20, 0xD957144F2C28C77CuL, 0xA878AB6CA923300BuL), (+1, -19, 0xEC7D2C0372841E67uL, 0xC3C115D7C7ABB390uL)),
                ((+1, -22, 0x8717AE9C24819EBAuL, 0x27B8AA3A8EF05929uL), (+1, -23, 0xEE5D335E2E585519uL, 0xE809B40CDC0ADE0BuL)),
                ((-1, -26, 0x90537AD5C076C965uL, 0x8E6D486EBD215CC7uL), (+1, -27, 0xAD42F75FCED23706uL, 0xDC555AB8A7C253CDuL)),
                ((+1, -31, 0x80D84E32AA96583BuL, 0x33277FC7BDC51F01uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX2Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xAD0229DC1B336CDEuL, 0xDCB422B319165476uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0x9AC79FDBF14022E2uL, 0x2F8F698C86167140uL), (+1, -1, 0xCAEE4088EB4E18AFuL, 0xE929C8F691E8AD22uL)),
                ((+1, -4, 0xD1AF121C3DD9B657uL, 0xC8CCEC7F3B0F8039uL), (+1, -2, 0xB9F8809CB0AEAEAAuL, 0x2AE14A3F8C1F5EB5uL)),
                ((+1, -5, 0x925437381C97D0E1uL, 0xEAC01A8367881692uL), (+1, -4, 0xF0ACD045146BB669uL, 0xEA771BBDF4C110FCuL)),
                ((+1, -7, 0xBAC116A8CC848615uL, 0x9B30C67B60070C49uL), (+1, -6, 0xF24513B7ECC81E83uL, 0x591F8A2F1A0E423AuL)),
                ((+1, -10, 0xD201D82813B67535uL, 0x24A883E28A8EC681uL), (+1, -8, 0xC61DEE1644AE4C1EuL, 0xE2FCB39D60C150A4uL)),
                ((+1, -12, 0x9F60BD78E1AE7698uL, 0x6961286FAE8419CDuL), (+1, -10, 0x86F90B4B21DFA530uL, 0xE35BC4F2AD0BC917uL)),
                ((+1, -14, 0x8701EACC675A6C83uL, 0xD6519A6CEC627D73uL), (+1, -13, 0x9B47364EE31C9167uL, 0x551BB913AB1DC271uL)),
                ((+1, -19, 0xDEC995E8FE4BA9EDuL, 0x98324B7122B4DF4AuL), (+1, -16, 0x9724F51FC286A1E8uL, 0xF57B2A8D59BBF8B6uL)),
                ((+1, -21, 0xA34265AFCB2EE55AuL, 0x15B3DFC6C3EFF1DEuL), (+1, -20, 0xF85D5D7FBD2F79B8uL, 0xAF5D5E162F8C33C1uL)),
                ((+1, -24, 0xC2886CA973DA7387uL, 0x2D92975CD7AAA067uL), (+1, -23, 0xA89942242BE32D44uL, 0xBF0FC13D6F035DBDuL)),
                ((-1, -29, 0xCFC2962C264A1FFEuL, 0xB768EBA304577BA8uL), (+1, -27, 0xB8B53A6C4A375CA6uL, 0xC74F69459C326088uL)),
                ((+1, -31, 0xBA39B251B3C50143uL, 0xC7B1C33E4BCC0EB7uL), (+1, -31, 0x93FD280485E24973uL, 0x213EAB8ACBCE9394uL)),
                ((-1, -36, 0x8AF7516351A72E2CuL, 0x7C7555A854CB4ED0uL), (+1, -36, 0x9C7F2356439B6D73uL, 0x5118DC8FB3A442CAuL)),
                ((+1, -42, 0xDF18982C264D7809uL, 0xB3DFF865E8855DE0uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX4Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xA9A507FF7981BC85uL, 0x5A4AC89D50F548A1uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0x88974A71E909EB3AuL, 0xF06D40B941E4AA80uL), (+1, -1, 0xD577799ABA36D18DuL, 0x61F686FD54578317uL)),
                ((+1, -3, 0x84F7E2B0BC928880uL, 0x3107D740E60A4964uL), (+1, -2, 0xD05118340FFDEEDFuL, 0x9089A1322E13BF96uL)),
                ((+1, -5, 0xBA015EA41A8EE199uL, 0x5088553A4F1E9A5FuL), (+1, -3, 0x901B4EB009D9EEACuL, 0xDB37C42C7C97B363uL)),
                ((+1, -7, 0xC64B8AD358A23905uL, 0x58927EAE0CCBF2D2uL), (+1, -5, 0x9CC5A1CFB9B41449uL, 0x1600A8ACE09BB62CuL)),
                ((+1, -9, 0xB3A6DA2CFCF00E93uL, 0x1CCDAC4FE257BDB3uL), (+1, -7, 0x8BEB830C2AEB53C9uL, 0xA01ED51854A75E50uL)),
                ((+1, -11, 0x86F41389ECFCEB90uL, 0x07C5E8D6CC9ABDCEuL), (+1, -10, 0xD38C4DCC293396D9uL, 0x15D1460A89B9693CuL)),
                ((+1, -14, 0xAE2F08E14B9CD677uL, 0x0F7856758B00455DuL), (+1, -12, 0x898043276BC48653uL, 0x977FC6236FCD8F08uL)),
                ((+1, -17, 0xC872FBA06BBFEB86uL, 0x572401324A5C5985uL), (+1, -15, 0x9BAA4015762DFCD0uL, 0x8A611AE7387C55B1uL)),
                ((+1, -20, 0xC200DB8EB40B69DBuL, 0x9B962EF0C0B14CEDuL), (+1, -18, 0x99F45FAA4C77064EuL, 0x4B439293F39E5604uL)),
                ((+1, -23, 0xAB8D9CD273057E63uL, 0x453402A1961633E2uL), (+1, -21, 0x85736C613B49497DuL, 0xF589E4D1A6952A7FuL)),
                ((+1, -27, 0xFEE64EE856B648BCuL, 0x3B58707C00E4B82BuL), (+1, -25, 0xC94CD067D21066E6uL, 0x6900CEE5973EA054uL)),
                ((+1, -30, 0xA7C5DE5BD9ED9C7DuL, 0xF48B8748D6CBDA2BuL), (+1, -28, 0x8361420B49B88218uL, 0x6D88031B8CDB9FBBuL)),
                ((+1, -34, 0xB7D26B1C96608AD8uL, 0xA8F693146443181CuL), (+1, -32, 0x90723935909A32F1uL, 0xF75A83306F83F9A6uL)),
                ((+1, -38, 0xA6E69C2995E7ECAAuL, 0x0F49C1A0B90B1A71uL), (+1, -36, 0x831FB67E57A40711uL, 0xC115CDDC09F4B132uL)),
                ((+1, -43, 0xE0FD47F9327271E8uL, 0x9B3D6BE8CF6A208AuL), (+1, -41, 0xB09FF6EFEDE3B95CuL, 0x40035CC63CD700C0uL)),
                ((+1, -48, 0xD32D0E463BF300F2uL, 0x62E4BD08351679E5uL), (+1, -46, 0xA5E5FC3EF8B7E3CFuL, 0x03924EC6B546F84FuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX8Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xA3A3CCCC36F12C82uL, 0x5FE0284C5C2AF35EuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xACA8C9BE66CE4637uL, 0xDF58A76D6BE23CE8uL), (+1, 0, 0x87429304B2EF35BBuL, 0xC74014ABAC081549uL)),
                ((+1, -3, 0xC35E8C84693C8F5FuL, 0x93E2468599FCD035uL), (+1, -1, 0x99241411825A1396uL, 0xC55C8A30A8AF5DEEuL)),
                ((+1, -4, 0x9972802839C2631CuL, 0xCFB9DE4A92F0F657uL), (+1, -3, 0xF0AB9F61F4A6102DuL, 0x402FEE418024C936uL)),
                ((+1, -6, 0xB9ADA204A97E892EuL, 0x9628723B3CDAAF2EuL), (+1, -4, 0x91A702111E1FC593uL, 0xD05D93EF304ED4A2uL)),
                ((+1, -8, 0xB6B3C16FBC5A7998uL, 0x8A59AEE10941F28DuL), (+1, -6, 0x8F5A218EFD274B92uL, 0x563DF430B2B2723BuL)),
                ((+1, -10, 0x970E000E5B00D317uL, 0x7808C866F96A74D5uL), (+1, -9, 0xED1508641E72DE31uL, 0x2760E882C8F3830AuL)),
                ((+1, -13, 0xD64B3C03E4089A52uL, 0x96522825CEFDAD82uL), (+1, -11, 0xA8316B94C1E5C955uL, 0x4E1687A9707BC0BEuL)),
                ((+1, -15, 0x8434C9AB233301E6uL, 0x9167D588F26D841CuL), (+1, -14, 0xCF8DF88CC5EF1BC8uL, 0x85BBD29AF479FF98uL)),
                ((+1, -18, 0x8F19E9C122880FC9uL, 0x631D349D0AE676FBuL), (+1, -17, 0xE0AE3AAD1BDA10A2uL, 0xE0250A3547A9F69FuL)),
                ((+1, -21, 0x88829554DCEB8804uL, 0x8047F400E6176268uL), (+1, -20, 0xD65A2A4A26B08CA7uL, 0x0CB2C45C5BF1A22DuL)),
                ((+1, -25, 0xE5C866B14AE88824uL, 0x3ED0697A8567046CuL), (+1, -23, 0xB46AEA056839B8E1uL, 0xD2205E202B66B697uL)),
                ((+1, -28, 0xAA2E3E024ECC233BuL, 0x08CBD020068D6F76uL), (+1, -26, 0x85A17DD9B190C249uL, 0x1AC497C9AB3DDDE5uL)),
                ((+1, -32, 0xDC4688D29705D10DuL, 0xA6D6103E5E8C346AuL), (+1, -30, 0xACF96EE94D9D70F3uL, 0xC6B0728CF9925E74uL)),
                ((+1, -36, 0xF5E867C06D45EDA6uL, 0x8E0900845EC389DBuL), (+1, -34, 0xC11DEAB91E3BE04CuL, 0x35B438421DCDB289uL)),
                ((+1, -40, 0xE767453FCEB923E8uL, 0x496E8A62F156FC43uL), (+1, -38, 0xB5BB0ED178A02D47uL, 0xB30B7875F61227CDuL)),
                ((+1, -44, 0xB04327CB9656A4D6uL, 0xA1B86C811B3C5EE7uL), (+1, -42, 0x8A6FA2E503EE6987uL, 0x4ECCBD4C56BBC771uL)),
                ((+1, -49, 0xC7DFEDC88829F97DuL, 0x598D38BFEEE00EAFuL), (+1, -47, 0x9CFB3382EE17A4A9uL, 0x43A8B93C8D6013FDuL)),
                ((+1, -54, 0x8983FD770D31ED96uL, 0x34D18E5B43E90C35uL), (+1, -53, 0xD8024BADA53A5BE3uL, 0xC7B5D10F38563FBBuL)),
                ((-1, -86, 0x98E3FA713449CC65uL, 0x831D769934A368D5uL), Hexcode.Zero),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX16Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xA30DFC715B043ED0uL, 0xF1B18A5095D6DB66uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -2, 0xBC4289C4881CC67EuL, 0xF7C30AC20D58FDB8uL), (+1, 0, 0x93CC5D8B6A2A4183uL, 0x858FFDC56207CC4EuL)),
                ((+1, -3, 0xDB9BFB56CD7D88C0uL, 0xAD0B5565EF17CA3DuL), (+1, -1, 0xAC6BA525428972B2uL, 0x284D1663FBEE7FCAuL)),
                ((+1, -4, 0xA9A5FED483733413uL, 0x30ED711CA5593B9BuL), (+1, -2, 0x8533AABF1F218552uL, 0xD66A772759C82C3BuL)),
                ((+1, -6, 0xC0B025FCD7456B4AuL, 0x6E477E2D0D756BD0uL), (+1, -4, 0x974C69882E130D8BuL, 0x6B3DD3BC303A78A6uL)),
                ((+1, -8, 0xA9560F8AA9582A6AuL, 0x5543FC2C6FBBA9F1uL), (+1, -6, 0x84F7CC424817F10DuL, 0x6C4711DD34E6FDCDuL)),
                ((+1, -11, 0xEC67324B3D4F7997uL, 0xBB2C312C0690FFEBuL), (+1, -9, 0xB9A35006020A1D63uL, 0x03AB9026ED5C1DADuL)),
                ((+1, -13, 0x84838E960CA473EEuL, 0x87B231E73CC1DB0BuL), (+1, -12, 0xD01F8924AAB6D195uL, 0xCD774B62556EB9E9uL)),
                ((+1, -17, 0xEE97A5C5593915D1uL, 0xFC423B61083B4711uL), (+1, -15, 0xBB5EC38584900FBCuL, 0x3C736B4950022198uL)),
                ((+1, -20, 0xAB04B41073ABF294uL, 0xB82A48F1B172E466uL), (+1, -18, 0x864EBE4FF291CBABuL, 0xC9D62D4CD69A7947uL)),
                ((+1, -24, 0xBFFBADF9996836DBuL, 0x0943E98B414493D1uL), (+1, -22, 0x96C6BF87657E729DuL, 0x36C60679186AA809uL)),
                ((+1, -28, 0xA45BE0E9C4A98A27uL, 0xFF4F3484D97D20C5uL), (+1, -26, 0x81159665D007969BuL, 0x97293054CD06C8DAuL)),
                ((+1, -33, 0xCE1321A9101CFB4CuL, 0x42A8F67F672680EAuL), (+1, -31, 0xA1D982247407CC88uL, 0xB17B82D348947DE1uL)),
                ((+1, -38, 0xB1555B467F648865uL, 0x04C8215FC6718F46uL), (+1, -36, 0x8B47001DB209C953uL, 0x84758192CAF63FD3uL)),
                ((+1, -44, 0xBA3E42E949199AB9uL, 0x99BE41A00459D6DAuL), (+1, -42, 0x92466B3E0EBF9DD9uL, 0xAB27470DBB2E59DCuL)),
                ((+1, -51, 0xB3475A8AFEDEF47AuL, 0xD10A24777C85F3EAuL), (+1, -49, 0x8CCE2061BDE93674uL, 0x89E3FAA19127DF0CuL)),
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> GiPadeX32Table
            = new(new (Hexcode c, Hexcode d)[]{
                ((+1, -2, 0xA2FC0FBA64A62FF6uL, 0x3E58D9843C0F3C52uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -4, 0xC14D8FE8C63E8446uL, 0x924FB17CCE3AE966uL), (+1, -2, 0x97D03F3BC9F60829uL, 0x2022BF681D46F243uL)),
                ((+1, -7, 0xCB90B234E25F44D5uL, 0x67C84F7AF48A0D22uL), (+1, -5, 0x9FE01F26436E5505uL, 0x32C0E8C4243A0810uL)),
                ((+1, -11, 0xF9DA16175773CBD5uL, 0x457C796CF03C8DA8uL), (+1, -9, 0xC43AEB63EFA60AA4uL, 0xB50567BB1B9B4091uL)),
                ((+1, -15, 0xC4F655083153EB99uL, 0x4C4011172A60EFD2uL), (+1, -13, 0x9AB14A4D2A6BAB70uL, 0x883F7FBB8B80BB6EuL)),
                ((+1, -20, 0xCEDAF60EE6C01F88uL, 0x36E69B35891DF85EuL), (+1, -18, 0xA27697D5F32FBA23uL, 0xE28682EAFAC878D1uL)),
                ((+1, -25, 0x90B95BF389C2DE95uL, 0x88128E980772EF5DuL), (+1, -24, 0xE354F2D870FD326DuL, 0x7B18EA88021B7AA2uL)),
                ((+1, -31, 0x821998A5B67E16E4uL, 0xA312A8EC368A6910uL), (+1, -30, 0xCC5C4EEC7E51E2CEuL, 0x82839CC26DC1C038uL)),
                ((+1, -38, 0x885E6908D14BC4C5uL, 0x1215268D0CED3164uL), (+1, -37, 0xD63524EDADA9682DuL, 0x6B54FD6BF8C46F40uL)),
                ((+1, -47, 0xFDFE2EE987524BBAuL, 0xDE4F01413DBEF1FEuL), (+1, -45, 0xC77C4DA56AE0CC49uL, 0xFE367F97E00281E4uL)),
        });
    }
}
