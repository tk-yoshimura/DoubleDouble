using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class GammaTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode c, Hexcode d)>> tables = new(){
                { nameof(SterlingTable), SterlingTable },
                { nameof(PadeX1Table), PadeX1Table },
                { nameof(PadeX2Table), PadeX2Table },
                { nameof(PadeX3Table), PadeX3Table },
                { nameof(PadeX4Table), PadeX4Table },

                { nameof(PadeX4to6Table), PadeX4to6Table},
                { nameof(PadeX6to8Table), PadeX6to8Table},
                { nameof(PadeX8to10Table), PadeX8to10Table},
                { nameof(PadeX10to12Table), PadeX10to12Table},
                { nameof(PadeX12to14Table), PadeX12to14Table},
                { nameof(PadeX14to16Table), PadeX14to16Table},

                { nameof(PadeX16to20Table), PadeX16to20Table},
                { nameof(PadeX20to24Table), PadeX20to24Table},
                { nameof(PadeX24to28Table), PadeX24to28Table},
                { nameof(PadeX28to32Table), PadeX28to32Table},
                { nameof(PadeX32to36Table), PadeX32to36Table},
                { nameof(PadeX36to40Table), PadeX36to40Table},
                { nameof(PadeX40to44Table), PadeX40to44Table},
                { nameof(PadeX44to48Table), PadeX44to48Table},
                { nameof(PadeX48to52Table), PadeX48to52Table},
                { nameof(PadeX52to56Table), PadeX52to56Table},
                { nameof(PadeX56to60Table), PadeX56to60Table},
                { nameof(PadeX60to64Table), PadeX60to64Table},
                { nameof(PadeX64to68Table), PadeX64to68Table},
                { nameof(PadeX68to72Table), PadeX68to72Table},
                { nameof(PadeX72to76Table), PadeX72to76Table},
                { nameof(PadeX76to80Table), PadeX76to80Table},
                { nameof(PadeX80to84Table), PadeX80to84Table},
                { nameof(PadeX84to88Table), PadeX84to88Table},
                { nameof(PadeX88to92Table), PadeX88to92Table},
                { nameof(PadeX92to96Table), PadeX92to96Table},
                { nameof(PadeX96to100Table), PadeX96to100Table},
                { nameof(PadeX100to104Table), PadeX100to104Table},
                { nameof(PadeX104to108Table), PadeX104to108Table},
                { nameof(PadeX108to112Table), PadeX108to112Table},
                { nameof(PadeX112to116Table), PadeX112to116Table},
                { nameof(PadeX116to120Table), PadeX116to120Table},
                { nameof(PadeX120to124Table), PadeX120to124Table},
                { nameof(PadeX124to128Table), PadeX124to128Table},
                { nameof(PadeX128to132Table), PadeX128to132Table},
                { nameof(PadeX132to136Table), PadeX132to136Table},
                { nameof(PadeX136to140Table), PadeX136to140Table},
                { nameof(PadeX140to144Table), PadeX140to144Table},
                { nameof(PadeX144to148Table), PadeX144to148Table},
                { nameof(PadeX148to152Table), PadeX148to152Table},
                { nameof(PadeX152to156Table), PadeX152to156Table},
                { nameof(PadeX156to160Table), PadeX156to160Table},
                { nameof(PadeX160to164Table), PadeX160to164Table},
                { nameof(PadeX164to168Table), PadeX164to168Table},
                { nameof(PadeX168to172Table), PadeX168to172Table},
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach ((Hexcode c, Hexcode d) in tables[key]) {
                    stream.Write((UInt64)c.Hi);
                    stream.Write((UInt64)c.Lo);
                    stream.Write((UInt64)d.Hi);
                    stream.Write((UInt64)d.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode s, Hexcode r)> SterlingTable
            = new(new (Hexcode s, Hexcode r)[]{
                ((+1, -4, 0xAAAAAAAAAAAAAAAAuL, 0xAAAAAAAAAAAAAAAAuL), (+1, -5, 0x8888888888888888uL, 0x8888888888888888uL)),
                ((+1, -11, 0xD00D00D00D00D00DuL, 0x00D00D00D00D00D0uL), (+1, -1, 0xC000000000000000uL, 0x0000000000000000uL)),
                ((+1, -11, 0xDCA8F158C7F91AB8uL, 0x7539C0372A3C5631uL), (+1, 1, 0x91CB1CB1CB1CB1CBuL, 0x1CB1CB1CB1CB1CB1uL)),
                ((+1, -8, 0xD20D20D20D20D20DuL, 0x20D20D20D20D20D2uL), (+1, 2, 0x9384511DEAB78451uL, 0x1DEAB784511DEAB7uL)),
                ((+1, -3, 0xB7F4B1C0F033FFD0uL, 0xC3B7F4B1C0F033FFuL), (+1, 2, 0xF808968F383D5119uL, 0x244D3527089A63B2uL)),
                ((+1, 3, 0xD672219167002D3AuL, 0x7A9C886459C00B4EuL), (+1, 3, 0xBB3DD3DA9AC17B58uL, 0xADC81A9890CA341EuL)),
                ((+1, 11, 0x8911A740DA740DA7uL, 0x40DA740DA740DA74uL), (+1, 4, 0x83B7B085A5F7689EuL, 0xCD9552B83C7309DCuL)),
                ((+1, 19, 0xA8D1044D3708D1C2uL, 0x19EE4FDC4469CCAEuL), (+1, 4, 0xB04C820CF37B0F22uL, 0x50D78B1D73F478F5uL)),
                ((+1, 28, 0xB694D07B219DBCC4uL, 0x8676F31219DBCC48uL), (+1, 4, 0xE35D5F580E37ECB4uL, 0xE1B9AA804FE50FA7uL)),
                ((+1, 38, 0xA1BBCDE4EA012735uL, 0x0B88127350B88127uL), (+1, 5, 0x8E75243CF95640BAuL, 0xB1AC741F13538518uL)),
                ((+1, 48, 0xDE466B7C78FBAAE3uL, 0xC3A9E6DAEAE46D98uL), (+1, 5, 0xAE799EBA1DCEB485uL, 0xFC9877597F7685B3uL)),
                ((+1, 59, 0xE2E1337F5AF0BED9uL, 0x0B6B0A352D4F335CuL), (+1, 5, 0xD1BC1F238533A53CuL, 0x065E1F08A600A21BuL))
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX1Table
            = new(new (Hexcode c, Hexcode d)[] {
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -1, 0xF7BE827D214A59FFuL, 0x253A787D2C0DF3D7uL), (+1, 0, 0xC5C175304F7D90D1uL, 0xFB7C5BFF16B05F97uL)),
                ((+1, -1, 0x823CCA21D4494010uL, 0x197F82BE2A6A0BC3uL), (+1, -2, 0xD2AB42C418E84EE7uL, 0x2FA2D0E4CC39AADBuL)),
                ((+1, -3, 0xBD06D4B46DB68FAAuL, 0x5A530BEBBA9AE0CBuL), (-1, -3, 0xCB3E5655FC81313FuL, 0x101C38EC0C6742C6uL)),
                ((+1, -5, 0xD1B4E87FCC561FAFuL, 0x708198ACE68468D6uL), (-1, -5, 0xCCED6735745CEF82uL, 0x0D6E047387174762uL)),
                ((+1, -7, 0xBAD2A2460EE4FCF5uL, 0xC6FF088D0C87730FuL), (+1, -6, 0x8F3A939FDC3D8527uL, 0xBC026B22B10412EEuL)),
                ((+1, -9, 0x89B1381D2A2B1BE2uL, 0x74130FD27D1DEC2FuL), (+1, -10, 0xD3C78B54B55135E0uL, 0xAF80534B8583F54EuL)),
                ((+1, -12, 0xAA8CB4917AC14FD6uL, 0xC5C904E0C8C8861BuL), (-1, -11, 0xEE581953A64506C7uL, 0xD9D0EAF56209C335uL)),
                ((+1, -15, 0xB2F7B18DD497DEDBuL, 0x0AB4FC76521F41B8uL), (+1, -15, 0x9808DECDAC86EA97uL, 0xF30773FE15770A8AuL)),
                ((+1, -18, 0x9EF60CE274511D3BuL, 0x2567FCDD1014F0BBuL), (+1, -16, 0xA6BEB19C9E05C00FuL, 0x6934679FC60FAE13uL)),
                ((+1, -22, 0xED4061BC3A046F30uL, 0xD3B43EAB4770B3D4uL), (-1, -19, 0xBB87F131549ECFE9uL, 0xA8CE8F4579E360ACuL)),
                ((+1, -25, 0x9192D851D23D4EB1uL, 0xA02104F57BE10EEEuL), (-1, -26, 0x9A863DE26F9E20ACuL, 0x81D507052A75ED10uL)),
                ((+1, -29, 0x8DA7319ED8537A1FuL, 0x96E0B356A79AA5C7uL), (+1, -25, 0x8EFBF036AB734827uL, 0xB8BD8B42B46993B0uL)),
                ((+1, -34, 0xC79A6A110796BB9FuL, 0x42C7DF4D4B4A31B0uL), (-1, -29, 0xCAD8579BDBEDF543uL, 0x52CA65D80FEDC326uL)),
                ((+1, -39, 0xA94F151B4C2C820DuL, 0xF47C064B8918A5DFuL), (+1, -34, 0xC408D937BF8BB468uL, 0xE51B363FECD4A28CuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX2Table
            = new(new (Hexcode c, Hexcode d)[] {
                ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, -1, 0xE8B221B670F0E1D2uL, 0x2A4CE6637E906CF0uL), (+1, -2, 0xF8ED1333DD4352EDuL, 0xF8164BC8FFC6708DuL)),
                ((+1, -2, 0xE6CAED60B2C1F57AuL, 0xAC549A5D79384419uL), (-1, -3, 0xAA9F8B439B1571E8uL, 0xE3DB387BF8343E4DuL)),
                ((+1, -3, 0x9E018A85F7DE8BCFuL, 0x3F99523BFF3A01C9uL), (-1, -5, 0xE9B5C66452D14498uL, 0x24A49A6D0C78EA52uL)),
                ((+1, -5, 0xA54C673E731E8C66uL, 0x212CC1FDBEFDB293uL), (+1, -6, 0x9D37961B456195CCuL, 0xC618C9E260F91915uL)),
                ((+1, -7, 0x8AAD22A6966B1A76uL, 0x72BFEFA5FC1E0125uL), (+1, -10, 0xD309C1BD31F5BFD7uL, 0x07F9D863EE255DFDuL)),
                ((+1, -10, 0xC028E7579FEF9C4BuL, 0x37FE315F07CE672CuL), (-1, -10, 0x9255A89765FA721CuL, 0x2B74425F5F4FB753uL)),
                ((+1, -13, 0xDF3685AEB42F58AAuL, 0x17427A8800A2765CuL), (+1, -14, 0xA37A96F18DB4CAB3uL, 0x98387F0D630BB509uL)),
                ((+1, -16, 0xDB0A15229DAC0227uL, 0x52A917208074F05CuL), (+1, -16, 0xC057BFA2E129341CuL, 0xBCC3EDB172A83C74uL)),
                ((+1, -19, 0xB54B6088990E952AuL, 0x8289A928BF095C1EuL), (-1, -18, 0x9C5CCA32EE353AB0uL, 0x8694AF17C803DF88uL)),
                ((+1, -23, 0xFB15125CBB894A6AuL, 0x1E47FBCF6304EB28uL), (+1, -23, 0xA7BBE229FEF27841uL, 0x7B3EFC582F749E68uL)),
                ((+1, -26, 0x8E368FE40D60E4B5uL, 0xD5E8E4A3F37D4B0CuL), (+1, -25, 0xC801AA16B728FDB9uL, 0x67DC55F2900A4558uL)),
                ((+1, -31, 0xFDCDAC696E0CDD09uL, 0xD7E866DE135FB1C1uL), (-1, -28, 0xF00A5010AB173F96uL, 0xFB9B988C6366C50BuL)),
                ((+1, -35, 0xA29EB8BD5600848AuL, 0x461FB7036FAA0886uL), (+1, -32, 0xE59E7BCF4F6E45D1uL, 0xEF5D8EFE14C86B64uL)),
                ((+1, -41, 0xF720E3C8812332F9uL, 0x4B174D75B7D4209BuL), (-1, -37, 0xAEF64C28AC938920uL, 0x51FAB2BDF51089EAuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX3Table
            = new(new (Hexcode c, Hexcode d)[] {
                ((+1, 1, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 0, 0xE617FEDEC027AB6EuL, 0x1EB041FA07B91400uL), (-1, -6, 0xC47327B844F19DA1uL, 0xF22FD09EDE841516uL)),
                ((+1, -1, 0xE2421A50627E1224uL, 0xE8CC78427C7A7835uL), (-1, -3, 0xA30377D562A7C7E4uL, 0x65E164D199C43885uL)),
                ((+1, -2, 0x99B2536E445D2105uL, 0xD30BD39C3D1F23A2uL), (+1, -6, 0xC83DC39E99212ACDuL, 0x66C82AACC5948ABFuL)),
                ((+1, -4, 0x9FAB0B9BBECA6127uL, 0x2945A486E894F6A9uL), (+1, -8, 0xF5A52D145464BCC0uL, 0x166AC19E596AE79EuL)),
                ((+1, -6, 0x8515DE1D86053474uL, 0x55D0DA9A63A75A9EuL), (-1, -9, 0x9AABE25B0C605AFAuL, 0x6D61A33E651705DBuL)),
                ((+1, -9, 0xB751FB19DCD94880uL, 0x41D19AC50E3BB16BuL), (+1, -15, 0xE02EFBA5FD5BE9D7uL, 0x3790C6341EA4D932uL)),
                ((+1, -12, 0xD3C73133CC6F1998uL, 0xAE4C745D542D2DC8uL), (+1, -14, 0x85B3C0D125C7BD0FuL, 0xDB763C411B7138A1uL)),
                ((+1, -15, 0xCECB4F26656E48FEuL, 0xB4EC867D33517582uL), (-1, -17, 0xAA6F7E3556D3AA4DuL, 0x1A51A052992E23C4uL)),
                ((+1, -18, 0xAA6715C5ACE79C8AuL, 0x0053575D3E0B16D5uL), (+1, -23, 0xC9C84C95C4A42EF9uL, 0x3C4337FD5B10C565uL)),
                ((+1, -22, 0xEB219CD6742A8A71uL, 0xAB5BB13EA6DC2522uL), (+1, -23, 0x8292A83A3A745AD7uL, 0x1FD652DBBFDF7636uL)),
                ((+1, -25, 0x84C949FCCA030C29uL, 0xF2616D7768B31E50uL), (-1, -26, 0x93DB73C99E10231BuL, 0x044BFD44EF947E0FuL)),
                ((+1, -30, 0xECA0A5402DA6B6DDuL, 0xEA475E0D2D12188BuL), (+1, -30, 0x96247FCC3B8E30DAuL, 0x5E59415274E16661uL)),
                ((+1, -34, 0x979527403BD494EAuL, 0x575A7B7524B25FDAuL), (-1, -35, 0x91F7378AE43FAF25uL, 0xD9E88073B6D60AF3uL)),
                ((+1, -40, 0xE7C35BECE2528733uL, 0xBB9552AD230F11DBuL), (+1, -42, 0xB97A4E52938778BEuL, 0xF8A7A9352BA13E19uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX4Table
            = new(new (Hexcode c, Hexcode d)[] {
                ((+1, 2, 0xC000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
                ((+1, 2, 0xB4ED1C0662D44C4BuL, 0x6ACCB95E5C594182uL), (-1, -2, 0xA0A99027FD12FA97uL, 0xEA6192AD07170FF7uL)),
                ((+1, 1, 0xB538E464AA614F41uL, 0x33AFAB75BAA757AAuL), (-1, -4, 0x84928779675C6E8EuL, 0x16FA3D5C44437229uL)),
                ((+1, -1, 0xF807D526E7F6F812uL, 0xDCA83CEC8EF1C9F9uL), (+1, -5, 0xA259DB5CA996CF28uL, 0x2002B181E31935F0uL)),
                ((+1, -2, 0x8074ED66F54368B4uL, 0xF017C12A54CA8E22uL), (-1, -9, 0xD0ACA4ED0FDF8C32uL, 0xF70EA6B9B1006A99uL)),
                ((+1, -5, 0xD3E5AAC81B405109uL, 0x6D58B573D694315EuL), (-1, -10, 0xA3A2B75AC130C085uL, 0xBD9C9EC03BF43997uL)),
                ((+1, -7, 0x8F4C5C402F8DEED3uL, 0xF70B198D1FF778FAuL), (+1, -12, 0x9E74F55CE2F6449CuL, 0x40607BC0DF6C3B59uL)),
                ((+1, -10, 0xA16BB0E9C7F6155DuL, 0xF90AD8378A027994uL), (-1, -17, 0xA66272713A94F5C4uL, 0x6E6D6C11333DDD83uL)),
                ((+1, -13, 0x9881ACFC9C5BB598uL, 0xFEFFB54E257D5637uL), (-1, -18, 0xAC990F4284C48F53uL, 0xF05A61F79BA43677uL)),
                ((+1, -17, 0xF14F5F45829071B6uL, 0xD175BCFEC190BA4EuL), (+1, -21, 0xDDE2E065B3FB511FuL, 0x73510040F1B5E936uL)),
                ((+1, -20, 0x9E4DB6A64494CA2BuL, 0xBFCDF4C060E795B3uL), (-1, -26, 0xFF82D2C3868A9595uL, 0xB45170D2A19571F2uL)),
                ((+1, -24, 0xA849DD5A79ECCDF8uL, 0x547B49A2CD7861EFuL), (-1, -28, 0xB638148220B293A4uL, 0x53A94DDB0047A44AuL)),
                ((+1, -28, 0x8AE9EC296E686220uL, 0x93470307FD774E91uL), (+1, -31, 0xD677FD593D7FE4A0uL, 0xA349C3138DD5F5D3uL)),
                ((+1, -33, 0xA236F9CF71332B06uL, 0xB580CCC654F9F21CuL), (-1, -35, 0xC22E52AAA2DD2D7FuL, 0x89EE663EBCBF2C77uL)),
                ((+1, -39, 0xD639CDA3601CEB38uL, 0x2D2A66F29AF37FDBuL), (+1, -40, 0x8C6E280D648C7E49uL, 0xFE2C807D3E1D7B21uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX4to6Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x95C01A39FBD6879FuL, 0xA00B120A068A66F5uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 1, 0xA13521D80369441EuL, 0x6A6FCB823B8EA3D0uL), (+1, 0, 0x9AA1E6935DA644E2uL, 0xD9726DA60A18C716uL)),
            ((+1, 1, 0xB07BB6FF1FDE9EB2uL, 0x2DE30EA480C47DB9uL), (+1, -1, 0x9F1BE2E000B42E33uL, 0x7062488AF69301CEuL)),
            ((+1, 0, 0xBAABC71A57F655AEuL, 0x67CA67AF8F53FB6FuL), (+1, -3, 0xB5FEE3431032D28EuL, 0x96B9E8E947955862uL)),
            ((+1, -2, 0xE4CC02314B343EB0uL, 0x69579B1B41E2865EuL), (+1, -6, 0xFD63013C5BF6EF11uL, 0xFC103AE45C58BDC6uL)),
            ((+1, -4, 0xAE9C7526223EE3D6uL, 0x5E4A204797CE8EDCuL), (+1, -9, 0xDD0AA974A822A464uL, 0x0F8E202DE1ADC153uL)),
            ((+1, -7, 0xA9F396E725E0D43AuL, 0xE4727567518416FDuL), (+1, -13, 0xEFDF38F34EE1344AuL, 0xF28C1C0C9B0C443CuL)),
            ((+1, -11, 0xD1562E8BE70DFA17uL, 0x57A16DF2345D0659uL), (+1, -17, 0x9B6DEA25D7FE674BuL, 0x509917550D7F1B47uL)),
            ((+1, -15, 0x9D1002E31F640BBDuL, 0x3690A7A0C220BCC4uL), (+1, -23, 0xDC9EB31481337AC2uL, 0x26ABF10759752FA0uL)),
            ((+1, -20, 0x849ADAA611E2B7D1uL, 0x9EC37F0F70F300CDuL), (+1, -29, 0x901678F9B0D027E8uL, 0x1CF70116DDC1EC27uL)),
            ((+1, -27, 0xD770CD3BDB2CFCD6uL, 0x25543E5800B74472uL), (+1, -38, 0xDFB8D96019ACBFFDuL, 0x74BD115CE7BE85F3uL)),
            ((+1, -35, 0xE87BDF16850FBD66uL, 0xE94E7E00AF57CDB6uL), (-1, -49, 0x80514BF11EE9A365uL, 0xAEE26DC6FF8F5051uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX6to8Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xE829FB693044B398uL, 0xC4BAEE073D49B26EuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 1, 0xC84B6290867B051EuL, 0xB5E44380D749938EuL), (+1, -1, 0xBC9EAEB3C0542AA1uL, 0xDC4ED4711697D3EEuL)),
            ((+1, 1, 0x89A33D6F99DE63FFuL, 0xA23A66660EB0DC0AuL), (+1, -3, 0xE8DE0BB72EB5461BuL, 0xF0C17A02E96AF78CuL)),
            ((+1, -1, 0xAECFC14BA49BA1DEuL, 0x92D009FB0FB4F06BuL), (+1, -5, 0x9C60FEDC5222748BuL, 0x91FB413FD582033DuL)),
            ((+1, -4, 0xF9F7D140C6DB11A5uL, 0xEA7796B331C4F8C8uL), (+1, -9, 0xF846937C1413290DuL, 0x0850A016E6BDD396uL)),
            ((+1, -7, 0xD7E6A6014034883CuL, 0x031106A7531E2415uL), (+1, -13, 0xED0869D1CFCE59DFuL, 0x8D474BA3348035E2uL)),
            ((+1, -11, 0xE4B12028062BF13BuL, 0x09C2AA45E61FB1CEuL), (+1, -17, 0x846FAC0D40B9C975uL, 0x6F802331423152BDuL)),
            ((+1, -15, 0x90E64A460DCFF22AuL, 0x54936DC83AA76405uL), (+1, -23, 0xA04609C984B37278uL, 0xC76E8DA29B600073uL)),
            ((+1, -21, 0xCCB0823821A2168FuL, 0xE3FD1FCF0F5603BEuL), (+1, -30, 0xB1A252C1CD6E33FCuL, 0xDB99CF32C0B7C49CuL)),
            ((+1, -27, 0x8AB2FB62A07ED2D5uL, 0x0B9F62F07F745918uL), (+1, -39, 0xEA55855B0E32C57EuL, 0x3200213665C606DCuL)),
            ((+1, -36, 0xFA3ECFCC330403E3uL, 0x4923E329B59D893BuL), (-1, -51, 0xDE86F1BBD910DFB5uL, 0x43EF1D06D7AA65C9uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX8to10Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x9931CB1B5941ACD7uL, 0x1F1E076AAF327197uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 1, 0xC393F7B1E4DB8B69uL, 0xB10B2DB3F9E4FB57uL), (+1, -2, 0xFD2B8D86953D846CuL, 0xFF989A8EF9EC610FuL)),
            ((+1, 0, 0xC82EA16D313256D0uL, 0xBD1B4E40F621FFC4uL), (+1, -4, 0xCD33C18BBACDB413uL, 0xB3B1A7A9190640BDuL)),
            ((+1, -2, 0xACF50BF92928A68FuL, 0x4ACA43474A372DBCuL), (+1, -7, 0xAFAA7BE11FDF2919uL, 0xB8BC790D8B98C14FuL)),
            ((+1, -5, 0xA074D94B4B5323DFuL, 0x91C3E3A8030F4711uL), (+1, -11, 0xAA8E5F80EC7D2C1DuL, 0x8A7672667135E456uL)),
            ((+1, -9, 0xABA606548605D4D6uL, 0xACEF01F61651445BuL), (+1, -16, 0xBB548E53B627EB38uL, 0xBD61236E7A6740CCuL)),
            ((+1, -14, 0xD401183B2482B3C4uL, 0x7EF75899A056F2E9uL), (+1, -22, 0xDA56DA72F1B91DCEuL, 0x9146029BA3E0156CuL)),
            ((+1, -19, 0x8EF3270467D44C15uL, 0xB19CF20A92CDCF3FuL), (+1, -29, 0xE662D8CFC483FEABuL, 0x50A7A39D0C805DF9uL)),
            ((+1, -26, 0xB6E6D6DD7D2C328DuL, 0x208F34164CBC1B72uL), (+1, -37, 0x8FFA09D4F5E2A9B1uL, 0xD783E2B754991920uL)),
            ((+1, -34, 0x9B2B6BBCDFBC8562uL, 0x655770EA6F5F9AB8uL), (-1, -49, 0x8032EFA779C80418uL, 0xB125C0B2F9FDAD54uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX10to12Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xF0323403489BCB55uL, 0x9F4A4F92C9A5F7E1uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 1, 0xDBD5EEE818718633uL, 0xA0C7EE84CD46A673uL), (+1, -2, 0xCB5DF18372E8EBCDuL, 0x0AB1B9FF387F73A9uL)),
            ((+1, 0, 0xB2C27619EEF7D2BCuL, 0x7F633FE3DEB21833uL), (+1, -4, 0x84822A1A23B72076uL, 0xAB03858391C49EE6uL)),
            ((+1, -3, 0xF60B3F7BAE652343uL, 0xC9C8B6195B33FFA0uL), (+1, -8, 0xB68C1E58E6C70745uL, 0x287E8CB8CA927410uL)),
            ((+1, -6, 0xB602210F7B5577F6uL, 0x72A9F065CD872D51uL), (+1, -12, 0x8EC6A35E4C1B89A7uL, 0x122507088A85150AuL)),
            ((+1, -10, 0x9B63D814F9847F61uL, 0xB2E8B5209BC8BB90uL), (+1, -18, 0xFD0691C7430C35E2uL, 0x42D8A7ECC419A8D6uL)),
            ((+1, -15, 0x995453D4B250250EuL, 0xA3A947191659A0EBuL), (+1, -24, 0xEE5FD268547F1018uL, 0x763953983F10E08FuL)),
            ((+1, -21, 0xA5698D47AE516E1FuL, 0xE7925333F984A69CuL), (+1, -31, 0xCBD8E05B599E25B7uL, 0xAD96E4F9B419C0EDuL)),
            ((+1, -28, 0xA999ED4DF1050C5DuL, 0x86C48ABA454F48DCuL), (+1, -40, 0xCF76868787C6F3F7uL, 0x47F24F02BBFACCBCuL)),
            ((+1, -37, 0xE71D0ADFB2206F9FuL, 0x109E417EDCD78C4BuL), (-1, -52, 0x9189FE2B9583ED22uL, 0x60DC9F9E5FC67BE2uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX12to14Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x8040956348C89B39uL, 0xDE9AD40FE1D00EB6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 1, 0xE6DBC77D99C5D1FAuL, 0xD8E4FEF82BB6BC6CuL), (+1, -2, 0xA9F3F0E1E677B6BDuL, 0x6C23DFE4E83F52FBuL)),
            ((+1, 0, 0x9F33E04335C72F9CuL, 0x99F1F3D157C9E84DuL), (+1, -5, 0xB92F0DDEE65525B7uL, 0x0CBEEDCF69A18845uL)),
            ((+1, -3, 0xB76EACDB75B33FF4uL, 0xD15493B053CD76ADuL), (+1, -9, 0xD573D2E4C589770DuL, 0x605AA7C0ECEF07E8uL)),
            ((+1, -7, 0xE27461A0530DFA23uL, 0x59ABB52473ADB406uL), (+1, -13, 0x8BCC37138D5DEDAEuL, 0x92F5A614C8FA527DuL)),
            ((+1, -11, 0xA128964BC6117A21uL, 0x2DED9CEFD6575528uL), (+1, -19, 0xCFABB2C7D3ABBF2DuL, 0xF073E3C00AFF995DuL)),
            ((+1, -16, 0x8487000184309B48uL, 0x82A31FA2F40AC299uL), (+1, -25, 0xA437572C1EC9A069uL, 0x994DC26E795CEC6BuL)),
            ((+1, -23, 0xEE5F91857AD3EB8CuL, 0xDC52C87346F9FA9EuL), (+1, -33, 0xEC2E582B2FDD9DEDuL, 0x63C8C4820A8F3E9AuL)),
            ((+1, -30, 0xCBE582D5741CC930uL, 0xCB16672A0EF06B47uL), (+1, -42, 0xCAD305CD80309299uL, 0xBE5C9BC2F7BF1312uL)),
            ((+1, -39, 0xE80A35A418F16533uL, 0x2FB8380C12C40118uL), (-1, -55, 0xE9BEB9CD783E508FuL, 0xAC8EA86767FBED16uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX14to16Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x8930695DDC8133A6uL, 0x0632989920D21861uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 1, 0xF8E6CE0735253F2EuL, 0x6B23888EF8AC1FB7uL), (+1, -3, 0xFFCD5873CDE11523uL, 0xD6A4102AC8E90E88uL)),
            ((+1, 0, 0x809DB28D811EE769uL, 0x8E29D633567934A7uL), (+1, -6, 0xCBB22B4B24642CABuL, 0xC90E423BD233AB68uL)),
            ((+1, -4, 0xD93C420ACCFA532EuL, 0xCABE84C6BF481CDDuL), (+1, -10, 0xA4AD193BE41E3F07uL, 0xEF75DA2FD9B6BAA1uL)),
            ((+1, -8, 0xBD85F3879699606CuL, 0x20F3E99C1C66570DuL), (+1, -15, 0x8E5D49D86F5E9626uL, 0x503E57FB6E7F0A25uL)),
            ((+1, -13, 0xB46C96E50B112015uL, 0x2CD7366C7E3EC316uL), (+1, -22, 0xFD3F781337A73659uL, 0xE83D94034F7C15F4uL)),
            ((+1, -19, 0xB5C58862A10D332FuL, 0x8104E0C3E12695F6uL), (+1, -29, 0xC8AC2CD3C9CD9A72uL, 0x0B85303C847D1B58uL)),
            ((+1, -26, 0xAAEEBCE9E060557BuL, 0x3C50C1583F8E1E0AuL), (+1, -38, 0xBB953FE6A4201F21uL, 0x12B4EAE171129C56uL)),
            ((+1, -35, 0xD3E8727889714A65uL, 0xE086A07D75C55DA6uL), (-1, -51, 0xED6642399A0AD20EuL, 0x3639BA5F339D011EuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX16to20Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x801269631A9704E3uL, 0xEB6D1488E3BA64FFuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0x80827A87A67D5BF7uL, 0x2321451CA30F9936uL), (+1, -3, 0xFBAF8A8AE99D350CuL, 0x5113BD5C407B9F21uL)),
            ((+1, 0, 0x83283895C7E23DC5uL, 0xED0D3F8CFD71F5C7uL), (+1, -6, 0xCAC6AE4C20E317BCuL, 0x8E2E416D037AC9FAuL)),
            ((+1, -4, 0xDE82F92466B6F64BuL, 0x25182545FFE9FD8DuL), (+1, -10, 0xAC87ACB0F034BB61uL, 0x1EFD3BFD57881A10uL)),
            ((+1, -8, 0xC9A0E471D5DA9A2CuL, 0x93DCDF3FF7C88AD2uL), (+1, -15, 0xA67AFA0DB22ACF68uL, 0x0BB7DE6EF9893DB3uL)),
            ((+1, -13, 0xD2058DD519DDA882uL, 0x3861878655C767C9uL), (+1, -21, 0xB5BD2E1DB9487E21uL, 0xCDA8EDB1A5E5BFBAuL)),
            ((+1, -19, 0xFBF0E252E9586354uL, 0xC76E028E23468DFDuL), (+1, -28, 0xD299BA7F1B1539BCuL, 0xE3C26EF3DCB4FDC8uL)),
            ((+1, -25, 0xA497BA6A57CF8E95uL, 0x023FF14BA3B5E7ABuL), (+1, -36, 0xDD3223D0407DB4CCuL, 0xC13E1FFCF84170D1uL)),
            ((+1, -33, 0xCB7E271C5CB43E87uL, 0x1397DB9F99A2E080uL), (+1, -45, 0x8A65937077CCA538uL, 0x2951854502EB1A4BuL)),
            ((+1, -42, 0xA6357FBFF5898E50uL, 0x44E25854F1BC24A9uL), (-1, -59, 0xDA709FE5AC22BE46uL, 0xAFD3711049694044uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX20to24Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xC1658D9252DBBC75uL, 0x53D36208CD733587uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0x8DE95ADE89E71D29uL, 0xF70AA23688528B39uL), (+1, -3, 0xCA340E2232AAAF33uL, 0xF97C967787F5C669uL)),
            ((+1, -1, 0xE532F4C2ABCD014AuL, 0xA19AA1F9D9A4F57DuL), (+1, -6, 0x82FE1DDF5CD1AA24uL, 0xB04791D2FB3276EFuL)),
            ((+1, -4, 0x9B10C956F3E6D8A9uL, 0xA541DC613D92F1D9uL), (+1, -11, 0xB36BA3C7A18076D4uL, 0x66B62228A2CD0A71uL)),
            ((+1, -9, 0xE0B17E724609209BuL, 0x388B9899D106698DuL), (+1, -16, 0x8B875777A11CF82CuL, 0xA0818E291AD1D8F4uL)),
            ((+1, -14, 0xBB6892BBD3242ECEuL, 0x611CD6B6DD48F404uL), (+1, -23, 0xF5E4F8FE09D9EC57uL, 0xF3112F9260EC997CuL)),
            ((+1, -20, 0xB43FE8C72B156C42uL, 0x081913943AF53E17uL), (+1, -30, 0xE6752091FD1F9D60uL, 0x7944DD89A6165D2AuL)),
            ((+1, -27, 0xBD18519496054336uL, 0x8D327F5EC50A972EuL), (+1, -38, 0xC44998CE22A5F447uL, 0xE5683961970323DBuL)),
            ((+1, -35, 0xBC068DBB69E3101BuL, 0xAE4A3B79E9B0ED13uL), (+1, -48, 0xC811359A82D2C2D6uL, 0xAD50CD6344943DAFuL)),
            ((+1, -45, 0xF7890FF5DD5F33B1uL, 0x3A9BEE0E3D8B4E9EuL), (-1, -62, 0xF9F025884700F3DFuL, 0x3CF2A87346089374uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX24to28Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xE7C7A0DB0246F3FCuL, 0xA2149DA10DD30BCAuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0x9423EB016AC447F8uL, 0x6D8D0DB467863E33uL), (+1, -3, 0xA8F13D0B89449CCFuL, 0x7D860E982F662C09uL)),
            ((+1, -1, 0xC98586344323B96BuL, 0x3316F010F08F170DuL), (+1, -7, 0xB6FDC1D3AA62C987uL, 0x957A796845B8FA84uL)),
            ((+1, -5, 0xE41104DAB4258128uL, 0x3A57AD66F72A3BABuL), (+1, -12, 0xD1AEECEF698B9197uL, 0x0482CA39590C8F3CuL)),
            ((+1, -9, 0x89FCDA871B248158uL, 0xCD77209323AD3CAAuL), (+1, -17, 0x8888650038B9B192uL, 0x89773F25FB229E86uL)),
            ((+1, -15, 0xC027921A956F95FDuL, 0xE3E374EF7B4ECD73uL), (+1, -24, 0xC9AEAED3E9AAB407uL, 0xACC08F40F59BF7F4uL)),
            ((+1, -21, 0x9A4E2309E2C2CCD9uL, 0x46723304946C7AD1uL), (+1, -31, 0x9EA737CEC3A56D12uL, 0xAFE22F11C16342B9uL)),
            ((+1, -28, 0x8738168208E0EAD6uL, 0xAFBF38FB7D6A711AuL), (+1, -40, 0xE3428F846AF5713DuL, 0x3D49346DA2BB0463uL)),
            ((+1, -37, 0xE0CC73082F2079CEuL, 0x16081C8024D87566uL), (+1, -50, 0xC3675A626ABEE261uL, 0x4EB340CBFBDE1BEAuL)),
            ((+1, -47, 0xF7A8F2152299470CuL, 0x649D545F84C0AC77uL), (-1, -64, 0xC91E049BF74BB71DuL, 0x214AB70EC7AFD9E5uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX28to32Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0x8C20009856813B62uL, 0x45C1ADE8E069ED2AuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0x99A05918AA3A98F3uL, 0x8D0156212C18F476uL), (+1, -3, 0x910EB4CC0CC752B8uL, 0x0F91F1FFE8E32C2FuL)),
            ((+1, -1, 0xB4661528B76917F0uL, 0x7703732ECEF5073DuL), (+1, -7, 0x86F6B5C7C0E8B160uL, 0x9537B9C3BC678239uL)),
            ((+1, -5, 0xAF637C9A005FC7B6uL, 0xE5B5225C7394ABB9uL), (+1, -12, 0x84E8F0F2783A879DuL, 0x17199132DE16D0F3uL)),
            ((+1, -10, 0xB62104FB88EDCF1FuL, 0x0934D5DB14CD94A4uL), (+1, -18, 0x94D8B56066717188uL, 0x726D5341611F4B12uL)),
            ((+1, -16, 0xD99875A7F9100ED4uL, 0x139752276AE3E3DCuL), (+1, -25, 0xBD3A6E112F849321uL, 0x2B387291FF0FD61DuL)),
            ((+1, -22, 0x95ECF8C1F80629D8uL, 0xED666FB63D50E220uL), (+1, -32, 0x803CF8B85E08CBE1uL, 0x524EDEB19339AE63uL)),
            ((+1, -30, 0xE1858AB38ED54E66uL, 0x867D851EA50DE753uL), (+1, -41, 0x9E77563806506F37uL, 0xA4E7AD42505E0FD7uL)),
            ((+1, -38, 0xA0F8B84471202212uL, 0xDEC5D3C3621C7E62uL), (+1, -52, 0xEBA790D6F26FEC6DuL, 0x8FDB523FF43CEE56uL)),
            ((+1, -48, 0x9860B8C3B2ED9688uL, 0x25C79C3F73410866uL), (-1, -66, 0xCD94FFB386671DB6uL, 0x1F08A21C4900D5E4uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX32to36Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xA9CBA58F8355054FuL, 0xE99CB6584B401DDDuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xA194392752E63001uL, 0xB0D47D99E042F4F0uL), (+1, -4, 0xDE541F4F45D201EFuL, 0xB6CF52808CDDA82EuL)),
            ((+1, -1, 0x90FC389A6B531667uL, 0x9843BBD9D949B1DDuL), (+1, -8, 0x99F207D8EA59EF01uL, 0x1711227559D30456uL)),
            ((+1, -6, 0xD27FEC0381796AD6uL, 0x389692AD4439F446uL), (+1, -14, 0xD892752CE2D8A924uL, 0x2141FC3CBCB5D426uL)),
            ((+1, -11, 0x9D44E22F4D559C52uL, 0x63CC9A2B356A5308uL), (+1, -20, 0xA30A5395DBEA8441uL, 0x7CD9B41D7A0FC4CEuL)),
            ((+1, -18, 0xFFBE20A319A93151uL, 0xD1175563B09C9263uL), (+1, -28, 0xFCE12D5913D7FF6DuL, 0x4DA5705CF14E9FBBuL)),
            ((+1, -25, 0xDB7EB6C264EBC2EBuL, 0x15E0DA8593D8DE50uL), (+1, -36, 0xAF207E4B5A04B4E4uL, 0xBD5EA4BF23BCD165uL)),
            ((+1, -33, 0xAF559400352D752BuL, 0x023EFAA5C3F33924uL), (+1, -46, 0x902746FB9FA8014EuL, 0xD4625F519219763EuL)),
            ((+1, -43, 0xB7EBD6DEB0CCE3F7uL, 0x654E0B9B8B9DE78FuL), (-1, -60, 0x8C867F3725A39928uL, 0x984BDC5457CF96F5uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX36to40Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xECA5B75EC8DAA691uL, 0xA06C90A6362522D6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xA7A672B5CBE3CD67uL, 0x9CD1AA003140F21DuL), (+1, -4, 0xC5C8B4386E42D544uL, 0x2472953DB6075F20uL)),
            ((+1, -1, 0x856664F1E35D3ACCuL, 0x3D28FFCAD38617A5uL), (+1, -9, 0xF3BC1B966689EAE9uL, 0xE0DB5C1A91C4B482uL)),
            ((+1, -6, 0xABF6031CE7377545uL, 0x7ADA5245A95E8967uL), (+1, -14, 0x989E7BB77835C7E8uL, 0xDE141DD8350C308FuL)),
            ((+1, -12, 0xE43A0C035D812226uL, 0xAC54DADF0D74DF62uL), (+1, -21, 0xCCA79160832DAADCuL, 0x0DAA3CAEF20EE185uL)),
            ((+1, -18, 0xA4DC5C33CB6EFF79uL, 0x20D4071E6E7BB30AuL), (+1, -28, 0x8D70711FB1B6E9ABuL, 0xF572F638EEB24836uL)),
            ((+1, -26, 0xFB78ED8246F030FCuL, 0x2B44E20644F8953FuL), (+1, -37, 0xAEBC743A84A603D0uL, 0x0B77870E2E8C4317uL)),
            ((+1, -34, 0xB28DD2902E0515B3uL, 0x42733AA8F51BD50EuL), (+1, -47, 0x8081E7BEA71579E8uL, 0xFFEB3055BBB0C776uL)),
            ((+1, -44, 0xA68871B0F61EA587uL, 0x42A9E96469F84782uL), (-1, -62, 0xDC5C2BDF9522DAF7uL, 0x963CD8CA08787F36uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX40to44Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xD64CF44C674DD801uL, 0x0B58AC1AAD9792D5uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xAC0D4B8B97AE2DE5uL, 0x911FBC2440E497C5uL), (+1, -4, 0xB21D5D317C61ABD8uL, 0x7FA014FF697CE5A8uL)),
            ((+1, -2, 0xF6D0913182AFF399uL, 0xFDA2C6DFCA48128CuL), (+1, -9, 0xC5B6F31ABE5B4EF3uL, 0xA0C49937CA0E73D9uL)),
            ((+1, -6, 0x8F316BCD7DF302E4uL, 0x92F22D28C1E1D105uL), (+1, -15, 0xDF19FB5D1E35A770uL, 0x20CC937566A04DADuL)),
            ((+1, -12, 0xAB0311863656A1A0uL, 0xF45A94AE654C40C8uL), (+1, -21, 0x86D4F9A8340D2800uL, 0x8130D58B64B5BC34uL)),
            ((+1, -19, 0xDE4D3C9A1E483E99uL, 0x1CF7FAF79A04518DuL), (+1, -29, 0xA812A948A305AD16uL, 0xBC67300A0FB74F59uL)),
            ((+1, -26, 0x988EC3BE8BF8952BuL, 0x23FDEA48D50F814CuL), (+1, -38, 0xBB645E10EF71532DuL, 0x3CCDA118D32AC603uL)),
            ((+1, -35, 0xC2F47EC0FE50C8E9uL, 0xF424566C7CEAE587uL), (+1, -49, 0xF91A17C08B55C4E0uL, 0x174F0C394EB58E19uL)),
            ((+1, -45, 0xA3A615A5BA9E003AuL, 0x14C0C60002640B3AuL), (-1, -63, 0xBE551A09F5185523uL, 0x698CD9951EFD1F86uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX44to48Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xAB9BED66DCAC4577uL, 0x03C15DA006EBBB63uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xAF060BF74C9A54EDuL, 0x5EA6FDC1BE20E7FBuL), (+1, -4, 0xA2001FDCE5F82403uL, 0xB1C35AD3838AFB47uL)),
            ((+1, -2, 0xE55C080FC22807A2uL, 0x23DDE8FBF3F6F239uL), (+1, -9, 0xA39720B794216E77uL, 0x144259EB6442DFB6uL)),
            ((+1, -7, 0xF23BAD890991C2F1uL, 0xF69FCBD824B5965DuL), (+1, -15, 0xA7F8321BCA81E979uL, 0xC095F6F5151F38D1uL)),
            ((+1, -12, 0x838A30A179040E9CuL, 0x99AC6AA05FBC45FCuL), (+1, -22, 0xB8CC33A182F3E6F8uL, 0xB656D270CE3D44B2uL)),
            ((+1, -19, 0x9B723300B7BB7F7DuL, 0xA5CD8BF98D95FC9DuL), (+1, -30, 0xD1C3461A6DDB2C4AuL, 0xB23D0149761B7F69uL)),
            ((+1, -27, 0xC1EEF02E6FC9342CuL, 0xEFB72FEFDAC60CB6uL), (+1, -39, 0xD5181374712E458AuL, 0x7C7F4DEE06EF7D32uL)),
            ((+1, -36, 0xE143BAC1B3E4557AuL, 0xFF4918DDC36EE90FuL), (+1, -49, 0x813436FAE4320337uL, 0xBFDE1DFE3F00CFC8uL)),
            ((+1, -46, 0xABE03EC370028E8EuL, 0xC0C14DCE6BA3B793uL), (-1, -64, 0xB1DA7EA63D71AD46uL, 0x8CFC9D811CEE5D9BuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX48to52Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xBAAE19A58CDE779DuL, 0x39EDF1C8378F2BA8uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xB315235B6624F161uL, 0xFDA976759FA83529uL), (+1, -4, 0x948EDCBE12718D70uL, 0x72D7A61363BEFAFBuL)),
            ((+1, -2, 0xD7079C4493D81028uL, 0x58F3265AE666D5EEuL), (+1, -9, 0x89973CD3192AEB88uL, 0xB70A1B83E29A06B6uL)),
            ((+1, -7, 0xD013D6CD10F0923EuL, 0x1598DDFBCE4EA727uL), (+1, -15, 0x81997D8B0B504B7FuL, 0x3BED715BEA08E27EuL)),
            ((+1, -13, 0xCF0EF0FDDF0AB990uL, 0xDDF6764D35EAD739uL), (+1, -22, 0x82D5E74AB74C3146uL, 0xCCD6AB138528AAA6uL)),
            ((+1, -20, 0xE033DA13F686C675uL, 0x0C298817A5FFFFC6uL), (+1, -30, 0x88528257189C71F5uL, 0xC68DA30BE26A4AB6uL)),
            ((+1, -27, 0x8026EAE4A048138DuL, 0x83EF3B02D351244BuL), (+1, -40, 0xFE5F967CC5331309uL, 0x79EDF8264381C9C9uL)),
            ((+1, -36, 0x8867A548CBC21F82uL, 0x95BC6B026285113EuL), (+1, -50, 0x8DCB34DFD77BD862uL, 0xC375B3DAEC1C8C1AuL)),
            ((+1, -47, 0xBEBF7B2DD41D4950uL, 0x307780FFB74604B4uL), (-1, -65, 0xB16479DE4041DCD2uL, 0xD3403C0C9B91A12BuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX52to56Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xE16C9A74F116EFE3uL, 0x48525E9C01A13DFDuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xB795C7314271CDDFuL, 0x04086D65D15F2E90uL), (+1, -5, 0xEAF3B0D3D408FBD8uL, 0x31BC325C4EB0A4B2uL)),
            ((+1, -2, 0xAEBF576B19AA3FFAuL, 0xFE4F14963B956F09uL), (+1, -10, 0xA559D17771CDDA13uL, 0x7ACB008C3309F113uL)),
            ((+1, -7, 0x81675F3EECE96AD6uL, 0x47E05117458FD61FuL), (+1, -17, 0xDF169CD60D3922F3uL, 0xECD5B4112B47C703uL)),
            ((+1, -14, 0xBAB25E9478836ED0uL, 0x63B7096CA0446C8BuL), (+1, -24, 0x92A7203017CDB3CDuL, 0x04DE7FA4106F3326uL)),
            ((+1, -21, 0x865FCC326E5C4BE1uL, 0x6DC13DC7612E7938uL), (+1, -33, 0xA71D8E8E91A4E6C7uL, 0x66301E958FAB9712uL)),
            ((+1, -30, 0xAE974F1767FC6736uL, 0xA142021866469BB6uL), (+1, -44, 0xDF3E2CF206B91558uL, 0x48E1DC09599E3DC7uL)),
            ((+1, -40, 0x92B0E4898E740D90uL, 0xD55BB6FEBA0957FDuL), (-1, -58, 0xAA2C649AF09B3154uL, 0x4117D15C81BE8D9AuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX56to60Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xD85D1CF79131EB54uL, 0xEAB7F20A51B34ED2uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xBADCE4878E579241uL, 0x01E947FBFA46C4D2uL), (+1, -5, 0xDA3A181458F79E5DuL, 0x7E64FEFE014C25C4uL)),
            ((+1, -2, 0xA5302B21AEE9A8ABuL, 0xCF0989D36BD1913EuL), (+1, -10, 0x8EAB43762C0A60CDuL, 0x7907BCCBCA620E1DuL)),
            ((+1, -8, 0xE31969FF548AA60AuL, 0xA3C99A1341C19FB2uL), (+1, -17, 0xB2D877F7298EF8ABuL, 0x704676E218D80F22uL)),
            ((+1, -14, 0x980CDB59B0615327uL, 0xD2EFA822716D85E2uL), (+1, -25, 0xDA8844AA251F7849uL, 0x5E84F50AD14FF6FFuL)),
            ((+1, -22, 0xCB21D18A270D6CE9uL, 0xB16D3C43DF943916uL), (+1, -34, 0xE788222350F359A4uL, 0x95214C12CAE12751uL)),
            ((+1, -31, 0xF4EE987F5982D08BuL, 0xA5DEA98DB6DD0587uL), (+1, -44, 0x8FE8511456B4B11EuL, 0xFAEE461C74086C41uL)),
            ((+1, -41, 0xBEF780D5BF6BF581uL, 0x8AEECE4E8578F2B3uL), (-1, -59, 0xCA1FF683B31D1A62uL, 0x9226889AA71EBD81uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX60to64Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0xE776F87F23DE7992uL, 0xBC8F141BE7B5AF59uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xBCFE95F35B37D6EEuL, 0xE81DC22577417AE2uL), (+1, -5, 0xCBB9641224B7BF83uL, 0x4EEFF7DD5C10F341uL)),
            ((+1, -2, 0x9C6E92D496EA5704uL, 0x4BE7DDC584BF6785uL), (+1, -11, 0xF8B4722C07F82DF9uL, 0x1035FC5A12193CCBuL)),
            ((+1, -8, 0xC8DB3FB38BD0CB37uL, 0x32EAF4DE1C3FF750uL), (+1, -17, 0x91917F7038BA8FB1uL, 0x479F3DB385A647D2uL)),
            ((+1, -15, 0xFB0785F5B487B364uL, 0xF7382B05B0045AF7uL), (+1, -25, 0xA623652A53210851uL, 0x2D1F6D3E934F8FABuL)),
            ((+1, -22, 0x9C75495654229F38uL, 0x492ABA227DB759FCuL), (+1, -34, 0xA4780F0CE7B458DFuL, 0xE62CEE8105CEF197uL)),
            ((+1, -31, 0xAFFEDFEDD8CC8B70uL, 0xA23F5CB9B48FBB0AuL), (+1, -45, 0xBF2DBC4053EA0B4BuL, 0x9201A273FF34F528uL)),
            ((+1, -42, 0xFFFC0400837FED0FuL, 0x8AEF1AC35C1A1E9CuL), (-1, -60, 0xF8C4F8D45EC288A9uL, 0xE061E090A367B4ADuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX64to68Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xFEC1C0DC846DF4B4uL, 0x25B1F0E96CD53983uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xC11FA0F6F8D15106uL, 0xE0F69113CD7D84ACuL), (+1, -5, 0xBF074B4C2D463297uL, 0xD518590D263F2A9FuL)),
            ((+1, -2, 0x953E21B1144E9CCBuL, 0xF34C27F319E6BB9DuL), (+1, -11, 0xDAB2B1378CC0D951uL, 0x4D3E08812FF0BFA9uL)),
            ((+1, -8, 0xB35AA44A7DEB5461uL, 0x61BDC12DEBDB75DEuL), (+1, -18, 0xF01E95E9BC27353EuL, 0x598490A65603B65CuL)),
            ((+1, -15, 0xD1EDF71CA374885BuL, 0xD5257C136C3AB86DuL), (+1, -25, 0x808BD6200A982CBCuL, 0x37BCFCCE780129DCuL)),
            ((+1, -23, 0xF521FB6F2FD807AEuL, 0x0F8E4632E90A5BA0uL), (+1, -35, 0xEED606E308DC9929uL, 0x538F170E45C1E32BuL)),
            ((+1, -31, 0x8129DC7E830B377FuL, 0x8E92A0D4E70CAA9EuL), (+1, -45, 0x825A68A2DA14777FuL, 0x8D261F67973A6C6DuL)),
            ((+1, -42, 0xB0006130111CECC3uL, 0xD1E1888467E3BF8AuL), (-1, -60, 0x9DEA040B74DF7494uL, 0x869D8D545B7B2CE7uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX68to72Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0x831123617D03758CuL, 0xAED071CB0884D331uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xC2A36A02E26E6979uL, 0x58FF5536CD804760uL), (+1, -5, 0xB3D26F3D91C24B22uL, 0x87AF7F0D375FD906uL)),
            ((+1, -2, 0x8E1D0494C25A43ECuL, 0xF3C60ACFE2AF04F2uL), (+1, -11, 0xC1CF93C134BD2429uL, 0xB8FC14120ED9D96CuL)),
            ((+1, -8, 0xA0E37650ED3D003FuL, 0x3B9EBD175FEEC3DBuL), (+1, -18, 0xC85BA89018AE705BuL, 0xBD933C6E6AF16701uL)),
            ((+1, -15, 0xB1441B7B094EA5D6uL, 0xE394D71BEDA2706CuL), (+1, -26, 0xCA0523437851FBC4uL, 0x1F541CB9258D7D76uL)),
            ((+1, -23, 0xC2C78BFB052553DBuL, 0xBD4307AD7202BF69uL), (+1, -35, 0xB0C9C9D8997DF75CuL, 0xE9A87B28BFB135B3uL)),
            ((+1, -32, 0xC11CBB6D5D9925FBuL, 0x90066DEF361FA365uL), (+1, -46, 0xB5E5A33C351265F8uL, 0x68A9485C189E0B93uL)),
            ((+1, -43, 0xF783DB17188BA057uL, 0x648BFBD3A117F139uL), (-1, -61, 0xCE081CD6AF27C04EuL, 0xCFF15893EC12D02BuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX72to76Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x9A5F06F27C4FA9AEuL, 0x9E2BA645B932B4BDuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xC5EA9D4C2471A805uL, 0x2CBDE61D555D5697uL), (+1, -5, 0xA9DB76EEA89F8381uL, 0x60EAE6A7B9E01FD7uL)),
            ((+1, -2, 0x88281C2127167DC4uL, 0xEDEB9F5F6166C77EuL), (+1, -11, 0xACF117C8B0E56E10uL, 0xEBDAC594ECBFB2C8uL)),
            ((+1, -8, 0x916E1238C6FD0ABDuL, 0x5F12388A76404D6BuL), (+1, -18, 0xA8E97BA343D4B250uL, 0xBFB40C936D850E99uL)),
            ((+1, -15, 0x9738DA8FA92CF8F6uL, 0x9FB0DEABC02F5A88uL), (+1, -26, 0xA0EF7AE1EAB4721EuL, 0xEB99A46E57E39457uL)),
            ((+1, -23, 0x9CD558E229E167A6uL, 0x42AA97E8F3F88AAEuL), (+1, -35, 0x851D3F49FBD77899uL, 0x64B7BDFC2DAAD4EFuL)),
            ((+1, -32, 0x92C38DA4DDBD2D3FuL, 0x26BB3C7CC3563F08uL), (+1, -46, 0x8186D1B32ABDFF3DuL, 0x61FACB28571AB645uL)),
            ((+1, -43, 0xB18ACF9185D34E01uL, 0x3E1EF1BE6BDE4C4BuL), (-1, -61, 0x89B322BE2D006FECuL, 0x58D2E5501FE4E912uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX76to80Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xCD5457F541204CB6uL, 0x5C66935A642A0AD6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xC8222E9173D9F936uL, 0x36F4D018E8AA31DBuL), (+1, -5, 0xA0F054F8A657222DuL, 0x3D811E02EF8592CFuL)),
            ((+1, -2, 0x828382D68FB3CA01uL, 0xFCE772928DCB7968uL), (+1, -11, 0x9B452F228CB4BF4EuL, 0x85AB965335E375D7uL)),
            ((+1, -8, 0x840E219D774B6223uL, 0xD5C05805595CDB4EuL), (+1, -18, 0x8FB7779B2B959CA0uL, 0xC63F8B5967F3923FuL)),
            ((+1, -15, 0x820D3D0A0EEC0ABFuL, 0x5EAB8522185BD71DuL), (+1, -26, 0x81C8AF1F302CAD7CuL, 0x126E1E6B00039DDEuL)),
            ((+1, -24, 0xFF758D8E96D10995uL, 0xF2D62162391EA3AEuL), (+1, -36, 0xCB89D8CD05E4E7DBuL, 0x3B7E667513EB3F6AuL)),
            ((+1, -33, 0xE25E01B8DA4F084FuL, 0xF489670706D30AB9uL), (+1, -47, 0xBBDBE1DCB7AE999DuL, 0xFFE5BAD9B418EC9FuL)),
            ((+1, -43, 0x81A29F149B66129DuL, 0xFD29DD7A89481E06uL), (-1, -62, 0xBC156CD2EB250C61uL, 0xC49B7C92A54C847BuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX80to84Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x81432ABEBCE2AB3EuL, 0x015AC5CAF4F6A3E3uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xCA9DA215DB9C4DC2uL, 0xD1B28DD2D38BF7F2uL), (+1, -5, 0x98E8F74B78CF2630uL, 0x779BAC72F8E0AE44uL)),
            ((+1, -3, 0xFAE4D0B3E9B0EFA4uL, 0x93AC8ADB4DAA035AuL), (+1, -11, 0x8C2CCB51B954D803uL, 0x2AD1407636E607AAuL)),
            ((+1, -9, 0xF10DF4B8729048FAuL, 0xDD32A5345DCFF883uL), (+1, -19, 0xF69603FF9CA857D8uL, 0x1FA1A49278A74F35uL)),
            ((+1, -16, 0xE16DEB73396DA061uL, 0x211E98EF1C22FD0EuL), (+1, -27, 0xD3A2D4C4602459EFuL, 0xD489CB57231C3CB2uL)),
            ((+1, -24, 0xD23D02144FFD2C8AuL, 0xDA2780D24ADFE960uL), (+1, -36, 0x9DC160B272CDBA6CuL, 0x4EEAD84FC10B8478uL)),
            ((+1, -33, 0xB0E4621A7876949FuL, 0x09940939F53E365AuL), (+1, -47, 0x8A7A305D45DFB5B6uL, 0xDAF1A289F4DE7BE2uL)),
            ((+1, -44, 0xC05B95907F917E7BuL, 0xC368D9FC814057ECuL), (-1, -62, 0x82F864205C602A18uL, 0x45D97A00A04AF6BFuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX84to88Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xE6389198AD4FBFDEuL, 0x96573ED79FDF45EDuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xCD4D54FDAFF8F124uL, 0x0F1AA0BD8CEF2782uL), (+1, -5, 0x91A4E889454B8CCDuL, 0x9341CAFD4F5DC99EuL)),
            ((+1, -3, 0xF1BB0425F5D3F137uL, 0x6CD919CA2359D666uL), (+1, -12, 0xFE5B6601C6556395uL, 0x54C04779FC6B020FuL)),
            ((+1, -9, 0xDD06A47335FBB805uL, 0x8837BDE42F4DF543uL), (+1, -19, 0xD520326713D9CE19uL, 0xE0B555A15DA45ADFuL)),
            ((+1, -16, 0xC4BF1D3B16FF5B08uL, 0x05BBB0232389DC69uL), (+1, -27, 0xAE465FF440636854uL, 0x29B8CD0512421808uL)),
            ((+1, -24, 0xAEA977C6B98AEEBEuL, 0x075AD9753D774499uL), (+1, -37, 0xF7953D895A748BB7uL, 0x2E3C3CE1DDDE9962uL)),
            ((+1, -33, 0x8BE3389122617CAEuL, 0x090A6563B7233E71uL), (+1, -48, 0xCF30F0295AEEA5EDuL, 0x156E22DDDC50EA56uL)),
            ((+1, -44, 0x90C99075F9AFEACEuL, 0xC8F094A7C8470FF5uL), (-1, -63, 0xB9A0895B11DB398BuL, 0x611AF2AB6331DDDFuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX88to92Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x91F9C278AEA501B1uL, 0x9F7FC2962AC8D841uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xCF0EF2E86892D9D3uL, 0xA65D7DE1154D4ECEuL), (+1, -5, 0x8B099657E3DEA14DuL, 0xC12742F35B249EA2uL)),
            ((+1, -3, 0xE8F0AF115CC036B3uL, 0x73BA5D0D3F47E442uL), (+1, -12, 0xE7D174DEEA786528uL, 0xC8F173114A1A791AuL)),
            ((+1, -9, 0xCB52BDFE4DE84F12uL, 0xC4EE7823921BBD31uL), (+1, -19, 0xB9749CF853369905uL, 0x742D3B1E74AB402BuL)),
            ((+1, -16, 0xACBB78B19187B53BuL, 0x81C70DE7045AB82CuL), (+1, -27, 0x90CE6B71CB4EA786uL, 0xC303170301A2B17CuL)),
            ((+1, -24, 0x9254362D14FFBF8EuL, 0x85CF10C8658BC46FuL), (+1, -37, 0xC478B190D806A32BuL, 0x7C132B67F65C9F6DuL)),
            ((+1, -34, 0xDFA515C6C2B51C83uL, 0x3CCDAC6476D34ECBuL), (+1, -48, 0x9D17D11F8140AC6AuL, 0x8E1A69EB4F43F3F2uL)),
            ((+1, -45, 0xDCD5E5867A06D624uL, 0x85FE4DFCFE49A0A2uL), (-1, -63, 0x85A85531C9A4073FuL, 0x6BDA4B5806CF211DuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX92to96Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x8149A6810087BAB0uL, 0xE75994E5C5AA513BuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xD107039569660C5BuL, 0xE523D44D972BA375uL), (+1, -5, 0x85010A99D58694F4uL, 0xC76AA839435D2BB4uL)),
            ((+1, -3, 0xE0EF93D3575EBD60uL, 0x1BF559CB1DC86CB4uL), (+1, -12, 0xD425C4B39D82FB88uL, 0x64F3D96D2540AE70uL)),
            ((+1, -9, 0xBBC2CE297C38B795uL, 0x072379DD5CB14318uL), (+1, -19, 0xA2600C21D4B9E5E3uL, 0xDEAC1117BECF6C6CuL)),
            ((+1, -16, 0x9888174E4A1102F8uL, 0x5C0206983C207822uL), (+1, -28, 0xF29F76E188CC3352uL, 0x1D5C6517EDDE26AFuL)),
            ((+1, -25, 0xF71BA22F2D9DAF1AuL, 0x60EB98CDE483AE8CuL), (+1, -37, 0x9D839B0E5403C34DuL, 0x56F7A381880787E1uL)),
            ((+1, -34, 0xB48C629523DBC21AuL, 0xF2B2025844DC132EuL), (+1, -49, 0xF12590543C45F200uL, 0x0AC2F46BDEEAD277uL)),
            ((+1, -45, 0xAA6FAEA301ADFD41uL, 0xCCEB3814C7556E5DuL), (-1, -64, 0xC34A17B07B4A20B9uL, 0x0714637B5CD1683CuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX96to100Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xB133B5F2A945B9C3uL, 0xC63DD77E87C101C7uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xD32AD29BC4AB7F13uL, 0x9B4CEAC7FAFA94E9uL), (+1, -6, 0xFEF1EC460006D0FEuL, 0x91B0AF7887F4EACCuL)),
            ((+1, -3, 0xD99BCCECB8BB9459uL, 0xF4B3AD513ACC9B7FuL), (+1, -12, 0xC2E0D7FB1A533AF4uL, 0xDD8D24230FBABA37uL)),
            ((+1, -9, 0xADFFCD9F86F0F88CuL, 0xD3B165A06E1DDC65uL), (+1, -19, 0x8EF8A1375D18E705uL, 0xDA82150976127F13uL)),
            ((+1, -16, 0x8768D33638DDD6B7uL, 0x0C364FF7AC114938uL), (+1, -28, 0xCCC9DF694C9A2B80uL, 0x0D787D3D6AE0DF5CuL)),
            ((+1, -25, 0xD2252E4F8988DEEDuL, 0xEFABDF985930407DuL), (+1, -38, 0xFEF019147E925989uL, 0xBE24BF12167568BEuL)),
            ((+1, -34, 0x93143DD35AE83C44uL, 0x7C49909F13001C2AuL), (+1, -49, 0xBB2B71D73A15F16DuL, 0x4E96862CFA26FE9EuL)),
            ((+1, -45, 0x84FC183D68CB39DDuL, 0xC6318B9652F4CD33uL), (-1, -64, 0x90942019DE162085uL, 0xEEAF1AF769016272uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX100to104Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -4, 0xF816BA60730FCA2AuL, 0x9BCD57C14C2A0816uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xD47CEDC55736D231uL, 0xB6C16AEED3221845uL), (+1, -6, 0xF4C3EC4F57A80F93uL, 0x9789EDC011B35E7EuL)),
            ((+1, -3, 0xD284AE9290F793D1uL, 0x170320760989D2CAuL), (+1, -12, 0xB3A28B54D4AD5409uL, 0xAA8E451ABA9FB013uL)),
            ((+1, -9, 0xA1A3F1098F65C2BEuL, 0xB68F3D271D0A8A4CuL), (+1, -20, 0xFD1463DFEA9E7632uL, 0x32BC1CE18206A1BCuL)),
            ((+1, -17, 0xF1819E0C58B80680uL, 0xCE3B2CABD2FC4147uL), (+1, -28, 0xAE0CCF27FA9F1570uL, 0xA53B7C0BDF9AFA02uL)),
            ((+1, -25, 0xB3DD37368165F6BDuL, 0xA967CADE35B32CE4uL), (+1, -38, 0xD017652A36A0A6B1uL, 0x7AE1847498C043BAuL)),
            ((+1, -35, 0xF19DCECF8ED223F3uL, 0xAD4A344334CAF1B4uL), (+1, -49, 0x92C6A83A09392D33uL, 0x1F76E820FCB37A0AuL)),
            ((+1, -46, 0xD19EF4A28BEC6E5EuL, 0xE56F30C5F1190AA0uL), (-1, -65, 0xD8B382367550C8F0uL, 0xDC1B4588EA31F2C4uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX104to108Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xC839B6B871BD2C09uL, 0xAC57B69D6034EBDFuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xD6E92DDB1E3EDD98uL, 0x6DF75A7FDEED1BBCuL), (+1, -6, 0xEB5E0940098A5CB0uL, 0x120A9FCECCF3383EuL)),
            ((+1, -3, 0xCC51B68496923B9AuL, 0xFB383EB95CDA5D50uL), (+1, -12, 0xA61CD086AE106AEFuL, 0x2C0128D5D7CFCF58uL)),
            ((+1, -9, 0x96B8E31E71F9CDC6uL, 0xAC1649718FF9C166uL), (+1, -20, 0xE110DB9F9B47A3FEuL, 0x08E05AD9A4B9AA42uL)),
            ((+1, -17, 0xD869BF519FAE5C1DuL, 0xAA6D8AD25BBE0F41uL), (+1, -28, 0x94DE5A595FC11AE9uL, 0x90E7ADBE4831FFE8uL)),
            ((+1, -25, 0x9AE78A0E54246F9DuL, 0x45487CBAA359C9D8uL), (+1, -38, 0xAB3487FFE2EB0C33uL, 0x473A2D3A0EEC8811uL)),
            ((+1, -35, 0xC7FDEC4C6E558395uL, 0x163906B4F8D8361DuL), (+1, -50, 0xE8646A57AF64F1BBuL, 0x3A7A520BD00155A7uL)),
            ((+1, -46, 0xA6BF51B80E7A3D15uL, 0x65DF9C65F3CCAE0DuL), (-1, -65, 0xA43D434E86F94E38uL, 0xE1E8A64DD1AE45C1uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX108to112Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xAA8C4CFA771F97C5uL, 0x9433BC6745286D32uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xD8883E3296869306uL, 0x429313DEB618036CuL), (+1, -6, 0xE2AA11078D939E0AuL, 0x59DD70778EB4C7B9uL)),
            ((+1, -3, 0xC644C52EFB2A2FCAuL, 0x56D393E7FC79DDC1uL), (+1, -12, 0x9A0FBFB44AD90197uL, 0x03B6E0A95A565C56uL)),
            ((+1, -9, 0x8CD2FC966C38D937uL, 0xAC44CB151433EF19uL), (+1, -20, 0xC909E77EE2914AB8uL, 0x4E14192880EEBBF3uL)),
            ((+1, -17, 0xC2AB30B6C6C6E153uL, 0x476B432E5D4A24CBuL), (+1, -28, 0x8014BCCE3FE0A1BAuL, 0x2FE7B8C8B4D6DD11uL)),
            ((+1, -25, 0x8623EADFC225E4A9uL, 0xABD20BDF3B2A3FC5uL), (+1, -38, 0x8DE4DFC79D782E26uL, 0xD686467122DF075FuL)),
            ((+1, -35, 0xA6B55DD8A9862905uL, 0xE08A670F4FC876FCuL), (+1, -50, 0xB9985144840688D7uL, 0xDF1BF811CD6CAAF1uL)),
            ((+1, -46, 0x85C8C20BF37DDE47uL, 0x116605FE14A20AC8uL), (-1, -66, 0xFB8FCA3362CAAD7EuL, 0xCD150EE79A61FD7CuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX112to116Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xC3DA5D4607E5A019uL, 0x6B5C1D16F13A15BDuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xDA483CE5DFB5CF3CuL, 0x5551942345E2C124uL), (+1, -6, 0xDA94FBD90AB8CDCAuL, 0x8449B15B1EC8755AuL)),
            ((+1, -3, 0xC0A87F0ED82DEA94uL, 0x670D916A1FC185B9uL), (+1, -12, 0x8F469F11A0669C6CuL, 0x60E5F5B77B9C9892uL)),
            ((+1, -9, 0x83E9D356284BBFFAuL, 0xFCC857683C0FBEC3uL), (+1, -20, 0xB450411192DAEA5CuL, 0xB961337F98437BCBuL)),
            ((+1, -17, 0xAFC9667704A2DEE4uL, 0x0A5AB37BFF9F1F1AuL), (+1, -29, 0xDD98E0A22D665587uL, 0x9D62B7624240C3BDuL)),
            ((+1, -26, 0xE988024036A09BEAuL, 0x8E1B08B40E94014BuL), (+1, -39, 0xECCEAA1F63ED341AuL, 0x0E2DC1B7928F3B71uL)),
            ((+1, -35, 0x8BE14F5700552BEAuL, 0x61B773D7F4C2461AuL), (+1, -50, 0x956E9287E5AF0781uL, 0xCC4D34D1EB0FC257uL)),
            ((+1, -47, 0xD863470BE4D62274uL, 0x46FF2D8DDFEC19BBuL), (-1, -66, 0xC28681EF6FB167C0uL, 0x76F85661CF66747EuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX116to120Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -4, 0x9155ED7700B163A4uL, 0x5DB54FE89ED805E7uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xDB508AE75B1BF901uL, 0xC4732D9416359017uL), (+1, -6, 0xD30E60B973140CA8uL, 0x5A3769D98D3F5E6CuL)),
            ((+1, -3, 0xBB2D495E036689F8uL, 0x601BB6718C2B6C1EuL), (+1, -12, 0x85959E7118E8BC3AuL, 0x3DD29389414EAF9EuL)),
            ((+1, -10, 0xF78F90B3B4B13A2EuL, 0x4C6E8F53D7D92721uL), (+1, -20, 0xA2578C571EE09D6CuL, 0x8FC3E1DE782AF7D1uL)),
            ((+1, -17, 0x9F427DE997F15D20uL, 0x4E328A7016F5505FuL), (+1, -29, 0xC0ABB8330D16AB8EuL, 0x977F796A654B46AEuL)),
            ((+1, -26, 0xCC3EB4894CFA0206uL, 0xCC22C2C9F7D1BE72uL), (+1, -39, 0xC6DBA9E8EFD01651uL, 0x84D2F52346D25B38uL)),
            ((+1, -36, 0xEC2B83514B764E9EuL, 0xC862735F31E241C7uL), (+1, -51, 0xF2753ADB7C790CD7uL, 0x9558C7C7B4B26FA8uL)),
            ((+1, -47, 0xB04BCCD0E61D0B9AuL, 0x2E98980C7ABF0313uL), (-1, -66, 0x97C742F7804CFD4AuL, 0x856D8DABAF26E54AuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX120to124Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x93A7470C143BC7C2uL, 0xE1A7FC9D266B98F4uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xDD499D61F2407AF8uL, 0x04E24BB525F54F61uL), (+1, -6, 0xCC0805E3E8BDA80FuL, 0x5BF5CC95E8169FF0uL)),
            ((+1, -3, 0xB65233A747BFB059uL, 0xE59E6788EEF303E8uL), (+1, -13, 0xF9B02F4BA3040E55uL, 0xED727DE4E9D5822CuL)),
            ((+1, -10, 0xE8F6F139BFF0B244uL, 0x2D146541FED19A88uL), (+1, -20, 0x92AE7D8840F3BDBFuL, 0x866EE914670002AAuL)),
            ((+1, -17, 0x90D066F6BBA5B6C2uL, 0x75DB15DD8E570F14uL), (+1, -29, 0xA8506F8E34281A55uL, 0x3B4951780BA219AEuL)),
            ((+1, -26, 0xB3761C9BB76ABEF6uL, 0xA062A7AEBE8305A9uL), (+1, -39, 0xA7FA6E1D4104F4FDuL, 0x8910F6A5DBE02650uL)),
            ((+1, -36, 0xC88481C5FF4BBAE7uL, 0xA902C8FA386BAC6BuL), (+1, -51, 0xC61729004084F910uL, 0x9F919AEF5E2F9CABuL)),
            ((+1, -47, 0x90A04A5BBEB7E11DuL, 0x4ADE8FA12938866EuL), (-1, -67, 0xEED7B40C54EAA256uL, 0xFB2BF6CD0A920EF6uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX124to128Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x8D32A082970CAE7DuL, 0x56F999CE1382A851uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xDE8F82E46A1CAE11uL, 0xB4ABADAE4A1B485AuL), (+1, -6, 0xC57586BE4BE893FBuL, 0xB9E3797AC5A6836DuL)),
            ((+1, -3, 0xB18BDFA8C893EBF7uL, 0x83AA02BEF4CECB2EuL), (+1, -13, 0xE9DE642F046ABC28uL, 0xF3F17E44FD1F0B2BuL)),
            ((+1, -10, 0xDB8C6F6117D86B3FuL, 0x6334E5EBEB0E0513uL), (+1, -20, 0x84F8F3618492B895uL, 0x13339A8116164D95uL)),
            ((+1, -17, 0x840DDE0B1AA5126FuL, 0x1CFE790785C58A4DuL), (+1, -29, 0x93B0155A32840AF6uL, 0x94E9D0CB038AF424uL)),
            ((+1, -26, 0x9E55849B1F83CB31uL, 0xA251E96E10251BC4uL), (+1, -39, 0x8EAD9517E5FA8DB2uL, 0x0DD5CF60022A2F2DuL)),
            ((+1, -36, 0xAB26D73A15E0B323uL, 0x68B2575F715E7FABuL), (+1, -51, 0xA2E9A72A63B5A7ADuL, 0x94B585BFAFD4ED70uL)),
            ((+1, -48, 0xEED3678F8D5CB164uL, 0x1BBC5ADB72F09BC7uL), (-1, -67, 0xBD66EAACF24B25EDuL, 0xD71AF97F4535565BuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX128to132Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0xA59A7950C9A2D808uL, 0x979AFB48FA61182AuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xDFF0B5EA07FB1483uL, 0x4531599FEFB7D34CuL), (+1, -6, 0xBF4C0AA896633B4BuL, 0xB87755E1914DFC4FuL)),
            ((+1, -3, 0xAD13F950BB360CEFuL, 0x52F9C9BA4D2A0DA0uL), (+1, -13, 0xDB81A25DD73BAE7DuL, 0x615881AE00587A2AuL)),
            ((+1, -10, 0xCF4F681275349503uL, 0xED2AA1DC9090B6EBuL), (+1, -21, 0xF1D6FBF983361770uL, 0xF98F8CCB60A0AE76uL)),
            ((+1, -18, 0xF18BE034128253FCuL, 0xD1885E4C77C72991uL), (+1, -29, 0x82206A3B18AB64E6uL, 0xCD678D426E875406uL)),
            ((+1, -26, 0x8C3F7A10A7813876uL, 0xE72D8B6599F7B221uL), (+1, -40, 0xF3A1C493D24BBD8EuL, 0x1352CEEC4148DC03uL)),
            ((+1, -36, 0x92D15364D4E6A8A3uL, 0x483FD4C4364D12E3uL), (+1, -51, 0x86CFF280EF401F4AuL, 0x33868DDC754268F1uL)),
            ((+1, -48, 0xC6628A284DB416D6uL, 0xF812B00E468932A0uL), (-1, -67, 0x974D3299695895B6uL, 0x62997A9C0E18FC5FuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX132to136Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0xEA3ADBDC2A61502DuL, 0xCF68BF505C2801FAuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xE1622ABDB40637C6uL, 0x64164C5BF6EED07DuL), (+1, -6, 0x9A62A3B6ACED0A26uL, 0x42E7593777FDF812uL)),
            ((+1, -3, 0x8D7C504746C92DFCuL, 0xDD82CE9CA24DB299uL), (+1, -13, 0x8707B6133A34A445uL, 0xAF277E1C8439EAF4uL)),
            ((+1, -10, 0x828C24F260DB2054uL, 0x9C1DA7B33F990CA6uL), (+1, -22, 0xCEC5997498864E2BuL, 0xA433182519E84F02uL)),
            ((+1, -19, 0xD74E668A4A6B8D6AuL, 0x43113F2A20D16819uL), (+1, -31, 0x82602D8F235E5AC3uL, 0x0DA01F772385B935uL)),
            ((+1, -28, 0x97BA83C90F8CEE36uL, 0x3D701C3945797776uL), (+1, -43, 0xBCA7D5FE629DDE80uL, 0xD1E7137CDD318C5DuL)),
            ((+1, -39, 0x8678C0D19170B61BuL, 0x11AE49F3BD6D2799uL), (-1, -58, 0x8D69063918E155A2uL, 0x972C564DC99F38EAuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX136to140Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xF1510D1643FC4954uL, 0xBF3F53CEE8C3E92BuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xE2E79EBA05D2E767uL, 0xDF183FDDA793176BuL), (+1, -6, 0x95D9FF6D1F5D7791uL, 0x376DE37346CB83BEuL)),
            ((+1, -3, 0x8A2B38E4E70CE52CuL, 0xCC4BB51C347375A3uL), (+1, -14, 0xFE70C85164738833uL, 0xA0700F3E0C6B1582uL)),
            ((+1, -11, 0xF762FE6F13E8F320uL, 0x90847ED7D35EDB27uL), (+1, -22, 0xBD1BA2F194404D96uL, 0x00F1DB99EC3F0868uL)),
            ((+1, -19, 0xC5EFB31922DBDDFDuL, 0x5E0175D6AAA2B53BuL), (+1, -32, 0xE783578F6252EFCFuL, 0x58B9F083EE600AE5uL)),
            ((+1, -28, 0x8755D6ED9352F510uL, 0x2234E90BC550BA1EuL), (+1, -43, 0xA2A5EB9B42BE00A2uL, 0x04550E5AF5746364uL)),
            ((+1, -40, 0xE8B910EF1FBDBC15uL, 0x2356C972182A3BD9uL), (-1, -59, 0xEBD9139C3FE2AB70uL, 0x6D0DBB9774049EB0uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX140to144Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xE2604D465E960256uL, 0x0EA0F657AFEA23FBuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xE4798ECA1A68ADE4uL, 0x30CED3B893A29802uL), (+1, -6, 0x9193962A18AFB454uL, 0xA138D32BD611F79DuL)),
            ((+1, -3, 0x87096FD05E16BA02uL, 0x365DA736BE2F6955uL), (+1, -14, 0xF0234FF6C394BA41uL, 0x4D49040E55BD0346uL)),
            ((+1, -11, 0xEAC55D1F81A37CDBuL, 0x0C4101F85C92D41BuL), (+1, -22, 0xAD66775E3F2C30B7uL, 0x3DC9B37ACF9C622DuL)),
            ((+1, -19, 0xB6690D9F61BA1F36uL, 0xCB308C0855C0BF11uL), (+1, -32, 0xCE42CC4E713BD062uL, 0x99CBADBBBDF5F8C1uL)),
            ((+1, -29, 0xF238DA58DCC17D68uL, 0x96988B7E0C9DAFA0uL), (+1, -43, 0x8CD3DEB726657CBAuL, 0x5179844A1A700872uL)),
            ((+1, -40, 0xCA38770FEA5CD24BuL, 0x0E653BF3C3C25D3EuL), (-1, -59, 0xC5B64840501A1692uL, 0x2DC5AD1D31A94456uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX144to148Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xECEB928D6E571DC1uL, 0x78F4753A75AF9857uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xE5886FB2220E83FAuL, 0xAEFD4CED327795D6uL), (+1, -6, 0x8D89E4E41427E0EBuL, 0xF2BDE1438E50B1ABuL)),
            ((+1, -3, 0x83F6726A122F853FuL, 0x9FC8E6F65C314641uL), (+1, -14, 0xE302244FCB3713B3uL, 0x5F375D4BBABBA5AFuL)),
            ((+1, -11, 0xDF0DEE406D3F3162uL, 0x03F79D02E9FFA6ADuL), (+1, -22, 0x9F62A25CEA8B5AD8uL, 0x01F23BCDBCA95021uL)),
            ((+1, -19, 0xA8772D6DCAFCFB8DuL, 0x974C72A9B81C4891uL), (+1, -32, 0xB85C37FD96BB0962uL, 0x21701D529E300743uL)),
            ((+1, -29, 0xD96E2B123115F186uL, 0x8F466E0C2FEC9F01uL), (+1, -44, 0xF4DB44D2E75B78F8uL, 0x6CC00AF594FD3C09uL)),
            ((+1, -40, 0xB068835F60D332C2uL, 0x0ADAF5FBE090CA27uL), (-1, -59, 0xA690DA5F41995659uL, 0xA8E5F176A3FA1744uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX148to152Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0xCEEA544F9F1B01D4uL, 0x5AC22E04EA7D4FAAuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xE6A7B29C359831E6uL, 0x5D21BB729B5121ECuL), (+1, -6, 0x89B800E9E4FCDFACuL, 0x3D37B8A3CA359B52uL)),
            ((+1, -3, 0x810DFF4AA449B46CuL, 0x29EA6310AAE13F4AuL), (+1, -14, 0xD6ED4E6254991A35uL, 0x810B605AEA696A54uL)),
            ((+1, -11, 0xD43A0F378698746DuL, 0x4D62FA36654D58B5uL), (+1, -22, 0x92D74D4A97CA93A8uL, 0x0FF3A6127B717041uL)),
            ((+1, -19, 0x9BECEE9DC937CB55uL, 0x06B33541CF2DD18DuL), (+1, -32, 0xA54A8196045A2DBDuL, 0xCCD2074DD33B7DD4uL)),
            ((+1, -29, 0xC3C01A658F309EF0uL, 0x615C8F775D07A01FuL), (+1, -44, 0xD5AE320E9C3C2DA9uL, 0x98881062DD984579uL)),
            ((+1, -40, 0x9A76AC608BF8A7CAuL, 0xC73A86F9D0320DB7uL), (-1, -59, 0x8CFC2B69AB3DF436uL, 0xB78712A7F555EC00uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX152to156Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -4, 0xC8859B902E19EFC0uL, 0xD8DE43AAF43706D2uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xE7D53B89D093F7E2uL, 0x846DD36512C7BFB7uL), (+1, -6, 0x861983DDBBB12F9DuL, 0xB6A6354F50B84B80uL)),
            ((+1, -4, 0xFC98FE4A05BFEAA4uL, 0xA65121EF0E43E105uL), (+1, -14, 0xCBC8FBB6E05395F0uL, 0x2163A06ACBC00B95uL)),
            ((+1, -11, 0xCA32D532FCEED131uL, 0x47504349E0407C03uL), (+1, -22, 0x87945908FC784CEEuL, 0x37BB5A2D1C13E475uL)),
            ((+1, -19, 0x909DC6F9B194A351uL, 0x1C65455CBCB46E20uL), (+1, -32, 0x94A00AD6E22E6056uL, 0x1B100CA745EE2634uL)),
            ((+1, -29, 0xB0B9217A548CD53DuL, 0x7868201C0F272C0BuL), (+1, -44, 0xBB264FA2B1210C62uL, 0xF2F9B08165EBFC3AuL)),
            ((+1, -40, 0x87B9B5923FDF863DuL, 0x330046D2AC9D29F1uL), (-1, -60, 0xEFBA050512FA51E3uL, 0xC5AF48A2F76F037CuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX156to160Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0x95A50A217D0C41C7uL, 0x43209675567382EDuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xE90F308FB450F5B8uL, 0x6AFDCC900E499786uL), (+1, -6, 0x82AA7AC39CDFA054uL, 0xC526C7E3FD1C209CuL)),
            ((+1, -4, 0xF75D83BB1657CBEBuL, 0x3051BF96CBF526A2uL), (+1, -14, 0xC17CDD974493C828uL, 0x8D2BEE1513588FF0uL)),
            ((+1, -11, 0xC0E42F10FDE7823BuL, 0x3C50342BAB5786EBuL), (+1, -23, 0xFAE1B16A95631511uL, 0xAA09DFECF00AE946uL)),
            ((+1, -19, 0x8663AB2A0E92F0E2uL, 0x94EC4FFB25E14CB4uL), (+1, -32, 0x8602125B25AB82B8uL, 0xEE1DD98DABFFB00BuL)),
            ((+1, -29, 0x9FF7864602CB7EF8uL, 0x1E694B40F1448242uL), (+1, -44, 0xA479E7EAA39F24D7uL, 0xE8297FF3FE5F7FCBuL)),
            ((+1, -41, 0xEF516A3722F1329FuL, 0x63DF5CD9D05B7644uL), (-1, -60, 0xCCABBD54AF9E253AuL, 0x80A8204D9508DB0EuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX160to164Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xAF86A2999A271AE8uL, 0x8C621A99DE654D88uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xEA53F0C6EF3C3117uL, 0x1399A53F722A6D0CuL), (+1, -7, 0xFECEAF33528F13B9uL, 0x24B7FC11C3E3432FuL)),
            ((+1, -4, 0xF263E0AE5DCF881FuL, 0xC7044AF83E80015BuL), (+1, -14, 0xB7F3A40777F72A6FuL, 0xF733B912647AD45CuL)),
            ((+1, -11, 0xB83C7A305C6970C7uL, 0x7427ED03E7A9E413uL), (+1, -23, 0xE893B02DC19E6F68uL, 0x56B5C7A1AB2D30D3uL)),
            ((+1, -20, 0xFA3BF2C62A537E07uL, 0xD831F18C62346CDAuL), (+1, -33, 0xF24A29AD0A1D011BuL, 0x718656B308525650uL)),
            ((+1, -29, 0x9129A0852ED18CC9uL, 0x0DC0B69A46C1AA88uL), (+1, -44, 0x910571EABCE0CDF0uL, 0xF04B111683197DD4uL)),
            ((+1, -41, 0xD3A8927983FB21E5uL, 0x9DF19A8079C68ED8uL), (-1, -60, 0xAF70C7A0287EC510uL, 0x1E97FFD71C94C98FuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX164to168Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xAF2AD2E6C1254177uL, 0xB2748113E15BB149uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xEBA20CA51C3464F7uL, 0x7C4BD6AED00F5446uL), (+1, -7, 0xF899CA16D1597A8EuL, 0xA446F60787CFD4F0uL)),
            ((+1, -4, 0xEDA701125D1F8F16uL, 0x3D1DDBA30BE07748uL), (+1, -14, 0xAF1A8F23045D433FuL, 0x0C9555FAFC441F64uL)),
            ((+1, -11, 0xB02C294B62F9023AuL, 0x7BFF25041C6D684EuL), (+1, -23, 0xD802BB32B2202BC4uL, 0xE35F970AA7CF63FEuL)),
            ((+1, -20, 0xE9612FB513318F5EuL, 0x14AF409081E07C14uL), (+1, -33, 0xDB93E36CAF673DF7uL, 0x6F0345A4C27DCD64uL)),
            ((+1, -29, 0x840AE4CC22149060uL, 0xDA544F8E36064BA8uL), (+1, -44, 0x8043A0D7513EFEA2uL, 0x249B135E77FFB8CDuL)),
            ((+1, -41, 0xBBC2B571DC0F5A0DuL, 0xB505B736B013E822uL), (-1, -60, 0x96F4F37D92496334uL, 0x0285E06E261397E5uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX168to172Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0xAADEB17C31FE4714uL, 0xEF6AF59CE19DF663uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 2, 0xEC7EE741BBA9109EuL, 0xCF6933FC74A4592DuL), (+1, -7, 0xF2B077CCBB167E68uL, 0x507CF9BAD5ECFD93uL)),
            ((+1, -4, 0xE8F89EA0F99DC8D3uL, 0x4166EB19A460316CuL), (+1, -14, 0xA6E112AA39E5DFFDuL, 0xCC917F83232C06C0uL)),
            ((+1, -11, 0xA898EA4211A8D276uL, 0xF11A7D50B481E0C7uL), (+1, -23, 0xC8FB36CA96F5A93EuL, 0xD38D0A7363C153ABuL)),
            ((+1, -20, 0xDA003D029D41209EuL, 0x1E32DE8BE1127812uL), (+1, -33, 0xC7774CDC9C3574B4uL, 0x0985EC9202632EEDuL)),
            ((+1, -30, 0xF0C14AE46874B0DDuL, 0x246EA7134030960DuL), (+1, -45, 0xE38E7D433A2A59E9uL, 0x5DF6DAAA4CB466BDuL)),
            ((+1, -41, 0xA70A25A31E3E8E70uL, 0x1A1F38AF31C40A0AuL), (-1, -60, 0x825C3AD2AF158468uL, 0xF1162E9390CD4BA6uL)),
        });
    }
}
