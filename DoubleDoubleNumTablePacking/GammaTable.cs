using DoubleDoubleHexcode;
using System.Collections.ObjectModel;

namespace DoubleDoubleNumTablePacking {
    public static class GammaTable {
        public static void Pack(BinaryWriter stream) {
            Dictionary<string, ReadOnlyCollection<(Hexcode c, Hexcode d)>> tables = new(){
                { nameof(SterlingTable), SterlingTable },

                { nameof(PadeX0p5Table), PadeX0p5Table },
                { nameof(PadeX1p0Table), PadeX1p0Table },
                { nameof(PadeX1p5Table), PadeX1p5Table },
                { nameof(PadeX2p0Table), PadeX2p0Table },
                { nameof(PadeX2p5Table), PadeX2p5Table },
                { nameof(PadeX3p0Table), PadeX3p0Table },
                { nameof(PadeX3p5Table), PadeX3p5Table },

                { nameof(PadeX4to8Table),   PadeX4to8Table},
                { nameof(PadeX8to12Table),  PadeX8to12Table},
                { nameof(PadeX12to16Table), PadeX12to16Table},
                { nameof(PadeX16to20Table), PadeX16to20Table},
                { nameof(PadeX20to24Table), PadeX20to24Table},
                { nameof(PadeX24to28Table), PadeX24to28Table},

                { nameof(PadeX28to36Table), PadeX28to36Table},
                { nameof(PadeX36to44Table), PadeX36to44Table},
                { nameof(PadeX44to52Table), PadeX44to52Table},
                { nameof(PadeX52to60Table), PadeX52to60Table},
                { nameof(PadeX60to68Table), PadeX60to68Table},
                { nameof(PadeX68to76Table), PadeX68to76Table},

                { nameof(PadeX76to92Table),   PadeX76to92Table},
                { nameof(PadeX92to108Table),  PadeX92to108Table},
                { nameof(PadeX108to124Table), PadeX108to124Table},
                { nameof(PadeX124to140Table), PadeX124to140Table},
                { nameof(PadeX140to156Table), PadeX140to156Table},
                { nameof(PadeX156to172Table), PadeX156to172Table},
            };

            foreach (var key in tables.Keys) {
                stream.Write(key);
                stream.Write((UInt32)tables[key].Count);
                foreach ((Hexcode c, Hexcode d) in tables[key]) {
                    stream.Write((UInt64)c.Hi);
                    stream.Write((UInt64)c.Lo);
                    stream.Write((UInt64)d.Hi);
                    stream.Write((UInt64)d.Lo);
                }
                stream.Write((UInt32)0u);
            }
        }

        static readonly ReadOnlyCollection<(Hexcode s, Hexcode r)> SterlingTable = new(new (Hexcode s, Hexcode r)[]{
            ((+1, -4, 0xAAAAAAAAAAAAAAAAuL, 0xAAAAAAAAAAAAAAAAuL), (+1, -5, 0x8888888888888888uL, 0x8888888888888888uL)),
            ((+1, -11, 0xD00D00D00D00D00DuL, 0x00D00D00D00D00D0uL), (+1, -1, 0xC000000000000000uL, 0x0000000000000000uL)),
            ((+1, -11, 0xDCA8F158C7F91AB8uL, 0x7539C0372A3C5631uL), (+1, 1, 0x91CB1CB1CB1CB1CBuL, 0x1CB1CB1CB1CB1CB1uL)),
            ((+1, -8, 0xD20D20D20D20D20DuL, 0x20D20D20D20D20D2uL), (+1, 2, 0x9384511DEAB78451uL, 0x1DEAB784511DEAB7uL)),
            ((+1, -3, 0xB7F4B1C0F033FFD0uL, 0xC3B7F4B1C0F033FFuL), (+1, 2, 0xF808968F383D5119uL, 0x244D3527089A63B2uL)),
            ((+1, 3, 0xD672219167002D3AuL, 0x7A9C886459C00B4EuL), (+1, 3, 0xBB3DD3DA9AC17B58uL, 0xADC81A9890CA341EuL)),
            ((+1, 11, 0x8911A740DA740DA7uL, 0x40DA740DA740DA74uL), (+1, 4, 0x83B7B085A5F7689EuL, 0xCD9552B83C7309DCuL)),
            ((+1, 19, 0xA8D1044D3708D1C2uL, 0x19EE4FDC4469CCAEuL), (+1, 4, 0xB04C820CF37B0F22uL, 0x50D78B1D73F478F5uL)),
            ((+1, 28, 0xB694D07B219DBCC4uL, 0x8676F31219DBCC48uL), (+1, 4, 0xE35D5F580E37ECB4uL, 0xE1B9AA804FE50FA7uL)),
            ((+1, 38, 0xA1BBCDE4EA012735uL, 0x0B88127350B88127uL), (+1, 5, 0x8E75243CF95640BAuL, 0xB1AC741F13538518uL)),
            ((+1, 48, 0xDE466B7C78FBAAE3uL, 0xC3A9E6DAEAE46D98uL), (+1, 5, 0xAE799EBA1DCEB485uL, 0xFC9877597F7685B3uL)),
            ((+1, 59, 0xE2E1337F5AF0BED9uL, 0x0B6B0A352D4F335CuL), (+1, 5, 0xD1BC1F238533A53CuL, 0x065E1F08A600A21BuL))
        });

        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX0p5Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, 0, 0xE2DFC48DA77B553CuL, 0xE1D82906AEDC9C1FuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 0, 0xB526B335F077596BuL, 0x2023B6B912F93905uL), (+1, 1, 0xB0C435A989DB66A2uL, 0x85058CEE7A6357F7uL)),
            ((+1, -1, 0xB2CE730B1B0309D6uL, 0xF68B052736BBDB07uL), (+1, 0, 0xB608DC44D696751DuL, 0xAD544410788946F5uL)),
            ((+1, -3, 0xF1C7D06E636CC067uL, 0x0A56E928C8F76B28uL), (-1, -2, 0x9AC3311789C9C38DuL, 0xEA23604227CE29D0uL)),
            ((+1, -4, 0x808C151918BDB3CDuL, 0x37BC390C0812AD71uL), (-1, -3, 0xB9F9616B6568A00BuL, 0x1DE06904E2CA74D7uL)),
            ((+1, -7, 0xD6DD1C88CEAC0402uL, 0xD47A6C75BCCF5EDDuL), (+1, -5, 0x90259CAD1BFF286FuL, 0x33EB9D645073DCF5uL)),
            ((+1, -9, 0x955F3019A2ED2361uL, 0x107D9EBCB36BCE63uL), (+1, -8, 0xD73168D68968677DuL, 0xAAE5A1B99CA54F08uL)),
            ((+1, -12, 0xA4FC8C3589A5F78FuL, 0xA30F6A75F32A5010uL), (-1, -9, 0x82B61299B30BAF48uL, 0x78C33645C7CE162FuL)),
            ((+1, -15, 0x9813CD9F151619A0uL, 0xE9E13A633A12B723uL), (+1, -14, 0x858997A27973EA50uL, 0x1C006A017D91AD5AuL)),
            ((+1, -19, 0xC4AA47290C6AC8D7uL, 0x586003FCC1D944C3uL), (+1, -16, 0xA99BB06554F85BF5uL, 0xB9D44805F1FB6430uL)),
            ((+1, -23, 0xCBC198C0C9A855E1uL, 0xF05F9A9C2EAC993BuL), (-1, -20, 0xDD20382C1A5B95C0uL, 0x8492B45B318CD98CuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX1p0Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, -1, 0xBA31558799C7C67FuL, 0x1A2307E98A072CF7uL), (+1, 0, 0xA6FADEB58BBC4711uL, 0xF5F0A3B53F8D549EuL)),
            ((+1, -2, 0xAA0D6A90C7D78DB7uL, 0x6578566140C70F2BuL), (+1, -4, 0xC4C215359E66E29EuL, 0xFDE1C97F6AC8A094uL)),
            ((+1, -4, 0xD429F3850568A49DuL, 0x45E5577A08C9516AuL), (-1, -3, 0xE518035C6F1A5194uL, 0x44C399C6779BDB8BuL)),
            ((+1, -6, 0xD0CB08958C3AEEECuL, 0x6E9AE52169F4E343uL), (+1, -9, 0xE119D9EA2B9DB60EuL, 0x4B265BB041E87165uL)),
            ((+1, -8, 0xA0F105FC6A8EF5EEuL, 0x41D811742B05ADC4uL), (+1, -6, 0x887026821496CA5CuL, 0x9791E0826D1DBEC6uL)),
            ((+1, -11, 0xCE743987D9AA204DuL, 0x0A059C5116373A2EuL), (-1, -9, 0xA041ACF859ED17B0uL, 0x1E26327770C38F5BuL)),
            ((+1, -14, 0xD14FB6CBF4583145uL, 0x57315EA1A2B10D54uL), (-1, -12, 0x927B2121D92D05CEuL, 0xCB67864D38378A03uL)),
            ((+1, -17, 0xB0E82B3EDB60DBD9uL, 0x77081093368F8C01uL), (+1, -14, 0xE2661DAC6F32E199uL, 0x41E12BEA9F7BCC15uL)),
            ((+1, -21, 0xD00E3AA7DE9F514CuL, 0x046CF3D5907AE8E6uL), (-1, -17, 0xB97F06E0EC997757uL, 0x5F85CDA80B0C85C9uL)),
            ((+1, -25, 0xC3581AAAD9FD5E1CuL, 0xE02B0A8D13C7E6FAuL), (+1, -22, 0xDC09D6A08A1C9F14uL, 0x2318599B156CE6EBuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX1p5Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xE2DFC48DA77B553CuL, 0xE1D82906AEDC9C1FuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, -1, 0xB81B83131BAF0CC8uL, 0x38B5E221ED8BEC68uL), (+1, -1, 0xC666CF305949395EuL, 0x294B8EB32865552FuL)),
            ((+1, -2, 0xB68A8A45468548DCuL, 0x27B22119F75E8C8DuL), (-1, -4, 0xC09D9BB9A70E0662uL, 0xB996672A9B573AF5uL)),
            ((+1, -4, 0xF842FE470EAFC3C6uL, 0x0269745B617A0517uL), (-1, -4, 0xCFCF613A9C48B0D2uL, 0x91C1B50A689E99A3uL)),
            ((+1, -5, 0x842FBDAE5D877FDFuL, 0x4FA75C9AA5D3441EuL), (+1, -7, 0xF1BC3F4698DA6A9DuL, 0xEBE4B09734F2463CuL)),
            ((+1, -8, 0xDD81F13D588923E3uL, 0x1F7682DD4243EA4DuL), (+1, -8, 0x88FA30C31EC2F05FuL, 0x2EFF93F45348CE26uL)),
            ((+1, -10, 0x99BEB47B1A42B03FuL, 0x83BBB0436DCCE045uL), (-1, -10, 0x846465656A8C5853uL, 0x7BB06EB8E2F8A21DuL)),
            ((+1, -13, 0xA9E1FB64D76950D7uL, 0xBD8A5831F4045E4FuL), (+1, -17, 0x9E3333F3E88AFE22uL, 0xDA916B10685A84FEuL)),
            ((+1, -16, 0x9B78CE2D399C7C6EuL, 0xA928C0EACADE7F25uL), (+1, -17, 0xDF84C7AEBA8CB702uL, 0x21B34D4650477059uL)),
            ((+1, -20, 0xC8E2F981386358EFuL, 0x3918E9EB5F9F6E4AuL), (-1, -20, 0x829494AB7F96954EuL, 0x294069A29FBAEAFDuL)),
            ((+1, -24, 0xCA5D1ACCB04BC78AuL, 0x719E47D4D0ECFFBAuL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX2p0Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, 0, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, -1, 0xBBEBDED59900D8EDuL, 0x5EC253E67703FDC0uL), (+1, -2, 0x9F608D722D634124uL, 0x610126D03C87F696uL)),
            ((+1, -2, 0xACC4547D50EDD8A7uL, 0xDD446C80D3551548uL), (-1, -3, 0xD2F47AFE7A54240BuL, 0x208061823655E1AEuL)),
            ((+1, -4, 0xD93E2DF4559DFF16uL, 0x8A233AA6290DAA25uL), (-1, -6, 0x880180C3520C31B7uL, 0x8722E97FCB26CA6FuL)),
            ((+1, -6, 0xD752B459C5A97824uL, 0x5C5F416A7FB25568uL), (+1, -6, 0x9797303EB56E9602uL, 0x71282EFAB6AB2B49uL)),
            ((+1, -8, 0xA7618F9EC441FC92uL, 0xC2BCF822D49F16B8uL), (-1, -10, 0xFB5C8E17093866A0uL, 0x293B8567D517A0B2uL)),
            ((+1, -11, 0xD866BF3F9097293DuL, 0x6EF3FD9169B7C33DuL), (-1, -12, 0xD46D6560F46E568CuL, 0x5B7065EF7BD6E726uL)),
            ((+1, -14, 0xDD8D5D1F70DBEB12uL, 0xC0FE2538EEA6CEE9uL), (+1, -14, 0xF2265A348E91BDD0uL, 0x27E75AE36D7832D2uL)),
            ((+1, -17, 0xBCBCBD2877E3554FuL, 0xF453B778C494E5C8uL), (-1, -17, 0xB44703D3C20F937FuL, 0x39EBF643C580E6DFuL)),
            ((+1, -21, 0xE0B364C3A4E32566uL, 0xAE902B4978378ED4uL), (+1, -22, 0xC700D24FF03A4C53uL, 0x42EF45A9636A6B06uL)),
            ((+1, -25, 0xD35BB9B1F0A7E79AuL, 0x1F67DF598603C812uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX2p5Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, 0, 0xAA27D36A3D9C7FEDuL, 0xA9621EC503257517uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 0, 0x86BE3BF3ED85924FuL, 0x56624A57386F58B4uL), (+1, -4, 0xB5B58C11ABC2647DuL, 0x836BC1143F941B6DuL)),
            ((+1, -2, 0xFAE2DE2EBCC98FDBuL, 0x397B417F8A015F0DuL), (-1, -3, 0xBEA2E2AB251F4210uL, 0x4DBF85FB085FFF6FuL)),
            ((+1, -3, 0xA05D654E1A350938uL, 0x1CC5DE9A4B9D5AD1uL), (+1, -7, 0xE6317AD3EEF6A552uL, 0xB147B2C33D9CDB97uL)),
            ((+1, -5, 0x9DB27DD7E62F1CFBuL, 0x00C3C8750B3938B4uL), (+1, -7, 0xB936199B2241410DuL, 0x03A57C59A14B59D4uL)),
            ((+1, -8, 0xF3A4C120E82BAB31uL, 0x489D047BB061538DuL), (-1, -9, 0x9B9CE61262A519EDuL, 0x21508D8A3B3C3805uL)),
            ((+1, -10, 0x98C3FFB8C51B23A8uL, 0x079F6AFE5C4CAD30uL), (-1, -15, 0xE41D53AC62FD8610uL, 0x2C7F3E06C13C8EF5uL)),
            ((+1, -13, 0x9847CE86CDFE90AFuL, 0x6DC27AD95F3023F7uL), (+1, -14, 0x8DE2BCA5B5FED18EuL, 0xBB04666B4DCBFFA4uL)),
            ((+1, -17, 0xF1D572C920AA2C53uL, 0x48B02315E3208574uL), (-1, -17, 0x8B3660193BE2969BuL, 0x7350A2FD27573FD4uL)),
            ((+1, -20, 0x88D986E5B0DC5307uL, 0xA35052741A7F452CuL), (+1, -22, 0xBB4021DEB49C7EA4uL, 0x884949380CBD063DuL)),
            ((+1, -25, 0xD08A799A6650BE02uL, 0xEA20A8192AA5CD89uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX3p0Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, 1, 0x8000000000000000uL, 0x0000000000000000uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 0, 0xD32A9BDEB058DB32uL, 0x9E4E2E3C872248E6uL), (-1, -4, 0xC887E1EE8FB2E944uL, 0x7F9C9216A6229752uL)),
            ((+1, -1, 0xCA1F47821933CAB8uL, 0x76F237B513539874uL), (-1, -3, 0x8D6C208E3D5E0FDEuL, 0xCE42F8D4CEF7D9DBuL)),
            ((+1, -2, 0x849875DF9D849553uL, 0xADC1C42F24439D0AuL), (+1, -6, 0xF9842BA512168F86uL, 0x063E3E4F8D23CE1EuL)),
            ((+1, -4, 0x8556489D499A8F4EuL, 0x0EA364A80357B5F8uL), (+1, -9, 0xEE0F9D6911CE34CFuL, 0x68B501649DB398A0uL)),
            ((+1, -7, 0xD275740B8488251BuL, 0xE39CC07695E8976DuL), (-1, -10, 0xEBF0C8BA0C7C84FAuL, 0xCDDF5F4A31D2EA19uL)),
            ((+1, -9, 0x868FD513182E9AB1uL, 0x44DBBB96612BE9CCuL), (+1, -13, 0x95F394680944753CuL, 0x056C6AE6FFDE4478uL)),
            ((+1, -12, 0x88BC2722EF190AAEuL, 0x804639530335BF74uL), (+1, -16, 0x8F8D3C1A852B31CAuL, 0x383BEB90AD8E5C2EuL)),
            ((+1, -16, 0xDD2DC167C2EB13D6uL, 0xFD159E92ECBF39EAuL), (-1, -19, 0xEDDA2E6FB3EAF556uL, 0x0D10A950FC4C5A24uL)),
            ((+1, -20, 0xFF09A05BB5FF2D7BuL, 0xB99DA9DF62C09A25uL), (+1, -23, 0xBDC8495DA3D39649uL, 0xACD33B3139151BA4uL)),
            ((+1, -24, 0xC68F897BF8271984uL, 0xD3140248197801F7uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX3p5Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, 1, 0xD4B1C844CD039FE9uL, 0x13BAA67643EED25DuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, 1, 0xA0A438B2A595B38AuL, 0x5EEC98171ADF732DuL), (-1, -2, 0xB21E5B0DD03C7543uL, 0xF0B6720C6716BCA0uL)),
            ((+1, 0, 0x90DB3C6CD7F02134uL, 0x5819A3B6BC02AC8EuL), (-1, -5, 0xCA27DFC299CFF875uL, 0xF4CF9D187BD5A8BDuL)),
            ((+1, -2, 0xB32F6B8484C1F044uL, 0x2FBACC1D22078DA1uL), (+1, -5, 0xA7CB2136C6C3A660uL, 0x46FF8F3D6CEE8138uL)),
            ((+1, -4, 0xAB4A331930DA84F9uL, 0x821C9F924F14691AuL), (-1, -8, 0xBD452C3937846D5DuL, 0x2A649100746F0E58uL)),
            ((+1, -6, 0x8082C4DE9F6B016EuL, 0xB905891894451E08uL), (-1, -11, 0x8685B859CA7D146EuL, 0x4E6C7BA7F7370F1FuL)),
            ((+1, -9, 0x9D192DC2C780DA46uL, 0x5D81DCA24261CE79uL), (+1, -12, 0x86FA95A6921DD744uL, 0x7372C7CEDA790A63uL)),
            ((+1, -12, 0x9867A536F37FB865uL, 0x5483694C7B8B9CB0uL), (-1, -15, 0x8E53AEB46FD0CD3AuL, 0x9DA5F8F8A48769C3uL)),
            ((+1, -16, 0xED1301FE74EA9BABuL, 0x098C930E49D4416EuL), (+1, -19, 0x8B2B8C6CD7351908uL, 0x76D7FD8859CC514EuL)),
            ((+1, -19, 0x82C9045EA036F60BuL, 0xCC804798243F07BEuL), (-1, -25, 0xD40BC220B99E4D9BuL, 0x6E4F7C03C82D4D9BuL)),
            ((+1, -24, 0xC7901FD92931762BuL, 0x939BE46ACEDFE1D6uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX4to8Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x95C01A39FBD6879FuL, 0xA00B120A06184926uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, -4, 0xB78FCA5C7A87C4A2uL, 0x6256FBD18B2CAD69uL), (+1, 0, 0xAA1DC87174DDB034uL, 0x6E679C6D8C844D86uL)),
            ((-1, -2, 0x85ED84B854EFE829uL, 0xCD662FBAD6B5C57CuL), (+1, -1, 0xC3F97CEF3679DC85uL, 0x41EF01C8173E5628uL)),
            ((-1, -3, 0x8214DDECAF9AB6CAuL, 0xD5C97C2BD5D97BB9uL), (+1, -2, 0x805ABD7669DB2EADuL, 0x1A15399F74DDD73DuL)),
            ((-1, -7, 0x8ABACCC18162AB1FuL, 0xFD56EE5D41B83730uL), (+1, -5, 0xD2D7D571EDBDB0C6uL, 0x0EA3FA9F4FE3D420uL)),
            ((+1, -7, 0x88E3DABFE1BC8EF4uL, 0x2A2ABEAF943C428CuL), (+1, -8, 0xE1FA39B9566CF1ABuL, 0x18D225BBBA9889F1uL)),
            ((+1, -9, 0xBC70FC989CB210A4uL, 0xFA1E6C908383CAA4uL), (+1, -11, 0x9F7EE78F7BADCC08uL, 0x28C645933646842FuL)),
            ((+1, -12, 0xEB195D43DFA26306uL, 0xB4C42DAF4AEAA0C8uL), (+1, -15, 0x924D3DF3E8488428uL, 0x69BCDCDE83DDF2C1uL)),
            ((+1, -15, 0xA69A75E40EE21D11uL, 0x295DE062A1C271BEuL), (+1, -20, 0xA8336D6D2DAC2410uL, 0xA62D4C302843A9B8uL)),
            ((+1, -19, 0x8AD6A0C033DFC8F3uL, 0xEDC4EDABB6BE6A64uL), (+1, -26, 0xE2BB94BCE64608A4uL, 0x7F0B264E15C26F78uL)),
            ((+1, -24, 0x83BD78AF3590DFAEuL, 0x6CDBD2EE0172F881uL), (+1, -32, 0x9F42DB5D4A88265CuL, 0x89D82F1BE799B857uL)),
            ((+1, -30, 0x81C46E5C08709F23uL, 0x88489185DB45BD14uL), (+1, -40, 0xB9CE006851F1EC8FuL, 0xC0DFADB38CD351C4uL)),
            ((+1, -38, 0xDA7B47DF1BC21104uL, 0x59BDFED2C8BF492EuL), (+1, -50, 0xCBCDC6430943FF9BuL, 0x41DB68E9C6B6AA74uL)),
            ((+1, -47, 0xC26ACDA0EADCAD0AuL, 0xAB5F96D67B404260uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX8to12Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x9931CB1B5941ACD7uL, 0x1F1E076AAE80286AuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -3, 0xAEF2C8108DAF2588uL, 0xDEE6E3EB4E0300A7uL), (+1, -1, 0x9279551B90363A44uL, 0x2B872AEA28F87F91uL)),
            ((-1, -5, 0xEEC0D1E88FA2CAE2uL, 0xF3A95A8974FA00D1uL), (+1, -3, 0x8D9C34B06C1A8497uL, 0x7CC392DD90595396uL)),
            ((+1, -7, 0x91B8870B5E60DF6CuL, 0x8930C6DE021236E0uL), (+1, -6, 0x96A456648722325BuL, 0xA1BBCD00FE4FDF46uL)),
            ((+1, -8, 0xACF4EE1413A04AF4uL, 0x49F8A21683003A0BuL), (+1, -10, 0xC079FD49C0D9A4D9uL, 0x07CA9BB8C66D3409uL)),
            ((+1, -11, 0xDB245BBE35182DE1uL, 0x0FA805C060D21E44uL), (+1, -14, 0x9760B2792B2BF7B2uL, 0x4EE54D799D062D54uL)),
            ((+1, -14, 0x8C558D9680DD2DF9uL, 0x58F11914672FDA15uL), (+1, -19, 0x907E69A289446C41uL, 0x6D5688717F7951E1uL)),
            ((+1, -19, 0xC8C9847E69A31C3CuL, 0x02528C1658BAB27BuL), (+1, -25, 0x9EDDE503C7BCCC24uL, 0x9A593021DD217E29uL)),
            ((+1, -24, 0x9F948B433EDF86B0uL, 0x3552DC102E9C8EF3uL), (+1, -32, 0xB4B2A9781205C1D4uL, 0xF9999B65FF137348uL)),
            ((+1, -30, 0x827905759378CFEFuL, 0x9FFB85E9537718BFuL), (+1, -40, 0xAACB10E6A1976FD7uL, 0xBD1E9D76B7A74CA8uL)),
            ((+1, -38, 0xB6B6FC577485AA0BuL, 0xA1778E1825E00126uL), (+1, -50, 0x98DC166948D08643uL, 0xA87586BFD8BC6C63uL)),
            ((+1, -47, 0x88F21A552DBD8806uL, 0x84605848F6CDA0F2uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX12to16Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x8040956348C89B39uL, 0xDE9AD40FE06FA2B5uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -3, 0x8E6CA2687C5B0E1BuL, 0xC06CE85851392A5AuL), (+1, -2, 0xB19DDE752B0E49B1uL, 0xB79E6E548BAE2AB0uL)),
            ((-1, -9, 0xD20E3AAD68E2ED3FuL, 0xFA54865D8DA4928CuL), (+1, -5, 0xCC7637D6FF97A511uL, 0x9E48337C59F0EF88uL)),
            ((+1, -7, 0x9D921E25C76BB331uL, 0xFB83C3DE35F7E1B3uL), (+1, -9, 0xFCCA35DAEADF7922uL, 0xEECEA01B1E22CDEFuL)),
            ((+1, -10, 0xE562342BD6944FD2uL, 0xD3AFDA6963A656E2uL), (+1, -13, 0xB597336579F90BB7uL, 0x92C54C10EDE36267uL)),
            ((+1, -13, 0x8F11C38FB956FB98uL, 0x578F0147361BA907uL), (+1, -18, 0x992E10E17BBE1A39uL, 0x54F887C706590C10uL)),
            ((+1, -18, 0xBB7D5C1DFF706971uL, 0x16A5691EE6C2BC4FuL), (+1, -24, 0x9203189F09772CE5uL, 0xEAAD6FBCCAC31AC9uL)),
            ((+1, -23, 0x8474111AB0987682uL, 0x474646AC0A11E60FuL), (+1, -31, 0x8E85523D9615037EuL, 0x910821C23E5415D8uL)),
            ((+1, -30, 0xBDBC62AC70CB8F97uL, 0x47937F68C5BC31DBuL), (+1, -40, 0xE6586D314B0F13B0uL, 0x753406A9B6F693B8uL)),
            ((+1, -38, 0xE7AE060AD8AA6A76uL, 0x4B214904672DB6D7uL), (+1, -50, 0xB08474D8F7E6D25EuL, 0x9B48CFBB8079DC4EuL)),
            ((+1, -47, 0x97FA527036864E54uL, 0x970022E4E21DD0EDuL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX16to20Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x801269631A9704E3uL, 0xEB6D1488E39E76C6uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((+1, -6, 0x81EF14262672995EuL, 0xC20BCBDFEEDC8E60uL), (+1, -3, 0xFB69DAD0D46E89F0uL, 0x9F373FCB91B90F88uL)),
            ((+1, -5, 0xAA0AFA719DD7205DuL, 0xC0C808EC46C3E6D9uL), (+1, -6, 0xCA45AECD07DB1D7FuL, 0x0A156BA661C30807uL)),
            ((+1, -7, 0x9DB42D395F4E9C7BuL, 0x117A6164A8BC7A49uL), (+1, -10, 0xABC666A5EC532B5AuL, 0x9B180851427A26C9uL)),
            ((+1, -11, 0xE82871960BF5A27EuL, 0x623A0FD9B6F96096uL), (+1, -15, 0xA54E3EF62A387A20uL, 0xF7823656C79FBCBFuL)),
            ((+1, -15, 0xAD4F16F694963999uL, 0x4318F6648AA90139uL), (+1, -21, 0xB3B6D81F72A6B794uL, 0xA7B72965C1698118uL)),
            ((+1, -20, 0x8B3FB5E71FB8581CuL, 0x0CFB77E66B0E5701uL), (+1, -28, 0xCEC9B028ECF0DF18uL, 0xBA4A1762F2EF03B2uL)),
            ((+1, -27, 0xE9EB3E8F68939ECAuL, 0xB3CAE9FA798FC0CAuL), (+1, -36, 0xD5FD6BC94A8657D2uL, 0x591BD50FE6AE07DEuL)),
            ((+1, -34, 0xB53CFDF9F62721B3uL, 0x0AD35496A35A0965uL), (+1, -46, 0xFE7E798AA0AFC180uL, 0xD5E999CE05626835uL)),
            ((+1, -43, 0xB742068E18815279uL, 0x31E7F5A6F71E382FuL), (-1, -58, 0xAE574EAAB77DEC01uL, 0x807EAC157A28C844uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX20to24Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xC1658D9252DBBC75uL, 0x53D36208CCD76860uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0x970459C3168258E7uL, 0x2BA4164683C077C7uL), (+1, -3, 0xBEB766C89E58CC80uL, 0x0457902425D80879uL)),
            ((+1, -8, 0xFB1B5309E6BB45D4uL, 0x86FD2DF88CB8D2E6uL), (+1, -7, 0xE645E65746745CA0uL, 0x3AAA874BD269FA40uL)),
            ((+1, -9, 0xEFCBB319DB08FE38uL, 0x16CBF0239A840EB8uL), (+1, -11, 0x9095369A07FD58EDuL, 0x868CD5C32CAB1393uL)),
            ((+1, -12, 0xA20EB88667D93BABuL, 0xC3C8664B7B19E0A2uL), (+1, -17, 0xC979D5B94F1FFC2FuL, 0x2BB6C1EBCE159B80uL)),
            ((+1, -17, 0xC21250A8D9FE3F09uL, 0x5AE35B251086C7FAuL), (+1, -23, 0x99B3E6C51FBF57F3uL, 0xC5439E6245F0232FuL)),
            ((+1, -23, 0xE975D6919F4C09DCuL, 0x700992A0DAC1B6DBuL), (+1, -31, 0xEC0904881CA8877DuL, 0x070E0AEA4E7B894EuL)),
            ((+1, -29, 0x898CBB57331365C9uL, 0xD238B58904F98E60uL), (+1, -39, 0x94E4B69D0DADA440uL, 0x8A76AB30BBD19B42uL)),
            ((+1, -37, 0x881503347044A9FAuL, 0x369E3034C4CE40D3uL), (+1, -50, 0xB20FBB8BD1AB60DCuL, 0xF9D8E5899C441918uL)),
            ((+1, -47, 0x90848E497204187EuL, 0x20EEA08A85BD19D8uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX24to28Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xE7C7A0DB0246F3FCuL, 0xA2149DA10DC2832DuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0xFFBB8E310D1599F4uL, 0xBE67DF05EE58C375uL), (+1, -3, 0x9F51DF4526BB5540uL, 0x080FA4F8FBC2F5A1uL)),
            ((+1, -8, 0x9B91BA0D41678EEDuL, 0x4DFEF8677C3E0C01uL), (+1, -7, 0xA0CBD2049E2001A1uL, 0x180A3476B58194C2uL)),
            ((+1, -9, 0xA85C73EC67BC8A09uL, 0xF2743A8265373711uL), (+1, -12, 0xA8E92114324A2EA2uL, 0x1AB00E17D846FE9BuL)),
            ((+1, -13, 0xBF5AEC2676C3971EuL, 0xF06267A7B6B1E1EDuL), (+1, -18, 0xC51472B523EC16F7uL, 0xD39975AD5B289CD2uL)),
            ((+1, -18, 0xBF41EC594FA4EB66uL, 0x5347A775B8222667uL), (+1, -25, 0xFC100BD620AD3555uL, 0x4332808E3FE4C56CuL)),
            ((+1, -24, 0xC03844CA89CB3145uL, 0x28C1498D0A283511uL), (+1, -32, 0xA278FCB4E5F6A955uL, 0xD2FF4744C3680F70uL)),
            ((+1, -31, 0xBDA7D43F718AE4E5uL, 0xE14F7452AEE09114uL), (+1, -41, 0xAC6474596CF7098CuL, 0x7E2712A3414EAA78uL)),
            ((+1, -39, 0x9D88F78151C0BD36uL, 0x60497CB65E133A9BuL), (+1, -52, 0xADCE08B28AE70F04uL, 0x59169072F9E0B83FuL)),
            ((+1, -49, 0x8CF03F1F5338E13EuL, 0x8D3E4AE43EA6CB5BuL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX28to36Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0x8C20009856813B62uL, 0x45C1ADE8E0119435uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0x960103055E8694ADuL, 0x97CF7D09EE39CCBFuL), (+1, -3, 0x980868B8DC31BEBCuL, 0x1AA2A7024DD366BEuL)),
            ((+1, -7, 0xDEA48E5B96E9C9ECuL, 0x52C2AC58EAA84B87uL), (+1, -7, 0x95E856589860B7E8uL, 0xF928AFABE4D00474uL)),
            ((+1, -9, 0xB4FC712387D04B45uL, 0x6A14DD25F6F6911AuL), (+1, -12, 0x9EE3738D3A361382uL, 0x0F9160CD8D8EBDC2uL)),
            ((+1, -13, 0xB3507AAB0A6B7DC7uL, 0x14A591AE5B1DCC55uL), (+1, -18, 0xC3E44D12DC7EE7EFuL, 0x02B6C572A46A00BBuL)),
            ((+1, -18, 0xAFA7BAF9F231D4B3uL, 0xEAD48078BF9F0403uL), (+1, -24, 0x8DFA307F88B7BAC8uL, 0xA414738CE563BCBAuL)),
            ((+1, -24, 0xBCB45A1102A043CFuL, 0xBD81AEBB6F9CF191uL), (+1, -32, 0xE8E8990AB5C6E8FBuL, 0x789D1267597B9357uL)),
            ((+1, -31, 0xDEEBF55624FCE6A6uL, 0x4C5C501DFC01FCE9uL), (+1, -40, 0xC3FD9861EB20DE0CuL, 0x41703372B6D90A70uL)),
            ((+1, -38, 0x870B4114321C09F2uL, 0xCBD82A82B1645FCAuL), (+1, -49, 0x88DC27FE8A635235uL, 0xC0D4BD956A18B205uL)),
            ((+1, -47, 0x8C9AA91744B6E93AuL, 0x118A27A08FF46483uL), (+1, -61, 0xB5C7D4D0F70A99C3uL, 0xE89A1FB86B05371BuL)),
            ((+1, -58, 0x9E4E65E0B01A0CF6uL, 0xCB376ACCB5934DA7uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX36to44Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xECA5B75EC8DAA691uL, 0xA06C90A63610922EuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0xFF846A6DE763BEE9uL, 0xD4BBCA1EF9EC4FBDuL), (+1, -4, 0xDE866A97ACFE9359uL, 0x319BFC4CCC51B6F7uL)),
            ((+1, -12, 0xA83FD495DEFC09F2uL, 0x47EB05F522FB7648uL), (+1, -8, 0x9E87CCDF43CEE306uL, 0xB078E195A7170D2FuL)),
            ((+1, -10, 0x875655F736F6437AuL, 0xB9AAEF8514D57873uL), (+1, -14, 0xEE8D745E948A0586uL, 0xD3DEC698051B912FuL)),
            ((+1, -15, 0xEB0FF6BEDA8BF34BuL, 0x8444EBE3C2EB8C67uL), (+1, -20, 0xCB848E923B48152CuL, 0xCF433A012320E79FuL)),
            ((+1, -20, 0xAF01BE5FC558E45DuL, 0xED4BC6DEFF61A2EAuL), (+1, -27, 0xC44B11398E18CF42uL, 0x746E9682DB88AB40uL)),
            ((+1, -26, 0x851B06FDE91563FDuL, 0xAAA908CCE03EADB6uL), (+1, -35, 0xC88A86F2146697ADuL, 0xA1C5823DD29E04E4uL)),
            ((+1, -34, 0xCEFA6E10F1BE3F65uL, 0xC8FF7087058041BEuL), (+1, -44, 0xB85F9B8FC20EE908uL, 0x2A176E5D645635B5uL)),
            ((+1, -42, 0x92D7BF8108BF9BE2uL, 0xAE2B20B23CC31F13uL), (+1, -55, 0xC2788BF9411545B8uL, 0xE17C9FC3D12EF3CFuL)),
            ((+1, -52, 0x8748877F480A8EF0uL, 0xF8ACC940FFC791CDuL), (-1, -69, 0xF7B202A03896284DuL, 0xAF4B1F3D3FADDE36uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX44to52Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xAB9BED66DCAC4577uL, 0x03C15DA00671466EuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -6, 0xEBECE5BCCD66C12DuL, 0x0BE6C1F621239DB2uL), (+1, -4, 0xAC76AF9285F3974DuL, 0x95E3C44139620216uL)),
            ((+1, -7, 0xD0C92D49BCEC553BuL, 0x3BD9F9BD4326F188uL), (+1, -9, 0xBC5F4AD35F6FFA8CuL, 0x3B1CF66B541E35D9uL)),
            ((+1, -10, 0x9321B7C32449F180uL, 0x45DE4587CE02F9B1uL), (+1, -15, 0xD61419A357D1EAF0uL, 0x1C6B2C36E48EC35FuL)),
            ((+1, -15, 0x95A844F14E382249uL, 0xE0F89BB1AC445555uL), (+1, -21, 0x870FDB6EBE0C8293uL, 0x71DA1FED48F8C733uL)),
            ((+1, -21, 0x954DC85BD41AD9ADuL, 0x67F4B24819AA0B3CuL), (+1, -29, 0xBAB881BE9207DBE3uL, 0x216AEB8397A3A8E8uL)),
            ((+1, -28, 0x9B285A010809481DuL, 0xCDD554CE910E1BA9uL), (+1, -37, 0x8203ABAF08F6BAD8uL, 0xE3A736BA6962A057uL)),
            ((+1, -36, 0xA0C2E56A7CDC60D8uL, 0x2F4C92EAC95DCB90uL), (+1, -47, 0x94E850A477DBC0E5uL, 0x721553AC946AD869uL)),
            ((+1, -45, 0x8D4A3B1E8DB7F08CuL, 0x93C7FDA359DAD0F8uL), (+1, -59, 0xA1E2A173BA62108DuL, 0x1B60391B56587511uL)),
            ((+1, -56, 0x8625EBD95CF32282uL, 0xD9F756C0CE3A2226uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX52to60Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xE16C9A74F116EFE3uL, 0x48525E9C009523B2uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -3, 0x855E686731E76442uL, 0x49CB0A0BF1F8FAF0uL), (+1, -4, 0x877079F87244CFC2uL, 0x38245E4803BB4D06uL)),
            ((+1, -9, 0xC989C34B001EE69EuL, 0x4AAFDDADFEB4AF89uL), (+1, -10, 0xE43DC432A7B9FB37uL, 0x3DEE620A5188407BuL)),
            ((+1, -11, 0x8A622B3360B466BBuL, 0x89CDB107A57277CEuL), (+1, -16, 0xC3056723970C0CA6uL, 0xA8726157E1101790uL)),
            ((+1, -17, 0xFC4FDDC62EDC1B0BuL, 0xF07885EE9779B8F8uL), (+1, -23, 0xB1D95687D02E308EuL, 0x513CE0929EBC083BuL)),
            ((+1, -23, 0xC6ACEBC3C620688CuL, 0x5F102D9FF8E17D6AuL), (+1, -31, 0xA63D3C7B4A2490BBuL, 0x7DEDA74DFE666DDBuL)),
            ((+1, -30, 0x955357D8E32AEB28uL, 0xB50DE1F35D8F2169uL), (+1, -40, 0x892198E56520400CuL, 0x76C371A0DDB68403uL)),
            ((+1, -39, 0xC618E34304F5C0A3uL, 0xE9E8E47DFB1F90A5uL), (+1, -52, 0xFFBC175A10439F4DuL, 0x36D44070CD4150A9uL)),
            ((+1, -49, 0xA814FB7A377026FCuL, 0x0D37DFD3E8AA8A1FuL), (-1, -65, 0x9ACC9513139D996BuL, 0x30D6A5E8C1B60941uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX60to68Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0xE776F87F23DE7992uL, 0xBC8F141BE757223FuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0xBCCC068703DC5E7AuL, 0xC71A8EDB95CBD8C1uL), (+1, -5, 0xEB3160FBFA47CF8FuL, 0x0DA9BD7EE4C83B49uL)),
            ((+1, -8, 0xD11B92D250E737FDuL, 0xEF011C007F8B24A9uL), (+1, -10, 0xAC23A359BA99360FuL, 0x03BC964D9B34EB9EuL)),
            ((+1, -11, 0x816050FF424961ECuL, 0x2F1CDBE9129465ADuL), (+1, -17, 0xFFA982C1A3AFE284uL, 0x11CBD7E8EEE885CDuL)),
            ((+1, -17, 0xB8BDB59A7A88B7B4uL, 0x89E551BAA0F8DEE6uL), (+1, -24, 0xCAC4E99979B1436CuL, 0x56ACD04E9273DFFEuL)),
            ((+1, -24, 0xF2059D8DE3CB97CAuL, 0x60F9CA3D67E18971uL), (+1, -32, 0xA4FBE33F057909C6uL, 0x79D69CF0CC5205D3uL)),
            ((+1, -31, 0x9A7015A3AF6F79A6uL, 0x9BB7BD0755B8F1CEuL), (+1, -42, 0xED3E7C6CA099F7CEuL, 0x5F4B8306D385DAE0uL)),
            ((+1, -40, 0xAFB1F35B5CED7BC2uL, 0x8C000352F5F5287CuL), (+1, -53, 0xC1525630F4E52CEAuL, 0x87D6E373981B5270uL)),
            ((+1, -50, 0x80A43EAF114BD1B4uL, 0xE596D18D9FDCD3E0uL), (-1, -67, 0xC9BD3B1831DA0C39uL, 0x66544C83076B2C4BuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX68to76Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0x831123617D03758CuL, 0xAED071CB087B2A96uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -5, 0xAAB5CD0669698987uL, 0x4E98960F42A99B73uL), (+1, -5, 0xCFD048F2A8FA8AB6uL, 0x72A0AFD0F51D964EuL)),
            ((+1, -7, 0x8931E771B252BC0EuL, 0xA5C97BBF4AB374B1uL), (+1, -10, 0x86702CB993B15FCAuL, 0xA062697AA8DCE7BEuL)),
            ((+1, -12, 0xE7654BD7AB97902BuL, 0x73E392C567A3B837uL), (+1, -17, 0xB08E1AB03B24B250uL, 0x92CA3622C8BAFC37uL)),
            ((+1, -17, 0x8926BA5E651BD09AuL, 0x8A02607748E0F025uL), (+1, -25, 0xF7C441049DC39BD3uL, 0x1479373167C9FDAFuL)),
            ((+1, -24, 0x9A78EC932725F8ACuL, 0xD0972728526D9FBCuL), (+1, -33, 0xB27981B6B0DE1A27uL, 0x2A37677ABC98D6A3uL)),
            ((+1, -32, 0xABB12CA744AED7B7uL, 0x21B509998FD35908uL), (+1, -43, 0xE36DBDB6F93060F5uL, 0xDAC389E6FFEE025DuL)),
            ((+1, -41, 0xAB3D00A0123F32D1uL, 0xF6896653EF5EF6E3uL), (+1, -54, 0xA48912903C4BD3F9uL, 0xD2D6138F3515BCACuL)),
            ((+1, -52, 0xDCC6C493313C42BAuL, 0x823EE7E4D3EA49AFuL), (-1, -68, 0x971B419ED774DAF8uL, 0x5FB14D90EC8C3E60uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX76to92Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0xCD5457F541204CB6uL, 0x5C66935A640B9FFFuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0xED9BD171DE45F9DEuL, 0xC7EEFC871ACA72AAuL), (+1, -5, 0xD20A888BC3C50EA4uL, 0x3030AAC6686477E9uL)),
            ((+1, -9, 0xC373EBC9308498A5uL, 0xEA548979136FC8ABuL), (+1, -10, 0x8D460DC16A8E4CD2uL, 0x354DB7F7FB84785BuL)),
            ((+1, -12, 0xA0155AC01ED3658DuL, 0x12A0F6A2E599AED6uL), (+1, -17, 0xC8C22D2D963524F0uL, 0x3308C037E3E1AD82uL)),
            ((+1, -18, 0xE480B67468BDDB74uL, 0x2D51E8F4821BDF17uL), (+1, -24, 0xA1CCF6D53B507C94uL, 0xD08103D5751BE502uL)),
            ((+1, -24, 0x9801AA19D858AD38uL, 0x94B22806FE0F118DuL), (+1, -32, 0x937CF585FBAB36B7uL, 0x6DA971FF90DA043DuL)),
            ((+1, -32, 0xD3F07E4D1168457FuL, 0x87E2993F4DB81ACBuL), (+1, -41, 0x8E7CC5A324D6E677uL, 0x4CFFDEF890865A1BuL)),
            ((+1, -40, 0x98CF4DDC08CDAF0AuL, 0xD9F598B4644A437DuL), (+1, -52, 0xF7F77700DE5FF785uL, 0x4063C86FF1242509uL)),
            ((+1, -50, 0xCA66756452E801DFuL, 0x5E437A8F7970EFF7uL), (+1, -64, 0xF8096BB21F07DFEBuL, 0x375040D0BAFDEF2CuL)),
            ((+1, -61, 0xAECF4BC3BEED6F31uL, 0x931070BBF9FC68F6uL), (-1, -78, 0x93827FAE543296B2uL, 0xBBAAF238A924D27EuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX92to108Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0x8149A6810087BAB0uL, 0xE75994E5C5727639uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0xB652F6B922A3389BuL, 0x7C3647B5C6AFD083uL), (+1, -5, 0xA460CD5985081A2CuL, 0x869D0A67927FD346uL)),
            ((+1, -9, 0xFAD0F2FF1E2DDD30uL, 0x48826595394AE827uL), (+1, -11, 0xAB26AC469C3035C8uL, 0xB2A9E067311524A8uL)),
            ((+1, -13, 0xE5BC086C9CEDABB5uL, 0xA5F26362E7BB1D89uL), (+1, -18, 0xB974405C5663CADEuL, 0xBBA28B5E44C1BA75uL)),
            ((+1, -19, 0xEEF136B71B8E4115uL, 0xC2C0CCA6A1F78252uL), (+1, -26, 0xDF2ADAA5EFFAF900uL, 0xE59974BF63F0B4C2uL)),
            ((+1, -26, 0xEA5FA374F4E7BF34uL, 0xAD8DF105DA2DE14AuL), (+1, -34, 0x93294C54B3378C72uL, 0x945BED876BAB5550uL)),
            ((+1, -34, 0xEC56DEBB3ED1021CuL, 0xC7953A46D24A9FE3uL), (+1, -44, 0xC393C4E2D7626CF6uL, 0x89EB5D145AD99A34uL)),
            ((+1, -43, 0xEC42D432F0D44C17uL, 0xA36F40028F8D1AEBuL), (+1, -55, 0xD5DE5E8155AAF300uL, 0x04E1A52E2C1257CCuL)),
            ((+1, -53, 0xC7D084EE0EAE86BEuL, 0x45621613ED47B745uL), (+1, -68, 0xDE21B9B0F44B8A29uL, 0x3C1CFB75191A07CBuL)),
            ((+1, -65, 0xB66A5106A9C618EAuL, 0xC9D44461204D31BDuL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX108to124Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xAA8C4CFA771F97C5uL, 0x9433BC6745243A7AuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0xD4EB0E099986412BuL, 0x054F33B199FF677EuL), (+1, -5, 0x8C6A0A054134BFE8uL, 0x87A761BA3C934E3DuL)),
            ((+1, -9, 0xAFB0AEF25BCF9337uL, 0xA6AC840DA105CE21uL), (+1, -12, 0xF9E422BF9958B196uL, 0xDFFCB611C4B0557EuL)),
            ((+1, -13, 0x9E6C69DC6F877003uL, 0xB797C77F12B8318EuL), (+1, -19, 0xE78B4310D1FCC6E8uL, 0x1022E575A37F7D7EuL)),
            ((+1, -19, 0x908523D5E81F2DDCuL, 0xA80A891DFD43DFE7uL), (+1, -27, 0xEE6E4E8C2B8EDADBuL, 0xC131A070CC268049uL)),
            ((+1, -27, 0xF5349CFCDD78A107uL, 0x966FDBC224BB7413uL), (+1, -35, 0x86A96AC4471DDB16uL, 0x38C1E732F1678D88uL)),
            ((+1, -35, 0xD5082708A636B313uL, 0x47246877CD6CA7BCuL), (+1, -45, 0x9973B35CD5C4CA7AuL, 0xE40E2CEBBA252D27uL)),
            ((+1, -44, 0xB7504C36D09F4010uL, 0xA19BA407700483A6uL), (+1, -56, 0x901644DAA18174F3uL, 0x8E90E2A8FF22F8E7uL)),
            ((+1, -54, 0x858619884D3A176FuL, 0xDEC4916B209E4B8DuL), (+1, -69, 0x80BDBDF6C2997FCCuL, 0xA6CA5103A17999FAuL)),
            ((+1, -67, 0xD2563ADD90E013ACuL, 0xB7C4BE536F6A2541uL), Hexcode.Zero),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX124to140Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -2, 0x8D32A082970CAE7DuL, 0x56F999CE1304E263uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -5, 0xB42EB3EBE967C303uL, 0x6DDFF7656477A792uL), (+1, -6, 0xE2EAC67F6BBCD369uL, 0xF732736730DE5BD5uL)),
            ((+1, -8, 0x934AFCCCEDAA38F7uL, 0xC18832E2321A655CuL), (+1, -12, 0xA0416127E5AB3322uL, 0x7AA1263503EB565FuL)),
            ((+1, -13, 0x8910FC579B662F9EuL, 0x45AE39F6A05E87B8uL), (+1, -20, 0xE5B18517CCCFC4B6uL, 0x80E8E64A1C95AAEBuL)),
            ((+1, -20, 0xB1E8E599D938AF4CuL, 0x573CD6A8B0CEDD15uL), (+1, -28, 0xAFD6744693C7174EuL, 0xA22873788A211A39uL)),
            ((+1, -28, 0xDAF82B277A9459CBuL, 0x4104C503DA7F4836uL), (+1, -37, 0x8A2182BC60150E53uL, 0x9F2ADC489B66EE65uL)),
            ((+1, -36, 0x84D5951B3D422CCEuL, 0x38D4D856596B2860uL), (+1, -48, 0xBFDA62D631763812uL, 0xC37E1BB5FC117C7DuL)),
            ((+1, -46, 0x907B6E4847AD0072uL, 0xE92636C4ED4149D6uL), (+1, -60, 0x972F213F6224A170uL, 0xC833043FD46DBBC6uL)),
            ((+1, -58, 0xCAF184D18BA741E6uL, 0x57A17FD827BA970AuL), (-1, -75, 0x96F2728852E8B7FEuL, 0x2CF1B297BCFDD44AuL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX140to156Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -1, 0xE2604D465E960256uL, 0x0EA0F657B02F1324uL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -4, 0xD54ABD0847FCB0AFuL, 0xD410C9971033869AuL), (+1, -6, 0xC94C8EE54517B4ACuL, 0x9F1A391EF8991FE3uL)),
            ((+1, -9, 0x961DDFD2B0BEA155uL, 0xFF319984DE4DB6E2uL), (+1, -13, 0xFC4C2AD110C56EEAuL, 0x392487B6CAB8A3E9uL)),
            ((+1, -14, 0xB342B52A7FC57C12uL, 0xD8EB992158A717A2uL), (+1, -20, 0xA07EA2A65A0FC70EuL, 0x37256403A2D0F8CCuL)),
            ((+1, -21, 0xE0B7854035BFDAE4uL, 0xF0633AA9E38982DEuL), (+1, -29, 0xDA3529F2B1F502A9uL, 0x5845A6EB410D2BF7uL)),
            ((+1, -29, 0xFF1A540189877AA4uL, 0xB9DB6D767970997BuL), (+1, -38, 0x9849B0343DFF25DDuL, 0x9B4524AB82A60B30uL)),
            ((+1, -37, 0x8C84932C6BFD46ACuL, 0x7508FA9F6E22F9DFuL), (+1, -49, 0xBBFE8EF20FC4AE0BuL, 0x17BB93E0A69C6990uL)),
            ((+1, -47, 0x89D8C98144057E65uL, 0x6F7F4D162B04B79CuL), (+1, -61, 0x839778272A7919E7uL, 0x6E6DC81C73036FA6uL)),
            ((+1, -59, 0xAE20F090D2122B59uL, 0x8066F2E05DC3BF23uL), (-1, -77, 0xEE4A5B6CDEA9CCB4uL, 0x995E099D8F02DB36uL)),
        });
        static readonly ReadOnlyCollection<(Hexcode c, Hexcode d)> PadeX156to172Table = new(new (Hexcode c, Hexcode d)[] {
            ((+1, -3, 0x95A50A217D0C41C7uL, 0x4320967552C1C58EuL), (+1, 0, 0x8000000000000000uL, 0x0000000000000000uL)),
            ((-1, -6, 0xEB230098CDAE8741uL, 0x032CC29AF9289380uL), (+1, -6, 0xA97D5227EA94C3ABuL, 0x2CB53F026A5B3B90uL)),
            ((+1, -8, 0x834D58B563E70644uL, 0xE14613A46EFA4FA4uL), (+1, -13, 0xB03F8841BD43D08AuL, 0xD4AA7337CC1B3332uL)),
            ((+1, -14, 0xA972BB93ABF2761BuL, 0xAB5D2BE86D149F26uL), (+1, -21, 0xB637D81A40814E5BuL, 0xBBD483ED5DC1692AuL)),
            ((+1, -21, 0x9CEF3142AF783427uL, 0xD7FB30653A7E22D5uL), (+1, -30, 0xC33219D4EDF8D878uL, 0x9F25318C29B2BDE0uL)),
            ((+1, -29, 0x876F5D679D1C876CuL, 0xD47FC23EEA6B157CuL), (+1, -40, 0xCC4DE017F09A09D2uL, 0x3BDDD998AA5A558BuL)),
            ((+1, -39, 0xDD29C7F94F513F25uL, 0x6653FAF4B0ADFCE2uL), (+1, -51, 0xAD1F5C6B16610455uL, 0x55DC870789DDE8AEuL)),
            ((+1, -49, 0x956BE1A65FBF793DuL, 0xF7DD841FDFA97B35uL), (+1, -64, 0x8A7F1325F6BF5FB1uL, 0x83CC7EE196BAA4F5uL)),
            ((+1, -62, 0xD8B6AF923806AA93uL, 0x1A3DCBF84C79F88DuL), Hexcode.Zero),
        });
    }
}
