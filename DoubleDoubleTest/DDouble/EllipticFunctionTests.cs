using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using DoubleDouble;

namespace DoubleDoubleTest.DDouble {
    [TestClass]
    public class EllipticFunctionTests {
        [TestMethod]
        public void EllipticKTest() {
            ddouble[] expecteds = {
                "1.5707963267948966192313216916397514420986",
                "1.5708922137626348383837650136581481582421",
                "1.5711800327950414382234259086488376027906",
                "1.5716602590854044624759806388602038140072",
                "1.5723336873167065823295352122093265421142",
                "1.5732014357326469746859034228675114316004",
                "1.5742649518971571343800434323914067540715",
                "1.5755260202037926322755180713780581701490",
                "1.5769867712158131421244030532288080803822",
                "1.5786496929386844702038366850954624025502",
                "1.5805176441495632799246952299382702227284",
                "1.5825938699335270893704211545328822462679",
                "1.5848820196044282199053818675217684953733",
                "1.5873861672199078078769910460161983982356",
                "1.5901108349360414470051419697527029340762",
                "1.5930610194881743919238645645117604395206",
                "1.5962422221317835101489690714979498795056",
                "1.5996604824319273643394578765114648751938",
                "1.6033224163535283546541143246044677182081",
                "1.6072352591792112209867666942845220935236",
                "1.6114069138689479181205171149431019811367",
                "1.6158460055790900446879551190804184346749",
                "1.6205619431809133462612682493727808287771",
                "1.6255649887647804235460221753782361377656",
                "1.6308663362907171767792504784498359999078",
                "1.6364782007562008756208066125715722889068",
                "1.6424139195055974161323338766005709545498",
                "1.6486880676135124581676166343619021077071",
                "1.6553165896497853012516118289838680368135",
                "1.6623169505942065935249875587567072128641",
                "1.6697083092365505435547806804617068103208",
                "1.6775117181011207095226404306624702679138",
                "1.6857503548125960428712036577990769895008",
                "1.6944497909214828360741758016604250535461",
                "1.7036383055993221023926317832431813676170",
                "1.7133472533849584281744788142879283745219",
                "1.7236114974339794600451317017587282324988",
                "1.7344699226581490084911986778330656955644",
                "1.7459660469667769179529109204695040122436",
                "1.7581487538531659485112193783875635091168",
                "1.7710731762515814443701733638829608962076",
                "1.7848017705587752734935644434602890003002",
                "1.7994056318875859809710372993615656378972",
                "1.8149661183461979700398451246307683757518",
                "1.8315768754231192498889221304824777020138",
                "1.8493463844468008136482175293677720244813",
                "1.8684012062736826855336961036654002411927",
                "1.8888901602273695618193710593563478229252",
                "1.9109897807518291965531482187613425592531",
                "1.9349115498481339540230522160845191771428",
                "1.9609116453188370344158948952540480640658",
                "1.9893043310480998110399182055613693713775",
                "2.0204807505101105942650984322287434683110",
                "2.0549359644344846107996733621096220760606",
                "2.0933089821785136758028266704150714415598",
                "2.1364440658135019425659516788900194882582",
                "2.1854884692782236869130803237301586897304",
                "2.2420560837698999062048330716916900007518",
                "2.3085186232456553532129648580695787831688",
                "2.3885657507906773321550584024088171648172",
                "2.4884004914010351609563224135124209947654",
                "2.6196934131113362507140124084739898005169",
                "2.8087438358654412952018596578012627721969",
                "3.1398110351826142967874167180555234649289",
            };

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                ddouble expected = expecteds[i];

                ddouble y = ddouble.EllipticK((ddouble)k);

                Console.WriteLine(k);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, expected * 1e-29);
            }
        }

        [TestMethod]
        public void EllipticETest() {
            ddouble[] expecteds = {
                "1.5707963267948966192313216916397514420986",
                "1.5704127613492695165454318188245397555676",
                "1.5692612206533624496925662862101930488666",
                "1.5673391612665478615332635210585921936750",
                "1.5646423092625568944320445595094440506712",
                "1.5611646068271051885645351006206581875428",
                "1.5568981352002313408771093150561046256471",
                "1.5518330115106139178537232671267433396361",
                "1.5459572561054650349504124399206106061888",
                "1.5392566258222057728427549435854898564635",
                "1.5317144071889349200018657002111144251113",
                "1.5233111616582831848823643345118080940974",
                "1.5140244125021051094307043656443153737808",
                "1.5038282596752396588979480732894581110007",
                "1.4926929044313435533484395012734775193589",
                "1.4805840591964266490624285105676406260687",
                "1.4674622093394271554597951337922410458112",
                "1.4532816807130160276677847525051763052933",
                "1.4379894480673063924158025287574119527664",
                "1.4215235911932390135113683925686247355662",
                "1.4038112620302649031149401619294567462713",
                "1.3847659565934378967980435903232829199376",
                "1.3642837714465253785899535776050157718878",
                "1.3422381292201173260983741426110609041183",
                "1.3184721079946209973718427944979309305909",
                "1.2927868476159125056958680222998765977630",
                "1.2649231666855462758581296259712686334077",
                "1.2345305754464217203530870288617506289285",
                "1.2011106307369146977945187107969555161921",
                "1.1639009595942138949538479723125389480425",
                "1.1215931702323738421144017550485373034473",
                "1.0714005291435245968438278359032728445396",
                "1.0000000000000000000000000000000000000000"
            };

            for (int i = 0; i <= 32; i++) {
                decimal k = i / 32m;

                ddouble expected = expecteds[i];

                ddouble y = ddouble.EllipticE((ddouble)k);

                Console.WriteLine(k);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, expected * 1e-16);
            }
        }

        [TestMethod]
        public void EllipticPiNp0p75Test() {
            ddouble[] expecteds = {
                "3.1415926535897932384626433832795028841972e0",
                "3.1418483560726018612130625162619442668741e0",
                "3.1426159320758088176969202042668022030762e0",
                "3.1438967897945466495483709823240514719812e0",
                "3.1456932846842749927609482054731616351557e0",
                "3.1480087322532735523139839929636769645888e0",
                "3.1508474261682432953206433482860761712180e0",
                "3.1542146618734756057456527986695796697465e0",
                "3.1581167659876726344845888109573203986502e0",
                "3.1625611318111328568175701898973425715901e0",
                "3.1675562613510513202270058712153210420212e0",
                "3.1731118143557101178142726428539356243087e0",
                "3.1792386649411772652073507510742173164242e0",
                "3.1859489664989194696576272008165298084967e0",
                "3.1932562256919716715601141494117599776615e0",
                "3.2011753864839688504383270109265588236796e0",
                "3.2097229253029926726221620114284732119973e0",
                "3.2189169586251031414110904455223237410702e0",
                "3.2287773644758053714229577535049195458802e0",
                "3.2393259195978678427546943672189774045287e0",
                "3.2505864543286041721800867759799164708963e0",
                "3.2625850275784849382071704687213014781820e0",
                "3.2753501247175462611625786720125390580320e0",
                "3.2889128816711607482402250945669347509179e0",
                "3.3033073391206442669952204314030447323810e0",
                "3.3185707314198897725160130213852268997588e0",
                "3.3347438157057980756866342619550797902336e0",
                "3.3518712477346150029376766877378064675515e0",
                "3.3700020122655308182584722299071110343438e0",
                "3.3891899173976591273612736744517763768064e0",
                "3.4094941642252061664641948202703305783632e0",
                "3.4309800056104157847121170395816243219811e0",
                "3.4537195109187421402230659471905386562732e0",
                "3.4777924573928000931445110490285280566189e0",
                "3.5032873736969831863050417764813712018324e0",
                "3.5303027673603218388577032407286668447085e0",
                "3.5589485758110457424972169147271038933558e0",
                "3.5893478910206903226008950164854495467083e0",
                "3.6216390212716696192760975799954379291535e0",
                "3.6559779713663769936939224868598250255082e0",
                "3.6925414463143309533439322499742532642267e0",
                "3.7315305154653584795958246472276379555699e0",
                "3.7731751175349224916635125192913694947734e0",
                "3.8177396468966465919573796872695222920799e0",
                "3.8655299452241844824922446955040778116350e0",
                "3.9169021411830680170166498172713489700892e0",
                "3.9722739516316432942264908952908307955132e0",
                "4.0321393078890053824392437690093807488684e0",
                "4.0970875439657078367392174926601741638237e0",
                "4.1678289528199471623370042674103031201018e0",
                "4.2452294050111630342977258259560809345190e0",
                "4.3303581474589396883255938842309013058599e0",
                "4.4245552493491150463817099485522148994732e0",
                "4.5295291733497540498724096172963582047279e0",
                "4.6475020701793147646550623307657252916465e0",
                "4.7814336173499506888357079962140281082298e0",
                "4.9353801252930626431234478934019747476171e0",
                "5.1150997270183485183017658028932700316345e0",
                "5.3291366385467808713494658988224272458823e0",
                "5.5909219970929636704475162119652028668436e0",
                "5.9232920958049332938253822974095798888718e0",
                "6.3697471607338164723017283003669462151351e0",
                "7.0296869407148159624637095978220374302356e0",
                "8.2268676774526782488120771729995116280889e0"
            };

            const double n = 0.75;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                ddouble expected = expecteds[i];

                ddouble y = ddouble.EllipticPi(n, (ddouble)k);

                Console.WriteLine(k);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, expected * 1e-29);
            }
        }

        [TestMethod]
        public void EllipticPiNp0p50Test() {
            ddouble[] expecteds = {
                "2.2214414690791831235079404950303468493073e0",
                "2.2216003410570760155814265762514927444668e0",
                "2.2220772339786470904718643140063091509543e0",
                "2.2228729802610421714628139421614918670549e0",
                "2.2239889721266155124241163723303592704376e0",
                "2.2254271689483003520119334129877320659154e0",
                "2.2271901076435573859820745365276934754712e0",
                "2.2292809162297448349322999242547205659324e0",
                "2.2317033306895185005803135437194636786748e0",
                "2.2344617153334123284761502486592056116177e0",
                "2.2375610868888429297624910671852367290111e0",
                "2.2410071425913019950712212424017951260432e0",
                "2.2448062926054568603153032016498010257143e0",
                "2.2489656971624453505476714319494992921377e0",
                "2.2534933088662065763079604948150968045967e0",
                "2.2583979206978715189171189050328491530414e0",
                "2.2636892203350019960373862582026908281889e0",
                "2.2693778515041665332806176390896935780752e0",
                "2.2754754832038232354163385946791481477608e0",
                "2.2819948877732059697489464023515371691636e0",
                "2.2889500289461163053203869394103933347835e0",
                "2.2963561612214158322144264752148364328582e0",
                "2.3042299421110235875197278024187634008038e0",
                "2.3125895590993377907368003849329079186345e0",
                "2.3214548734751877388802091519882267671804e0",
                "2.3308475835911868130955655659264624955492e0",
                "2.3407914105814777091651730759747577666961e0",
                "2.3513123101473506377676995928845036401831e0",
                "2.3624387147266141685363424157533576972234e0",
                "2.3742018112296975058778643412157354553487e0",
                "2.3866358605956340454683820517043155405358e0",
                "2.3997785667494415014344166486486431330448e0",
                "2.4136715042011946406669235205392899368490e0",
                "2.4283606156116170379130139280828510934276e0",
                "2.4438967932861427808371899976346690371009e0",
                "2.4603365619193069144877349286806740160804e0",
                "2.4777428842243981443101699502058674201097e0",
                "2.4961861166643762824512854026240539844929e0",
                "2.5157451497836923983828046615550362686163e0",
                "2.5365087772331889924998210307257973367128e0",
                "2.5585773503374668148552310846316892442728e0",
                "2.5820647921987568625565936755868272379860e0",
                "2.6071010686339033932094290275563523686845e0",
                "2.6338352453019253974943176741100106980481e0",
                "2.6624393050775576335402737345981631916734e0",
                "2.6931129629446943902388956361761175614652e0",
                "2.7260898065117209107132217729664003459189e0",
                "2.7616452230124855111414491023277463062262e0",
                "2.8001067714281046381729339089728201718367e0",
                "2.8418679592329887411281957764182754794545e0",
                "2.8874068518111981029457833720549236848366e0",
                "2.9373116916416496781946683256823724888596e0",
                "2.9923169378489206516042401001961966612429e0",
                "3.0533552376635152779177840968318937403069e0",
                "3.1216345613215174448101258763872425047058e0",
                "3.1987566227510081874097387982279698180328e0",
                "3.2869061707936835409360712833818266340311e0",
                "3.3891687711925063915846014772816364968711e0",
                "3.5100978334772656780983422243390879351968e0",
                "3.6568085169187737343913587402250953054921e0",
                "3.8413194446057135034266844298898413717832e0",
                "4.0863584014324193546240444010410172233555e0",
                "4.4434293507572777643719750160372778108773e0",
                "5.0786088799425931837061313285440631642886e0"
            };

            const double n = 0.50;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                ddouble expected = expecteds[i];

                ddouble y = ddouble.EllipticPi(n, (ddouble)k);

                Console.WriteLine(k);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, expected * 1e-29);
            }
        }

        [TestMethod]
        public void EllipticPiNm8Test() {
            ddouble[] expecteds = {
                "5.2359877559829887307710723054658381403286e-1",
                "5.2361475639377532997094521827349699193692e-1",
                "5.2366272074128880843755059874839396593850e-1",
                "5.2374273462815274606731448042050228204927e-1",
                "5.2385490838114581023701848911509777836026e-1",
                "5.2399939719209866598893282533434005612366e-1",
                "5.2417640186118694472566693135347752381676e-1",
                "5.2438616976555954256635235895853078973774e-1",
                "5.2462899606334110794585388599786898500431e-1",
                "5.2490522514563837006409256547779432097741e-1",
                "5.2521525235200198985527315525459726493320e-1",
                "5.2555952596790562568772083011031377141399e-1",
                "5.2593854952626698859185713178081432620949e-1",
                "5.2635288443892738951716551838438283193873e-1",
                "5.2680315298841529069987612990403884385911e-1",
                "5.2729004171535052445101698656850801066214e-1",
                "5.2781430524262411710534206140522210642463e-1",
                "5.2837677058416400379009763937844762403439e-1",
                "5.2897834199385032548298768845263904104113e-1",
                "5.2962000641919511825525138309033759806236e-1",
                "5.3030283963501802994496326102251969277480e-1",
                "5.3102801314486087814218030822847993465828e-1",
                "5.3179680195269445972672201109080056182264e-1",
                "5.3261059332508282122196525016644717963308e-1",
                "5.3347089668500800161755175749233445755822e-1",
                "5.3437935480380414133475289918562082813419e-1",
                "5.3533775648808807655340861318009811597371e-1",
                "5.3634805099544981305541902476085230824872e-1",
                "5.3741236445756644651533064127230435617819e-1",
                "5.3853301864435841983563058195064035615554e-1",
                "5.3971255247043596414862867500931005272349e-1",
                "5.4095374672878443101654126867369865918189e-1",
                "5.4225965264085163512824974529303086359253e-1",
                "5.4363362494277720171532522117259278295740e-1",
                "5.4507936039220636429452093707927682137185e-1",
                "5.4660094278934898287606986264207113374793e-1",
                "5.4820289587370921307294711413462774899673e-1",
                "5.4989024580334764636694817717801175308962e-1",
                "5.5166859537297942914226556313525848809533e-1",
                "5.5354421271730801107225112602587890421146e-1",
                "5.5552413802833870482124516789629200869471e-1",
                "5.5761631286354090184233266731600823744089e-1",
                "5.5982973804182544789170177776833734624336e-1",
                "5.6217466807193891665084529078584193033477e-1",
                "5.6466285276448362514174387691210301895595e-1",
                "5.6730784049447278679693999698809886891744e-1",
                "5.7012536304555373921901858281493555436557e-1",
                "5.7313382992762836140682761801995619299780e-1",
                "5.7635497187872458144861681613985726522175e-1",
                "5.7981469118170348280289190299544767040349e-1",
                "5.8354420423768448897509814143617193911154e-1",
                "5.8758160614621523694354030573886236996004e-1",
                "5.9197405975158949140938589207368917162577e-1",
                "5.9678093501819213678221335125011483023329e-1",
                "6.0207844231460657555538733825711843743037e-1",
                "6.0796670501020061367794890557667741704056e-1",
                "6.1458099891081150171354410700476217585521e-1",
                "6.2211050868074325639607863393051250205241e-1",
                "6.3083159131603928834186690496120369556324e-1",
                "6.4117154563336814677076199797479986745350e-1",
                "6.5384423879725213545697171454978173218386e-1",
                "6.7018408727482935679809489500806495573837e-1",
                "6.9317792535594728369265287104015425735289e-1",
                "7.3232569786838977337414376225224364215788e-1"
            };

            const double n = -8;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                ddouble expected = expecteds[i];

                ddouble y = ddouble.EllipticPi(n, (ddouble)k);

                Console.WriteLine(k);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, expected * 1e-29);
            }
        }

        [TestMethod]
        public void EllipticPiNm16Test() {
            ddouble[] expecteds = {
                "3.8097406892397619970069014610436717755480e-1",
                "3.8098314754086177820266750083228300562126e-1",
                "3.8101039532045358359710282319812134088911e-1",
                "3.8105584810542028882386275438835451284913e-1",
                "3.8111956582031698510463824806718771249425e-1",
                "3.8120163275372443937013565435714905774576e-1",
                "3.8130215795723625446257905147037721132682e-1",
                "3.8142127576537016045390328091605297604020e-1",
                "3.8155914644176689071785246194007412816979e-1",
                "3.8171595695842382836429393808444610531497e-1",
                "3.8189192191621758443304285149470101564487e-1",
                "3.8208728461663012040636620282226722810088e-1",
                "3.8230231829644162899931653684631934371758e-1",
                "3.8253732753923039143628351496709486204621e-1",
                "3.8279264987987244046000722247210421370754e-1",
                "3.8306865762091791181282997810301389554891e-1",
                "3.8336575988280300376102456431354198071502e-1",
                "3.8368440491341630797979782302248575503675e-1",
                "3.8402508268667225714864360850990950289078e-1",
                "3.8438832782456945401018897461026882138888e-1",
                "3.8477472288287031056316444787233967535920e-1",
                "3.8518490204720559458080518791818188911579e-1",
                "3.8561955529429864668599555259816194227333e-1",
                "3.8607943308238611056842945124375876666046e-1",
                "3.8656535164611732400886680930770927059114e-1",
                "3.8707819898465896276696624247119814225868e-1",
                "3.8761894164793849050441872870441295526393e-1",
                "3.8818863244559176711898810945083515802441e-1",
                "3.8878841922707987806556047715050084872273e-1",
                "3.8941955491068760549332935233828861779767e-1",
                "3.9008340897510269612701141866570119634094e-1",
                "3.9078148067180717558430865883257927044193e-1",
                "3.9151541427194962716189030977828402385639e-1",
                "3.9228701673081825824385245837216111371324e-1",
                "3.9309827824062298463110308792882970940147e-1",
                "3.9395139625354005693426432927987422567125e-1",
                "3.9484880369932717617177081879862252226095e-1",
                "3.9579320230543788792361660751723708050357e-1",
                "3.9678760216643525605130679114687509079086e-1",
                "3.9783536902308613956748274645625899895380e-1",
                "3.9894028112720089647596138812621673952877e-1",
                "4.0010659812510402977476490174451532642028e-1",
                "4.0133914514694661334826113522887420504404e-1",
                "4.0264341632346655677037223575807532478717e-1",
                "4.0402570338908765655906882391246436915891e-1",
                "4.0549325705620916155517835760199414266413e-1",
                "4.0705449174638346893891809713686627557286e-1",
                "4.0871924848961337234690216657703929715720e-1",
                "4.1049913707580003353988290278111578868973e-1",
                "4.1240798805166135253424414769553060582265e-1",
                "4.1446245991277721587227634649402529654315e-1",
                "4.1668287034659028686426227915904832225385e-1",
                "4.1909435895045648028208309360078577953659e-1",
                "4.2172855429869097231680296158993374571266e-1",
                "4.2462603368819289780581722334098423324013e-1",
                "4.2784007695174618245690819029046884625961e-1",
                "4.3144263037859565013801367144271189709605e-1",
                "4.3553425691628467050381436348757246102745e-1",
                "4.4026177805293553049471678953597594406360e-1",
                "4.4585208702517352751903383031614864717433e-1",
                "4.5268404643879583524141054944921962099667e-1",
                "4.6146549411780511216274081863151494836797e-1",
                "4.7377998736883166354476909527517433058666e-1",
                "4.9466160925454855009065786948668060670991e-1"
            };

            const double n = -16;

            for (int i = 0; i < 64; i++) {
                decimal k = i / 64m;

                ddouble expected = expecteds[i];

                ddouble y = ddouble.EllipticPi(n, (ddouble)k);

                Console.WriteLine(k);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, expected * 1e-29);
            }
        }

        [TestMethod]
        public void EllipticPikp50Test() {
            ddouble[] expecteds = {
                "3.9151541427194962716189030977828402385639e-1",
                "3.9225307898379602411560907729654595096764e-1",
                "3.9299488668739780066538665274205752396175e-1",
                "3.9374087616413515348213409904522151173672e-1",
                "3.9449108670451362897669451097767364889380e-1",
                "3.9524555811677923106700386482713689360620e-1",
                "3.9600433073571222310548424545668668921950e-1",
                "3.9676744543160401816167118722701460270464e-1",
                "3.9753494361942167694855853150333184173580e-1",
                "3.9830686726816466182444654726162160465694e-1",
                "3.9908325891041862864225270918218130584127e-1",
                "3.9986416165211117590826278370473581870651e-1",
                "4.0064961918247461291132093361159280800127e-1",
                "4.0143967578422095535709938227842097277661e-1",
                "4.0223437634393450876271672404987054427847e-1",
                "4.0303376636268755661400538505155398951763e-1",
                "4.0383789196688483224794640508455732398417e-1",
                "4.0464679991934262079067677602749376022133e-1",
                "4.0546053763060851045956289353877992347076e-1",
                "4.0627915317052799133707001005568008345319e-1",
                "4.0710269528006428456428793096977693308822e-1",
                "4.0793121338337797601194636518372745680906e-1",
                "4.0876475760017322610514460988495236140406e-1",
                "4.0960337875831753185347638963602934743450e-1",
                "4.1044712840674222852993738551358869388866e-1",
                "4.1129605882863113712017603217915670465437e-1",
                "4.1215022305490498991004941695640901570379e-1",
                "4.1300967487800950068792604783696142955220e-1",
                "4.1387446886601518831524515175791483575892e-1",
                "4.1474466037703731318426572915229264525300e-1",
                "4.1562030557398454566937455220127572002512e-1",
                "4.1650146143964525443597972066592664334295e-1",
                "4.1738818579212058076235458622938966420646e-1",
                "4.1828053730061375323425978807512746637894e-1",
                "4.1917857550158539568596045140627739519199e-1",
                "4.2008236081528489049814442561334098029085e-1",
                "4.2099195456266817975543736648559047702884e-1",
                "4.2190741898271271876523409564350502035195e-1",
                "4.2282881725014064051723741962527593918260e-1",
                "4.2375621349356154631251355240935614469612e-1",
                "4.2468967281404670752747508735186295672936e-1",
                "4.2562926130414684684087831016330644290598e-1",
                "4.2657504606736606480418787597745077591688e-1",
                "4.2752709523810488996689863792496136512984e-1",
                "4.2848547800208585849516122529637692637632e-1",
                "4.2945026461727547298943120349695967328380e-1",
                "4.3042152643531685068994827912104155270219e-1",
                "4.3139933592348784916428415560520827326827e-1",
                "4.3238376668719995363876278035606297737408e-1",
                "4.3337489349305372513990880472556163848019e-1",
                "4.3437279229246714336454702780608220665713e-1",
                "4.3537754024589373354766910616449011063337e-1",
                "4.3638921574764794343621771392800261689005e-1",
                "4.3740789845135583573776223513790854942113e-1",
                "4.3843366929604978407389538840171974941665e-1",
                "4.3946661053292650755468624421595256234213e-1",
                "4.4050680575278845167820334859173523146484e-1",
                "4.4155433991418922247606676183670170276582e-1",
                "4.4260929937230450785569477822199480251118e-1",
                "4.4367177190855067617426847404807390303822e-1",
                "4.4474184676097402852189689337931824241898e-1",
                "4.4581961465543449936040039447842799637547e-1",
                "4.4690516783760845149639071894704971455342e-1",
                "4.4799860010583609737201394794189612614715e-1",
                "4.4910000684484000091918304354071632454939e-1",
                "4.5020948506034207440919129179064841305679e-1",
                "4.5132713341460748459007858364810766812092e-1",
                "4.5245305226294492377958202100544357955723e-1",
                "4.5358734369119378640731744068735041148570e-1",
                "4.5473011155422992181157398839848401449646e-1",
                "4.5588146151552281203522027537126135197973e-1",
                "4.5704150108777825118513627138172704172207e-1",
                "4.5821033967470188299211765986222706995992e-1",
                "4.5938808861392028803041223380424273374147e-1",
                "4.6057486122109770425752859014013598199675e-1",
                "4.6177077283528791688555829130774754161222e-1",
                "4.6297594086556236901332557849358966227077e-1",
                "4.6419048483895712600983734621178937502596e-1",
                "4.6541452644978297758595343820470697117956e-1",
                "4.6664818961034468524165743764548446659469e-1",
                "4.6789160050311718293660460256738636539306e-1",
                "4.6914488763442841920595071139099724659463e-1",
                "4.7040818188970049354640115643998671052048e-1",
                "4.7168161659030279296673268771866516095158e-1",
                "4.7296532755207298060735051990562530364928e-1",
                "4.7425945314556393201079442844361291573101e-1",
                "4.7556413435807706096251847999824425904854e-1",
                "4.7687951485754493109533953804511055302920e-1",
                "4.7820574105832861723959091367612300011804e-1",
                "4.7954296218899796770239621676219323460221e-1",
                "4.8089133036216573151226179879117957084429e-1",
                "4.8225100064644945977018535836325275212175e-1",
                "4.8362213114063817459179543090354698924367e-1",
                "4.8500488305014403010282841937951523090227e-1",
                "4.8639942076582257539523124252966606720599e-1",
                "4.8780591194524877756099649727057553469393e-1",
                "4.8922452759653968268846545708875755629517e-1",
                "4.9065544216481849335213107738629972634302e-1",
                "4.9209883362141893253558593421062615463838e-1",
                "4.9355488355593305658204919022540559095401e-1",
                "4.9502377727121018479209044179162515054735e-1",
                "4.9650570388141934249140221836546555089167e-1",
                "4.9800085641329258031009777830385952605328e-1",
                "4.9950943191067174836572177338688982729580e-1",
                "5.0103163154248678417437294498984094132087e-1",
                "5.0256766071429933246754451146851887406322e-1",
                "5.0411772918355156965774312273874764081258e-1",
                "5.0568205117866647248301774279100742139057e-1",
                "5.0726084552215246746810592227916525489680e-1",
                "5.0885433575787244453328863709102478139685e-1",
                "5.1046275028264453487577083639024063249740e-1",
                "5.1208632248234986199549196205362916144792e-1",
                "5.1372529087273069872544687874898229990327e-1",
                "5.1537989924507112718208970923256967466661e-1",
                "5.1705039681696142915092809326056635122942e-1",
                "5.1873703838835705981413955526679544811196e-1",
                "5.2044008450315320806112809549720315691897e-1",
                "5.2215980161650665409272854526665406387965e-1",
                "5.2389646226814793402436365299686631056771e-1",
                "5.2565034526193874846279685664132219336944e-1",
                "5.2742173585194214686459932125705741739221e-1",
                "5.2921092593528632390434856180287635929687e-1",
                "5.3101821425211692305161312917737428179819e-1",
                "5.3284390659294760421221740346664454094484e-1",
                "5.3468831601373434818123451811871017751643e-1",
                "5.3655176305901559601582463961492556222172e-1",
                "5.3843457599347791547182796222265364220575e-1",
                "5.4033709104232551285367624527130643661627e-1",
                "5.4225965264085163512824974529303086359253e-1",
                "5.4420261369363080707853775554904397826283e-1",
                "5.4616633584377300015951699831804769589823e-1",
                "5.4815118975270431795319209195987635103979e-1",
                "5.5015755539096369841886003652607157510222e-1",
                "5.5218582234053157306861408369037405129597e-1",
                "5.5423639010923449276186551329895705008277e-1",
                "5.5630966845779954204912020873227665420175e-1",
                "5.5840607774016404067564513379571552861480e-1",
                "5.6052604925767970322303545486464672355799e-1",
                "5.6267002562788623744863938584244612860964e-1",
                "5.6483846116856746138058929123847641525306e-1",
                "5.6703182229784357348807413828779644626102e-1",
                "5.6925058795109639733382840564095451217433e-1",
                "5.7149525001557043447168008254761606125778e-1",
                "5.7376631378354160508298530031345610606514e-1",
                "5.7606429842499786012890987568222597741448e-1",
                "5.7838973748083165542361214600751933474087e-1",
                "5.8074317937760385111361564528593864653767e-1",
                "5.8312518796500222587093989208478232725665e-1",
                "5.8553634307718578420112881971167126449227e-1",
                "5.8797724111927872466628013559487129015472e-1",
                "5.9044849568035569256400718237454588757615e-1",
                "5.9295073817434316048018547072484174108288e-1",
                "5.9548461851035089674057577469348339665952e-1",
                "5.9805080579404296587982170735395357719920e-1",
                "6.0064998906176006946087109344180177850392e-1",
                "6.0328287804921483854211300813841511049888e-1",
                "6.0595020399669953998308442825874425442447e-1",
                "6.0865272049287222238576219765455912614967e-1",
                "6.1139120435932332978034849730242051013824e-1",
                "6.1416645657827104561097810279730363857687e-1",
                "6.1697930326589096394285005775632951811791e-1",
                "6.1983059669395506893785730240759662196679e-1",
                "6.2272121636263747799900439483760341140734e-1",
                "6.2565207012754110921669004700902303652344e-1",
                "6.2862409538421162135861229520436934403124e-1",
                "6.3163826031363401887532226526959910121252e-1",
                "6.3469556519245472554799668876040374859068e-1",
                "6.3779704377193936973395014995836328269361e-1",
                "6.4094376472996582054484370613902893873631e-1",
                "6.4413683320066518292516340828738689207963e-1",
                "6.4737739238666272300383211163013621284173e-1",
                "6.5066662525923850669142686700897348033130e-1",
                "6.5400575635212660514368457079846952298427e-1",
                "6.5739605365510504857244308955301718569770e-1",
                "6.6083883061399961411429248448367785714024e-1",
                "6.6433544824423669223333313393871831026735e-1",
                "6.6788731736563796958169675876122212769973e-1",
                "6.7149590096675702510019263209035787993831e-1",
                "6.7516271670772019679474180487657706125480e-1",
                "6.7888933957125684356704323049419572224794e-1",
                "6.8267740467239364325114329647233600302244e-1",
                "6.8652861023815079786361879607311064739823e-1",
                "6.9044472076952273483149206996493480629892e-1",
                "6.9442757039906078973838104437360585103907e-1",
                "6.9847906645851015894063856882951609727454e-1",
                "7.0260119327219901891283916113276757456511e-1",
                "7.0679601619324635229245067276113173872815e-1",
                "7.1106568590116043605103689992756048612540e-1",
                "7.1541244298105758788165128371550030248147e-1",
                "7.1983862280655803802258803272908723537485e-1",
                "7.2434666075043232641062053425306974303895e-1",
                "7.2893909774929959168399806634050264544808e-1",
                "7.3361858625114359762870769189503803702950e-1",
                "7.3838789657714174110634776184696018884723e-1",
                "7.4324992373232882859338063523337718160332e-1",
                "7.4820769470297770912432441295859450431607e-1",
                "7.5326437628231457299772348167335990759291e-1",
                "7.5842328347034535481517488058888382953321e-1",
                "7.6368788849820542974813982981843778074174e-1",
                "7.6906183053261966123696035403950534781827e-1",
                "7.7454892612184486981649528729166404582204e-1",
                "7.8015318045094345387237406024225455888533e-1",
                "7.8587879948149891441486554475660662236715e-1",
                "7.9173020305903936064042868098856288746557e-1",
                "7.9771203908060827881099578285017184613184e-1",
                "8.0382919882525699475457422515303677668319e-1",
                "8.1008683356189728132218478663856251630334e-1",
                "8.1649037256213929476095972313016562769745e-1",
                "8.2304554266067503681551900869373362196628e-1",
                "8.2975838952271390907385610894826820010193e-1",
                "8.3663530079724217667093131786348271259803e-1",
                "8.4368303135682261894218591284705621280952e-1",
                "8.5090873084969754269294902442114056950375e-1",
                "8.5831997381860602195754099439834248310268e-1",
                "8.6592479267356303705216432243914641064052e-1",
                "8.7373171384357052460919255397646483571236e-1",
                "8.8174979747566483527424473317680061188038e-1",
                "8.8998868109983569125010471437766974260804e-1",
                "8.9845862773635315787220760986167250160171e-1",
                "9.0717057898931811435173293383373072966092e-1",
                "9.1613621374849809513099363736904370837679e-1",
                "9.2536801321276081182561832528348679939786e-1",
                "9.3487933305513503865910216692809934967697e-1",
                "9.4468448367470165185236607103464048794124e-1",
                "9.5479881962778670259081506135335047800524e-1",
                "9.6523883950474394881372076443145363194426e-1",
                "9.7602229772443872743733263859026782583191e-1",
                "9.8716832996311040699883876123084749049912e-1",
                "9.9869759422592885940889394188188388919682e-1",
                "1.0106324299186293445782070820611622220886e0",
                "1.0229970376960460493467263891549372418406e0",
                "1.0358176833704014298535212719393068685265e0",
                "1.0491229297753223260030635322477984768515e0",
                "1.0629439012277066658577131265551843640280e0",
                "1.0773145861418566952613172847534235636530e0",
                "1.0922721844711713307049828885127193528764e0",
                "1.1078575080369107147179802580393215943797e0",
                "1.1241154435222068439846640658831687627036e0",
                "1.1410954900555225259447228126874851038654e0",
                "1.1588523860034766842815528156067348963431e0",
                "1.1774468430005661827438192589011790347409e0",
                "1.1969464095796224804148318806822785664839e0",
                "1.2174264923240208789240985761073384990259e0",
                "1.2389715696379424894129229391362241541004e0",
                "1.2616766425694954148647757499138295716294e0",
                "1.2856489793787537301428432461840953430117e0",
                "1.3110102267770174742601941236013393335594e0",
                "1.3378989824739080543637765267159600471938e0",
                "1.3664739530045968945127090594461223087833e0",
                "1.3969178608922344119223735927461966936943e0",
                "1.4294423206281103029767844626786526432317e0",
                "1.4642939805979271641636145052685346717498e0",
                "1.5017623383916399835707394659299330672370e0",
                "1.5421897960602253946789584355991811322859e0",
                "1.5859847552927187373097461695597307858071e0",
                "1.6336389011844131987690174778529792743844e0",
                "1.6857503548125960428712036577990769895008e0",
                "1.7430552034230875194388178704062041268334e0",
                "1.8064712412205729527449595886149849517982e0",
                "1.8771599299166708295407723819546443349698e0",
                "1.9566162791192362072797270226545548480338e0",
                "2.0468028359333301477823832677382386659429e0",
                "2.1503558644945609607111850078896843507707e0",
                "2.2709146622933868485847673095947723842317e0",
                "2.4136715042011946406669235205392899368490e0",
                "2.5863411458761695615747719778616977652787e0",
                "2.8009892401268232472319284244712121228026e0",
                "3.0777924131600616977004024228137789870740e0",
                "3.4537195109187421402230659471905386562732e0",
                "4.0061518665671908603246859800975378204715e0",
                "4.9359533239463205273377713104746350768774e0",
                "7.0434078792100644324640012573575670738861e0",
            };

            const double k = 0.5;

            for (int i = -256; i < 16; i++) {
                decimal n = i / 16m;

                ddouble expected = expecteds[i + 256];

                ddouble y = ddouble.EllipticPi((ddouble)n, k);

                Console.WriteLine(k);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, expected * 1e-29);
            }
        }
    }
}
