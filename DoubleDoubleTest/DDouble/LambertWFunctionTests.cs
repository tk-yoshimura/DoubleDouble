using DoubleDouble;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using PrecisionTestTools;
using System;

namespace DoubleDoubleTest.DDouble {
    [TestClass]
    public class LambertWFunctionTests {
        [TestMethod]
        public void LambertWTest() {
            ddouble[] positive_expecteds = {
                "0",
                "0.5671432904097838729999686622103555497538",
                "0.8526055020137254913464724146953174668985",
                "1.049908894964039959988697070552897904589",
                "1.202167873197042939212074165495153447502",
                "1.326724665242200223635099297758079660129",
                "1.432404775898300311234078007212058694786",
                "1.524345204984144369122476060675779385409",
                "1.605811996320177596033746190198001992300",
                "1.679016419785598195445932780030038598991",
                "1.745528002740699383074301264875389911535",
                "1.806502575505666146833974103335191240357",
                "1.862816864432357950204259600492568572095",
                "1.915152239536356461278053809387480768315",
                "1.964049113249477915490284190584595106285",
                "2.009943559350565801110425570047912710804",
                "2.053192717462648587277573057065703715550",
                "2.094092878166321830036629137397041533594",
                "2.132892648536085553841611000760279171708",
                "2.169802725605733134797696293397515764518",
                "2.205003278024059970493065977387049832081",
                "2.238649607458893645150421158410882715264",
                "2.270876550711970884865408945757834144084",
                "2.301801945269356500937997351005233119472",
                "2.331529388280119010956562547642192340734",
                "2.360150455522664176680493376603194612457",
                "2.387746502752277127991369489440424860211",
                "2.414390140573880186987804223722975879072",
                "2.440146451545914359628532128958940174283",
                "2.465074001891233138254981908332506491063",
                "2.489225688157678072914155027462289876811",
                "2.512649450201651737868587532005111060586",
                "2.535388875110910933956633218412115707767",
                "2.557483711541749092741626973663120778823",
                "2.578970309998022813997357565480803033631",
                "2.599882001521901467128815761560917830799",
                "2.620249424878907855509538379253722843438",
                "2.640100810441690223808678765335627337273",
                "2.659462227488875203244697841898378578532",
                "2.678357800448373129911500882633312641287",
                "2.696809898661708263033238992250757122920",
                "2.714839303476542068850795393862076177944",
                "2.732465355849723721017866719288712875077",
                "2.749706087133044930657040415864752778502",
                "2.766578335295222859938903270159638422104",
                "2.783097848488405465249583915614837307528",
                "2.799279377581496000813707819009152247325",
                "2.815136759044622140209914615654253322594",
                "2.830682989370233821050749074480599612381",
                "2.845930292049501880034337622259348800416",
                "2.860890177982210866757626984338803536993",
                "2.875573500079602844171587032924835292695",
                "2.889990502718916568152105452052121204719",
                "2.904150866622654125056931773399623346924",
                "2.918063749662424759663074333198925054838",
                "2.931737824024537353791491878167292482093",
                "2.945181310120670770912157399195205091220",
                "2.958402007580566488699391500342652106537",
                "2.971407323623617140281111421073366233727",
                "2.984204299071516030623000208832544217215",
                "2.996799632233991556207188244986773143029",
                "3.009199700873410800732041213930959655132",
                "3.021410582431138728207196125345759577516",
                "3.033438072678511553653129218264431425707",
                "3.045287702937726175078516161073762481086",
                "3.056964756002523840873297914011815130141",
                "3.068474280874968035855324643462680940291",
                "3.079821106422638877299515578199216186004",
                "3.091009854049979748943651700078994605565",
                "3.102044949468157117347029278791599250212",
                "3.112930633639477472140871879103915992245",
                "3.123670972965013571447189138522764770952",
                "3.134269868777511331748819873972809286793",
                "3.144731066195779949449881125193510535706",
                "3.155058162391525565815592634582491257467",
                "3.165254614314898669903569070119526363445",
                "3.175323745920822833840024783487546120197",
                "3.185268754934400957055999273380470233720",
                "3.195092719190305773667064467300978112891",
                "3.204798602578010924324318179296044712668",
                "3.214389260621969707258866391909401509725",
                "3.223867445723367606089368697938565917909",
                "3.233235812087832741950448685441913646305",
                "3.242496920361459882461554210480207171551",
                "3.251653241995665947871267336187719348108",
                "3.260707163359728106192756940159296283493",
                "3.269660989618341864459058186945248962569",
                "3.278516948390160373923611747937446758230",
                "3.287277193202023567000447471058975940085",
                "3.295943806752444373442202929556353971835",
                "3.304518803996878122483174890833493786703",
                "3.313004135066350522776191133532091084555",
                "3.321401688030150574105554959038955451008",
                "3.329713291512499586477432085270180947414",
                "3.337940717172379168965728633466222803392",
                "3.346085682055033337157562760664681889200",
                "3.354149850823047154833751872779629981269",
                "3.362134837874341526787213818953450310052",
                "3.370042209353906359314272941943430141480",
                "3.377873485065618220423069776193760437274",
                "3.385630140290050184888244364529726867492",
                "3.393313607513777422212015704773435660177",
                "3.400925278075309282643018126253190971072",
                "3.408466503732434449936873664936011169319",
                "3.415938598155447709585437523022880353124",
                "3.423342838350432808892430797028537167517",
                "3.430680466016503748901969953213353985659",
                "3.437952688840654822321974795488057388739",
                "3.445160681733636138125552478338158647733",
                "3.452305588010054744992224818107639083365",
                "3.459388520515700410405513672372527358055",
                "3.466410562704908380671612817438368939150",
                "3.473372769670597900451884663947787753341",
                "3.480276169129463869507805797645683212561",
                "3.487121762364648810406314905500686508992",
                "3.493910525128082446802566065062960663309",
                "3.500643408504545854513834816065554615161",
                "3.507321339739395620964437355334178735946",
                "3.513945223031770067690013675583798409942",
                "3.520515940294993745762614107254809155022",
                "3.527034351885797545878594264104141324355",
                "3.533501297303879359868909154263868854344",
                "3.539917595863243816670488491652109886048",
                "3.546284047336678759461566810217433959239",
                "3.552601432574650432494713121167756157320",
                "3.558870514099828438575397971528756866002",
                "3.565092036678385072445272267186332012520",
                "3.571266727869151319268463036870176574974",
                "3.577395298551653342882928583858277466680",
                "3.583478443433998409487677441353382199030",
                "3.589516841541527653278822780448563469250",
                "3.595511156687104664092310887447909792138",
                "3.601462037923863353274007430962971036176",
                "3.607370119981195738342344257390600953498",
                "3.613236023684719999473607859874930428184",
                "3.619060356360931234577711829557970496330",
                "3.624843712227201620049774296205892729328",
                "3.630586672767763027673692613547493197580",
                "3.636289807096273421414664660285445834092",
                "3.641953672305538437259242547412473236899",
                "3.647578813804931319889922908259755959772",
                "3.653165765646027744940137876993171358873",
                "3.658715050836946895445841993818555088130",
                "3.664227181645866393361349351156586748604",
                "3.669702659894156225476219720688694195983",
                "3.675141977239555567481386779571660537615",
                "3.680545615449796325459091850968478982724",
                "3.685914046667058210929194565024625462390",
                "3.691247733663622178662964414185940937834",
                "3.696547130089072024993614754566877969124",
                "3.701812680709377811545070213622205094662",
                "3.707044821638179492126510588372788943899",
                "3.712243980560574629417839213554226675830",
                "3.717410576949700346629567283281646444700",
                "3.722545022276386624172864489819269177937",
                "3.727647720212145681908875335560747022475",
                "3.732719066825750445728045980011510500776",
                "3.737759450773643947408129647757260417649",
                "3.742769253484410915516746446187952118290",
                "3.747748849337532751245561604533934711473",
                "3.752698605836637517112772503532283416955",
                "3.757618883777447470881448998168217809071",
                "3.762510037410618025932704248889079669908",
                "3.767372414599653788397721247850346208024",
                "3.772206356974079487753365850915620853653",
                "3.777012200078036159856402572290434583878",
                "3.781790273514465839346837592227508170269",
                "3.786540901085041253005277562435384525751",
                "3.791264400925990559136240533609909145012",
                "3.795961085639961033550794500429600643243",
                "3.800631262424059744400068681483749451735",
                "3.805275233194203671046487015819258763291",
                "3.809893294705906392292247746983989821542",
                "3.814485738671623383360457866189272847925",
                "3.819052851874773106544357660554728228511",
                "3.823594916280546445613183124051697377165",
                "3.828112209143612607762478602407846679863",
                "3.832605003112825388618337719022572572301",
                "3.837073566333029655630349479729586166936",
                "3.841518162544064043747515467689504917453",
                "3.845939051177052165711666024553820941843",
                "3.850336487448071109255438830933764026937",
                "3.854710722449282617044038190552305312358",
                "3.859062003237609114867778263687670830745",
                "3.863390572921033662295082840761609262785",
                "3.867696670742599941031881419168444742258",
                "3.871980532162185563259117199522404920437",
                "3.876242388936119269227631643228819806550",
                "3.880482469194709984688107263197517727444",
                "3.884700997517753218930667533877990043829",
                "3.888898195008077898193173464512731791627",
                "3.893074279363194442123557768627775252095",
                "3.897229464945102698254271284752477731257",
                "3.901363962848316246706739184169855422085",
                "3.905477980966157570454098204839971113333",
                "3.909571724055376651505207984688015692223",
                "3.913645393799143696604421057392729384708",
                "3.917699188868464913929899644124970591832",
                "3.921733304982068551455704973015373281131",
                "3.925747934964806764924335579243387299981",
                "3.929743268804617305720147793058575727735",
                "3.933719493708087503453259659614804864042",
                "3.937676794154661562012942186839526866245",
                "3.941615351949530788618061216950383856884",
                "3.945535346275245030495695913722731688868",
                "3.949436953742082300893639330530539107468",
                "3.953320348437212332927896454898382988618",
                "3.957185701972688604140149060686418647814",
                "3.961033183532302224552211363737082165453",
                "3.964862959917329974511321505962977313870",
                "3.968675195591207713870044162752067590626",
                "3.972470052723159359272971609743995720409",
                "3.976247691230810639847225776763885488288",
                "3.980008268821815891811222191858132937661",
                "3.983751941034525237896822258616392450784",
                "3.987478861277718616564987589419966612096",
                "3.991189180869432277392459063602027992478",
                "3.994883049074902541388529669355159639349",
                "3.998560613143650837098810283984140022580",
                "4.002222018345733263956566018702211159625",
                "4.005867408007177202295861715520542726089",
                "4.009496923544626783640406813993260090648",
                "4.013110704499218354272963622044197973273",
                "4.016708888569706408664719432796914719770",
                "4.020291611644859836138985190849332976362",
                "4.023859007835147713238292667867507113552",
                "4.027411209503733284778146533826647797622",
                "4.030948347296794207662539313598997651527",
                "4.034470550173186582400670181314987182448",
                "4.037977945433469767130813388769639495886",
                "4.041470658748308457088870314400393646401",
                "4.044948814186268018150373053807286433770",
                "4.048412534241018585650311102924123735354",
                "4.051861939857962978498598300743838985563",
                "4.055297150460303033041164173552506468850",
                "4.058718283974558530574555365513074386918",
                "4.062125456855552476337507031061725846601",
                "4.065518784110876085631905672761999598647",
                "4.068898379324846443946314696628587937834",
                "4.072264354681969432067822362032791274639",
                "4.075616820989920143693114069013662028389",
                "4.078955887702052671527810931972609054536",
                "4.082281662939450797853536776377498070429",
                "4.085594253512530796622150638654504378988",
                "4.088893764942207235900573165555824656724",
                "4.092180301480632361548525723573159527518",
                "4.095453966131519344991865544845540178438",
                "4.098714860670059389497612465800217430114",
                "4.101963085662442410119134641904321788073",
                "4.105198740484990732130913465576195333756",
                "4.108421923342914990994573963897267147023",
                "4.111632731288701163386718830106477568368",
                "4.114831260240137413281811635306032029003",
                "4.118017604997989199238666654385470864783",
                "4.121191859263330858616753915386339457600",
                "4.124354115654541661188768731470967120932",
                "4.127504465723974108269062161888268141555"
            };

            ddouble[] negative_expecteds = {
                "0",
                "-0.003921598821687027170657310135963469278444",
                "-0.007874260500175053759633316598836158153271",
                "-0.01185854456087287617655264641568466471132",
                "-0.01587502662991614821845711458402004885766",
                "-0.01992429907748613627403285069109460520034",
                "-0.02400697169424440626059169221082202810073",
                "-0.02812367240298004529955457829697847393331",
                "-0.03227504800772421014218791439277868956306",
                "-0.03646176498275888721241220420863719463169",
                "-0.04068451030413414521094438032750563900084",
                "-0.04494399232651241902744614179643232008290",
                "-0.04924094170838122109307822000496555473994",
                "-0.05357611238891907356404153140200531057550",
                "-0.05795028262006556094210930996247469581791",
                "-0.06236425605763764596193024141928867826264",
                "-0.06681886291565349340537864232523757083370",
                "-0.07131496118837506178670403109977330500483",
                "-0.07585343794496508533742899364406065574657",
                "-0.08043521070207664364956803274762373540324",
                "-0.08506122888015866113534455028531653441258",
                "-0.08973247534977331289877432069973158412552",
                "-0.09444996807478700105616390269011368591076",
                "-0.09921476185992160724418127295699021527746",
                "-0.1040279502108442717838687243990620500397",
                "-0.1088906673157401217154851211470718470125",
                "-0.1138040901581624169712697756555756858372",
                "-0.1187694407718990532950671226567542021856",
                "-0.1237879886496453022790547140742884569621",
                "-0.1288610533184438765646834414967389161685",
                "-0.1339900070961607016044070718732229459634",
                "-0.1391762780447263343557599500926868477069",
                "-0.1444213531375097291689673973929506964945",
                "-0.1497267816600271712908897796123373444254",
                "-0.1550941788652526197280478624865078709750",
                "-0.1605252299071188108496612238198722133255",
                "-0.1660216940784189003456344243370291251180",
                "-0.1715854093822799864683582610648026979511",
                "-0.1772182974697337247403635684913046446796",
                "-0.1829223689797152992482794396668377900290",
                "-0.1886997293221505396748043510717836577214",
                "-0.1945525849497246739017329983802752424810",
                "-0.2004832501695626899498724695558859482060",
                "-0.2064941545525060759145167426989105160139",
                "-0.2125878510050809675831393078626109765043",
                "-0.2187670245777818056311535761695935862607",
                "-0.2250345020931376602946788902835649304906",
                "-0.2313932626884194155270190827407825808772",
                "-0.2378464493810665456436960974207658140654",
                "-0.2443973817803022289563599804051071666019",
                "-0.2510495700863771213882735813898179826115",
                "-0.2578067305399367818498376374572394712569",
                "-0.2646728025087583897512978318219858311952",
                "-0.2716519674283012526014827045705773782027",
                "-0.2787486698470900919440864065433762952315",
                "-0.2859676408690490474963343962813488305471",
                "-0.2933139243339578848632150558472858093830",
                "-0.3007929061359995795390044038616701604061",
                "-0.3084103471511617467832627648898459553460",
                "-0.3161724203298920876291096665661218310377",
                "-0.3240857526155163623722030052643265192339",
                "-0.3321574724761514051310060147184278227365",
                "-0.3403952639941750356576675634174799280217",
                "-0.3488074286505273404707167178983405996057",
                "-0.3574029561813889030688111040559047533166",
                "-0.3661916061855274358528697951807433718150",
                "-0.3751840025396624776775281296704070173103",
                "-0.3843917431604950314819202146245674078059",
                "-0.3938275282679833473831911121103274088940",
                "-0.4035053110993296930995924475980532469620",
                "-0.4134404760582384540050375303379074418508",
                "-0.4236500506449917520341815986402344539638",
                "-0.4341529593210835156166656563382027018920",
                "-0.4449703298916489374315006608046376045244",
                "-0.4561258662931774584837676840177225737577",
                "-0.4676463062278173360841772283766826078270",
                "-0.4795619884527746491791688379115935715967",
                "-0.4919075635779100170876722952041056803768",
                "-0.5047228952980985224153708945357759164097",
                "-0.5180542182512664225132471278039721887406",
                "-0.5319556476945004622528777561616489804712",
                "-0.5464911809103328306154317829469545058483",
                "-0.5617374011016341451190340663145262422816",
                "-0.5777872102724967243894227199408353868600",
                "-0.5947551134554462858310964410694879212411",
                "-0.6127849219376533447234555796194320502108",
                "-0.6320613818414036672032603838948967727913",
                "-0.6528284856561740196353059822448296827550",
                "-0.6754198530590830187782344568100392369714",
                "-0.7003125940319797891175573818158521795917",
                "-0.7282315339778851190059242061948904460348",
                "-0.7603769305093149071386399264633584361880",
                "-0.7990217286464407600909312445163833978062",
                "-0.8496659806116102982231825786521757246816",
                "-0.9398863980524345419695464132107234809630"
            };

            for ((int i, ddouble x) = (0, 0); i < positive_expecteds.Length; i++, x += 1) {
                ddouble expected = positive_expecteds[i];

                ddouble y = ddouble.LambertW(x);
                ddouble y_dec = ddouble.LambertW(ddouble.BitDecrement(x));
                ddouble y_inc = ddouble.LambertW(ddouble.BitIncrement(x));

                Console.WriteLine(x);
                Console.WriteLine(y);

                PrecisionAssert.AlmostEqual(expected, y, 4e-31d);

                if (x != 0) {
                    PrecisionAssert.AlmostEqual(expected, y_dec, 4e-31d);
                    PrecisionAssert.AlmostEqual(expected, y_inc, 4e-31d);
                }
            }

            for ((int i, ddouble x) = (0, 0); i < negative_expecteds.Length; i++, x -= 1d / 256) {
                ddouble expected = negative_expecteds[i];

                ddouble y = ddouble.LambertW(x);
                ddouble y_dec = ddouble.LambertW(ddouble.BitDecrement(x));
                ddouble y_inc = ddouble.LambertW(ddouble.BitIncrement(x));

                Console.WriteLine(x);
                Console.WriteLine(y);

                PrecisionAssert.AlmostEqual(expected, y, 4e-31d);

                if (x != 0) {
                    PrecisionAssert.AlmostEqual(expected, y_dec, 4e-31d);
                    PrecisionAssert.AlmostEqual(expected, y_inc, 4e-31d);
                }
            }

            PrecisionAssert.AreEqual(-1, ddouble.LambertW(-ddouble.RcpE));
            Assert.IsTrue(ddouble.LambertW(ddouble.BitIncrement(-ddouble.RcpE)) > -1);

            Assert.IsTrue(ddouble.LambertW(ddouble.Epsilon) > 0);
            Assert.IsTrue(ddouble.LambertW(-ddouble.Epsilon) < 0);

            PrecisionAssert.IsFinite(ddouble.LambertW(ddouble.MaxValue));

            PrecisionAssert.AlmostEqual("7.0045838920868939868016508375916341696918104269217e2",
                              ddouble.LambertW(double.ScaleB(1, 1020)),
                              1e-28d);

            PrecisionAssert.IsNaN(ddouble.LambertW(-ddouble.RcpE - double.ScaleB(1, -104)));
            PrecisionAssert.IsNaN(ddouble.LambertW(ddouble.NaN));
            PrecisionAssert.IsPositiveInfinity(ddouble.LambertW(ddouble.PositiveInfinity));
        }

        [TestMethod]
        public void LambertWInvertTest() {

            for (ddouble x = -1; x <= 702; x += 1d / 64) {
                ddouble y = x * ddouble.Exp(x);
                ddouble z = ddouble.LambertW(y);
                ddouble w = z * ddouble.Exp(z);

                Console.WriteLine(y);
                Console.WriteLine(z);
                Console.WriteLine(w);
                Console.WriteLine("");

                PrecisionAssert.AreEqual(y, w, ddouble.Abs(x) * 2e-31d);
            }

            for (ddouble x = -31 / 32d; x > (ddouble)(-1) + double.ScaleB(1, -104); x = (x + 1) / 2 - 1) {
                ddouble y = x * ddouble.Exp(x);
                ddouble z = ddouble.LambertW(y);
                ddouble w = z * ddouble.Exp(z);

                Console.WriteLine(y);
                Console.WriteLine(z);
                Console.WriteLine(w);
                Console.WriteLine("");

                PrecisionAssert.AreEqual(y, w, ddouble.Abs(x) * 2e-31d);
            }
        }
    }
}
