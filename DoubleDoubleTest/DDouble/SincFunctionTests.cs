using DoubleDouble;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace DoubleDoubleTest.DDouble {
    [TestClass]
    public class SincFunctionTests {
        [TestMethod]
        public void SincTest() {
            ddouble[] expecteds = {
                "1.000000000000000000000000000000000000000",
                "0.9896158370180917183873948193975567835736",
                "0.9588510772084060005465758704311427761636",
                "0.9088516800311122223109892703731919137845",
                "0.8414709848078965066525023216302989996226",
                "0.7591876954844689714787926776288394003024",
                "0.6649966577360362872944822474276582151378",
                "0.5622776839279639421323788211245631963075",
                "0.4546487134128408476980099329558724213511",
                "0.3458103097279649961826518558167810314686",
                "0.2393888576415825976207418808744649086814",
                "0.1387858152917569813005677717737382913026",
                "0.04704000268662240736691493426937009328231",
                "-0.03329081062464873139564025924948461569813",
                "-0.1002237793398913851772482285838958814529",
                "-0.1524163516646250059824414862267449327783",
                "-0.1892006238269820628431597736279572735340",
                "-0.2105857313479020057566477243384179307955",
                "-0.2172289150366882345309188921108066173032",
                "-0.2103774292579743041545833169678061606837",
                "-0.1917848549326276937786308812311987946705",
                "-0.1636065701764937200629953694138491715913",
                "-0.1282800591946167102239853046403763779722",
                "-0.08839636130421883999683120161103187746279",
                "-0.04656924969982097880192590776864912660467",
                "-0.005308674647609090700391307326286829974107",
                "0.03309538278274084989183780754995872916696",
                "0.06667319611564705368489317680145044712503",
                "0.09385522838839844148528558451337645399098",
                "0.1135283971050352356443684390913181400986",
                "0.1250666635699651810597951730865396315242",
                "0.1283353263369259510476142969857794974880",
                "0.1236697808279227222260154497806610840146",
                "0.1118308133623442741447748561077476888673",
                "0.09393966030864591607846037180460148069290",
                "0.07139702328619341853023728009053462307960",
                "0.04579094280463961886180806292804835326043",
                "0.01879886328437119442422552966870390327563",
                "-0.007910644259137821819313947845684940803622",
                "-0.03277119934587421947717374501820943976425",
                "-0.05440211108893698134047476618513772816836",
                "-0.07167789564924833444627698321585367161443",
                "-0.08378054856873048552557225569771390806617",
                "-0.09023235980657474521027616007439807550014",
                "-0.09090820059551849609559680900232019153118",
                "-0.08602737755655657152010684167893301185288",
                "-0.07612627605986335017005961100924583797374",
                "-0.06201404049592936368474399955785501864277",
                "-0.04471440983336958097211451902020014935964",
                "-0.02539749836580631204763232205139942327119",
                "-0.005305751788096055114352785589076754181881",
                "0.01432150075538305946620887460643876581185",
                "0.03232054129435699398991961811360636833192",
                "0.04766875379005574671682747433474934013192",
                "0.05953958715197192051966360935122178371685",
                "0.06734417765880925122551192587388349743576",
                "0.07075766826391930770538248600104182883987",
                "0.06972920007949210885178392908432962259587",
                "0.06447552107066779554968167019585603382889",
                "0.05545910260709790976508017691870026915149",
                "0.04335252267714112438864935139925802168097",
                "0.02899161761157635411591724835646746919989",
                "0.01332048270566429603278029133148642242944",
                "-0.002668212871037510733001494227477891815630",
                "-0.01799395729156658092402851551366359560129",
                "-0.03174657518880672667030865794839858406398",
                "-0.04313850559812867065711156572805431439779",
                "-0.05154826703330779607894679968507449407883",
                "-0.05655279363997393278009629087465624108777",
                "-0.05794704181792563430831858256684569609068",
                "-0.05575005745532328840363316407058480823079",
                "-0.05019751210844244546336000490055456721964",
                "-0.04172151370953756131945311580261747396542",
                "-0.03091922761434822951260193621873509663943",
                "-0.01851246586322230038233069892534502527831",
                "-0.005300882501271902772188593583958726843435",
                "0.007888274192786964723907332696750207865706",
                "0.02025077024656512016915963161398587228617",
                "0.03105332665228723170817775166731013743192",
                "0.03967609498624584123381883984606632803520",
                "0.04564726253638138271880499919228411506490",
                "0.04866790674395652549563513704445953063641",
                "0.04862584362335606085686684211784338523907",
                "0.04559790016630702662870186403079806731231",
                "0.03984074469219314437459432239262017980667",
                "0.03177108956672004800051175582420160475586",
                "0.02193669781833470445017198022935043156650",
                "0.01098014363354403366446210161581447673662",
                "-0.0004023322404729034509859207643532878392404",
                "-0.01150428813794755185331865015173524232791",
                "-0.02165220055380042340347681195416682919532",
                "-0.03024564669267239245455405131389598661122",
                "-0.03679219148587698414092722921328677946684",
                "-0.04093498752526251531811143893543799909785",
                "-0.04247157565869771362522809313561911514497",
                "-0.04136293430014413684462374425769957138896",
                "-0.03773243175027599354732472327199138842587",
                "-0.03185495084258847359927069468115773173261",
                "-0.02413704203531119867081451445632009422530",
                "-0.01508948504178241261330276238674286581840",
                "-0.005294070003910921156080203755344252059429",
                "0.004633277044529269153923612155645499653212",
                "0.01408071976557522677644169768688000888782",
                "0.02247774575874757918272301075613093759356",
                "0.02932917117229241298137781896940626819600",
                "0.03424391453761779832273063429045879248709",
                "0.03695689219260064498136318744293472489574",
                "0.03734283419771305137174109453003308631083",
                "0.03542133068164825975675335401219233149906",
                "0.03135296216233109615791505222672175438683",
                "0.02542691024200355530609864690929730626734",
                "0.01804095444801495599429109543439132199018",
                "0.009675206725281036428083681884956876194389",
                "0.0008612913584850362152667733273053702274787",
                "-0.007851075094273558729781157987290453347007",
                "-0.01592802501867170298290966000356879529679",
                "-0.02288392704182646559141977034693466038356",
                "-0.02831027379409382906816091943319993893411",
                "-0.03189936977433740895198074598255906085519",
                "-0.03346146329578000322688848387427206088920",
                "-0.03293438746976205966625829690981527168289",
                "-0.03038524608937445408178267741916425861321",
                "-0.02600417178548475870079469577192391436663",
                "-0.02009066583450068223373569237856109970656",
                "-0.01303347242977629051770228708594313541526",
                "-0.005285318795954527875475720481740614861896",
                "0.002665855736245931055862478081417967537478",
                "0.01032737004175830904448350540437321177043",
                "0.01723208378880282970817369271392852549142",
                "0.02296664568712167543291222628113687407917",
                "0.02719601303217940376648538250691823879411",
                "0.02968280127336592627864244913031977918544",
                "0.03030035939718991350691164777902510043488",
                "0.02903886622690891037822181768976142708502",
                "0.02600417910952765158295020087373240407948",
                "0.02140961281129288935752977448907587235718",
                "0.01556125547411834767154373923623837511444",
                "0.008837814335950815777201020439866752927619",
                "0.001666303713186219266292581441047394456256",
                "-0.005504877057523890171069512968818197980556",
                "-0.01223379055703288584019293976416973330441",
                "-0.01811201522618818206397416795327840359308",
                "-0.02278926102005370292207073792016560225737",
                "-0.02599407348912836580243375126838924739038",
                "-0.02754941259564210380098024913446710496100",
                "-0.02738222273505138675122939350700382175355",
                "-0.02552649007821111127733686877518835511717",
                "-0.02211968865780689108797041646579601443976",
                "-0.01739292252316214758609918970488636598043",
                "-0.01165545300224840799331496472065392264461",
                "-0.005274634656972326874358650465736397252306",
                "0.001347448911239912452177208221443995377134",
                "0.007799173123931192562955174996026771612515",
                "0.01368481564008360891010459733757400793320",
                "0.01864869072134140607086501916790932555430",
                "0.02239651108606393274100110906542808542081",
                "0.02471270221241250649386320440425338756660",
                "0.02547265831671710197079019540759501991485",
                "0.02464925204291083812947761320402330060837",
                "0.02231327078739181951477893824903525586692",
                "0.01862782901198371967469273506590860855599",
                "0.01383717465188102966159441214441533404164",
                "0.008250646341936309706158973393133594451188",
                "0.002222826312076533371491167529342245184748",
                "-0.003868845580602658222032122242187488581958",
                "-0.009647590801373842451977079950948242043614",
                "-0.01476048561386674167579885472469019790256",
                "-0.01889990807111712358451354401105258462579",
                "-0.02182194161703889966426164662070646432734",
                "-0.02336064054704641600002087964793254083713",
                "-0.02343732948516691764664827887092148664741",
                "-0.02206442359834095976881852491553080710907",
                "-0.01934359866578135553975763386725005210446",
                "-0.01545848905357158097754122169520880159933",
                "-0.01066242565480062962791025220543485853666",
                "-0.005262024641617235691057659529170127029086",
                "0.0004023164796684904047262284810594704245572",
                "0.005977780978901864920566931704431922308249",
                "0.01112101837196917070204580454197910772560",
                "0.01551920122193316612033515190719702038257",
                "0.01890896721186929833027510394706758042401",
                "0.02109210463017551998727248298835399513790",
                "0.02194705214091803135559798435453725540623",
                "0.02143555117940602615397705230156321459705",
                "0.01960409451410454750072376172223344715479",
                "0.01658013831619181416754245429057709562632",
                "0.01256336740673732560516429488348290463526",
                "0.007812604440514567171813638985291871032377",
                "0.002629215377557957533224028682689586135370",
                "-0.002661929954692328319120434583601049624039",
                "-0.007732744192298764268608116983826275866593",
                "-0.01227219351444091824270819536840885550180",
                "-0.01600530544424305831343678468428944780829",
                "-0.01870975603052138063335778156859401266275",
                "-0.02022903997119787618593227937125073200099",
                "-0.02048144775267068120345526859718214541891",
                "-0.01946433985223411874204946037934103255679",
                "-0.01725350268129070716435485143249546517503",
                "-0.01399767584310496314326340356977000113158",
                "-0.009908636600870580568073668195377519785892",
                "-0.005247497074078575718287872938252450917733",
                "-0.0003080962965808591767749903578873915337455",
                "0.004601460626841277899343201533575293489957",
                "0.009177960338885587239188772552633686768387",
                "0.01314174854594852420577147205785621192368",
                "0.01625376118120242039451153712498658260976",
                "0.01832988568398289860729588405444675436391",
                "0.01925179312118516498805605685716270549191",
                "0.01897360753924010185745324873916807906285",
                "0.01752404143616545633846226360166581773415",
                "0.01500390908541176960170086800643215513681",
                "0.01157921503512766904864366124715475817301",
                "0.007470285852487437386856342250255457982190",
                "0.002937652564407114319301739199731814600805",
                "-0.001734415173033807252987699057922808643737",
                "-0.006255685850216879433278857060035052214764",
                "-0.01034794534910400455218280220306284808643",
                "-0.01376206795663147114221110304103383799566",
                "-0.01629313464839749259224510879219814209409",
                "-0.01779268407746691329874577082640631696362",
                "-0.01817736678833854248361148514988894907696",
                "-0.01743350152094078171631196923511139862416",
                "-0.01561728962631998643760604709145306709127",
                "-0.01285071349316199473470123065804276642749",
                "-0.009313410751551997860489464669832152461036",
                "-0.005231061541537875140078205047903062651318",
                "-0.0008610363694705710114660819324929388216115",
                "0.003523785611947444750048545598695678102955",
                "0.007652013249961841387377803388232341899438",
                "0.01127049895311762444188263030137213492482",
                "0.01415982124362494769209502029642594620179",
                "0.01614754986201422389939819807055790328059",
                "0.01711849393249201927870841662802413480046",
                "0.01702132668292494164503637571513070845354",
                "0.01587120893616031791260650163937686118099",
                "0.01374828365207619370176401360794278026393",
                "0.01079216961252776069103785580299710818857",
                "0.007192828091566370348070879530835730087248",
                "0.003178396980687252257698623811501633377810",
                "-0.0009992310436010792029290800775425493827048",
                "-0.005080177018370278427094157757973764013821",
                "-0.008812706045732524931619948130684916432621",
                "-0.01196872052673470395300317642379225322234",
                "-0.01435766488189831974585420765501977609420",
                "-0.01583799622964578601669324572918882216019",
                "-0.01632553265008516873339967042877347486888",
                "-0.01579818900026193763677652927266062894734",
                "-0.01429683720513836302536988793309876377652",
                "-0.01192226930079391721412930538315220376961",
                "-0.008828482254249415720700743002737362709621",
                "-0.005212728886632987672616496778642456461528",
                "-0.001302975312056558147160621855189663924789",
                "0.002656439687346141611552990004582825857503",
                "0.006420043234252902919124592474727803673095",
                "0.009756416438613404342939986171903595692938",
                "0.01246239414016188311560836765333297952178",
                "0.01437540684682485442736775943401956041459"
            };

            for ((int i, ddouble x) = (0, 0); i < expecteds.Length; i++, x += 1d / 4) {
                ddouble expected = expecteds[i];

                ddouble y = ddouble.Sinc(x, normalized: false);
                ddouble y_neg = ddouble.Sinc(-x, normalized: false);
                ddouble y_dec = ddouble.Sinc(ddouble.BitDecrement(x), normalized: false);
                ddouble y_inc = ddouble.Sinc(ddouble.BitIncrement(x), normalized: false);

                ddouble y_normed = ddouble.Sinc(x * ddouble.RcpPI, normalized: true);

                Console.WriteLine(x);
                Console.WriteLine(y);

                HPAssert.AreEqual(expected, y, ddouble.Abs(expected) * 1e-30 + 1e-30);
                HPAssert.AreEqual(expected, y_neg, ddouble.Abs(expected) * 1e-30 + 1e-30);

                HPAssert.AreEqual(expected, y_normed, ddouble.Abs(expected) * 1e-29 + 1e-30);

                HPAssert.AreEqual(expected, y_dec, ddouble.Abs(expected) * 1e-30 + 1e-30);
                HPAssert.AreEqual(expected, y_inc, ddouble.Abs(expected) * 1e-30 + 1e-30);
            }

            foreach (bool normalized in new[] { false, true }) {
                Assert.AreEqual(1, ddouble.Sinc(0, normalized));

                HPAssert.AreEqual(
                    ddouble.Sinc(-Math.ScaleB(1, -64), normalized),
                    ddouble.Sinc(ddouble.BitDecrement(-Math.ScaleB(1, -64)), normalized),
                    1e-31
                );

                HPAssert.AreEqual(
                    ddouble.Sinc(-Math.ScaleB(1, -64), normalized),
                    ddouble.Sinc(ddouble.BitIncrement(-Math.ScaleB(1, -64)), normalized),
                    1e-31
                );

                HPAssert.AreEqual(
                    ddouble.Sinc(+Math.ScaleB(1, -64), normalized),
                    ddouble.Sinc(ddouble.BitDecrement(+Math.ScaleB(1, -64)), normalized),
                    1e-31
                );

                HPAssert.AreEqual(
                    ddouble.Sinc(+Math.ScaleB(1, -64), normalized),
                    ddouble.Sinc(ddouble.BitIncrement(+Math.ScaleB(1, -64)), normalized),
                    1e-31
                );

                for (double x = Math.ScaleB(1, 256); x < double.PositiveInfinity; x *= 16) {
                    Assert.IsTrue(ddouble.IsFinite(ddouble.Sinc(+x, normalized)), $"+2^{Math.ILogB(x)}");
                    Assert.IsTrue(ddouble.IsFinite(ddouble.Sinc(-x, normalized)), $"-2^{Math.ILogB(x)}");
                }

                Assert.IsTrue(1 == ddouble.Sinc(-ddouble.Epsilon, normalized));
                Assert.IsTrue(1 == ddouble.Sinc(+ddouble.Epsilon, normalized));

                Assert.IsTrue(ddouble.IsNaN(ddouble.Sinc(ddouble.NaN, normalized)), "nan");
                Assert.IsTrue(ddouble.IsFinite(ddouble.Sinc(ddouble.MaxValue, normalized)), "+lval");
                Assert.IsTrue(ddouble.IsFinite(ddouble.Sinc(ddouble.MinValue, normalized)), "-lval");
                Assert.AreEqual(0, ddouble.Sinc(ddouble.PositiveInfinity, normalized), "+inf");
                Assert.AreEqual(0, ddouble.Sinc(ddouble.NegativeInfinity, normalized), "-inf");
            }
        }
    }
}
