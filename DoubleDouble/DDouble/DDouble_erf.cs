using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace DoubleDouble {
    public partial struct ddouble {
        public static ddouble Erf(ddouble x) {
            if (x.Sign < 0) {
                return -Erf(-x);
            }
            if (IsZero(x)) {
                return PlusZero;
            }
            if (IsInfinity(x)) {
                return PositiveInfinity;
            }
            if (x >= Consts.Erfc.ApproxMin) {
                return 1d - Erfc(x);
            }

            ddouble s = 1d, w = x * x, u = w;
            foreach (ddouble f in Consts.Erf.FracTable) {
                ddouble ds = u * f;
                ddouble s_next = s + ds;

                if (s == s_next) {
                    break;
                }

                u *= w;
                s = s_next;
            }

            ddouble y = RoundMantissa(x * s * Consts.Erf.C, Consts.Erfc.Precision);

            return y;
        }

        public static ddouble Erfc(ddouble x) {
            if (x.Sign < 0) {
                return 1d + Erf(-x);
            }
            if (IsZero(x)) {
                return 1d;
            }
            if (IsInfinity(x)) {
                return ddouble.Zero;
            }
            if (x < Consts.Erfc.ApproxMin) {
                return 1d - Erf(x); 
            }

            int table_index = (int)Round((x - Consts.Erfc.ApproxMin) / Consts.Erfc.TableBin);
            if (table_index < Consts.Erfc.Tables.Count) {
                ddouble s = x - (Consts.Erfc.ApproxMin + Consts.Erfc.TableBin * table_index);
                ReadOnlyCollection<ddouble> table = Consts.Erfc.Tables[table_index];

                ddouble inv_erfcx = table[0]
                    + s * (table[1] + s * (table[2] + s * (table[3] + s * (table[4]
                    + s * (table[5] + s * (table[6] + s * (table[7] + s * (table[8]
                    + s * (table[9] + s * (table[10] + s * (table[11] + s * (table[12]
                    + s * (table[13] + s * (table[14] + s * (table[15] + s * (table[16]
                    + s * (table[17] + s * (table[18] + s * (table[19] + s * (table[20]))))))))))))))))))));

                ddouble y = RoundMantissa(Exp(-x * x) / inv_erfcx, Consts.Erfc.Precision);

                return y;
            }
            else {
                ddouble w = x * x;

                ddouble c = x * ddouble.Exp(-w) / ddouble.Sqrt(ddouble.PI);

                ddouble f = 
                    (ddouble.Sqrt(25 + w * (440 + w * (488 + w * 16 * (10 + w))))
                     - 5 + w * 4 * (1 + w))
                    / (20 + w * 8);

                int n = 8;
                for (int k = 4 * n - 3; k >= 1; k -= 4) {
                    ddouble c0 = (k + 2) * f;
                    ddouble c1 = w * ((k + 3) + ddouble.Ldexp(f, 1));
                    ddouble d0 = (k + 1) * (k + 3) + (4 * k + 6) * f;
                    ddouble d1 = ddouble.Ldexp(c1, 1);

                    f = w + k * (c0 + c1) / (d0 + d1);
                }

                ddouble y = RoundMantissa(c / f, Consts.Erfc.Precision);

                return y;
            }
        }

        private static partial class Consts {
            public static class Erf {
                public static readonly ReadOnlyCollection<ddouble> FracTable = GenerateFracTable();
                public static readonly ddouble C = Ldexp(Rcp(Sqrt(PI)), 1);

                private static ReadOnlyCollection<ddouble> GenerateFracTable() {
                    List<ddouble> table = new();

                    for (int k = 1; k < 32; k++) {
                        ddouble c = ddouble.TaylorSequence[k] / checked((2 * k + 1));
                        c = ((k & 1) == 0) ? c : -c;

                        table.Add(c);
                    }

                    return table.AsReadOnly();
                }
            }

            public static class Erfc {
                public static readonly ddouble ApproxMin = 0.5d;
                public static readonly ddouble TableBin = 0.25d;
                public const int Precision = 92;

                public static readonly ReadOnlyCollection<ReadOnlyCollection<ddouble>> Tables = (new List<ReadOnlyCollection<ddouble>>() {
                    GenerateP050Table(),
                    GenerateP075Table(),
                    GenerateP100Table(),
                    GenerateP125Table(),
                    GenerateP150Table(),
                    GenerateP175Table(),
                    GenerateP200Table(),
                    GenerateP225Table(),
                    GenerateP250Table(),
                    GenerateP275Table(),
                    GenerateP300Table(),
                    GenerateP325Table(),
                    GenerateP350Table(),
                    GenerateP375Table(),
                    GenerateP400Table(),
                    GenerateP425Table(),
                    GenerateP450Table(),
                    GenerateP475Table(),
                    GenerateP500Table(),
                    GenerateP525Table(),
                    GenerateP550Table(),
                    GenerateP575Table(),
                    GenerateP600Table()
                }).AsReadOnly();

                private static ReadOnlyCollection<ddouble> GenerateP050Table() {
                    ddouble[] table = new ddouble[] {
                        "+1.6241930857480706697147094871341583473039e0",
                        "+1.3524747450607590539741496034168062308119e0",
                        "+1.7825763670842187365863830201206781268656e-1",
                        "-5.5267338104750050530576500272933023579965e-2",
                        "+1.0063510302676502162805878181210028241265e-2",
                        "+9.0515128011642849853304978918729402882897e-4",
                        "-1.5386125499422213906813648303318253383745e-3",
                        "+6.2091087480198850967634493753984408681170e-4",
                        "-1.0687524046361261078079340343119022848701e-4",
                        "-2.7679754345867407321449559982181573592248e-5",
                        "+2.7601008097263345352917792224796188761976e-5",
                        "-1.0001183534159800608329876947864200558282e-5",
                        "+1.2948459531237504032150919861788295033846e-6",
                        "+6.9200984963125498579427958193884474058810e-7",
                        "-5.1870280924840509980522722544474443054009e-7",
                        "+1.6602025395888214933292305329312613461999e-7",
                        "-1.3174259924752429652369728549478275631711e-8",
                        "-1.5774235733312987669856609856998418423788e-8",
                        "+9.6675359557466449110177293598636244147595e-9",
                        "-2.7108383664528323953591853430349355594917e-9",
                        "+5.2735995227018767194474554534204826149524e-11",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP075Table() {
                    ddouble[] table = new ddouble[] {
                        "+1.9726291772207765648203551442838953136673e0",
                        "+1.4318795764349680182826942219347064247136e0",
                        "+1.4064418535893090515229166791083924862002e-1",
                        "-4.5040268695510834269094435418226273764925e-2",
                        "+1.0060656041502664081252887302515611402368e-2",
                        "-6.8922443563134849655074825847557153405726e-4",
                        "-6.5690682644916746375571231940899357048733e-4",
                        "+3.8493892825381064712346423599528075222729e-4",
                        "-1.1425648192987921938346586056241910270688e-4",
                        "+1.2502762897189412984983053017785105800127e-5",
                        "+6.9511272722300022041731940939562874600466e-6",
                        "-4.8960794639807729055442577790939623790643e-6",
                        "+1.6209369553910589627471285276236169753167e-6",
                        "-2.3192063896325831652353039178753090036446e-7",
                        "-7.5584403945723570307862501276117249051341e-8",
                        "+6.5227420690261044678888795344782053759577e-8",
                        "-2.3667377998731572725453855121327427249095e-8",
                        "+4.1028971179081977791402833356509593541306e-9",
                        "+7.5770605536490178722156159741777691307691e-10",
                        "-8.6741069546879323324414813190000297856099e-10",
                        "+3.4448228376789501775639617515654450123958e-10",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP100Table() {
                    ddouble[] table = new ddouble[] {
                        "+2.3387240665100064766139367309817876522370e0",
                        "+1.4943687032589814659568256057380207815435e0",
                        "+1.1049769242063478626473629330114521979143e-1",
                        "-3.5568985060657154671035557589558698278224e-2",
                        "+8.7643545660279614327766691710248274155834e-3",
                        "-1.2619412765471547889298366473828284658502e-3",
                        "-1.6297056196369785217125754967151706581301e-4",
                        "+1.9242534207101356659301314185007606438181e-4",
                        "-7.6389222651238708642719460782208441240605e-5",
                        "+1.7891534180155419963045782429515734266228e-5",
                        "-1.0085278019568422487397616543118008391243e-6",
                        "-1.3338642324550372379962779644029047411891e-6",
                        "+7.5891805546732660229478707390727997403475e-7",
                        "-2.3535003191971948130818936482705903213048e-7",
                        "+3.7077687324115094411194161772822861870574e-8",
                        "+6.2553923975397974356829942717322082619988e-9",
                        "-6.9674482672182298166290312815549552261139e-9",
                        "+2.7893020961277168458276300545239340451602e-9",
                        "-6.4908877887127854338094133549774853152497e-10",
                        "+2.8483866883680017450566867467386653938741e-11",
                        "+5.4043132111107180204018313368766604157219e-11",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP125Table() {
                    ddouble[] table = new ddouble[] {
                        "+2.7186995569633461800803040508140127470721e0",
                        "+1.5434708286936463022882664989324162637904e0",
                        "+8.6904321621156265200834017532646015996941e-2",
                        "-2.7621784729129152311516391064749880649539e-2",
                        "+7.1206160508718879842503287123248361531114e-3",
                        "-1.3122397223289518204922882389594879310662e-3",
                        "+6.2294499915977232019224183053935265071523e-5",
                        "+7.6788925438961957380915448358713707904032e-5",
                        "-4.1208476394066410104218817936867559358527e-5",
                        "+1.2812698824814403747752196064218978353873e-5",
                        "-2.4452406765280420556164490880948485337392e-6",
                        "+1.7297233521144761851461660759466729264979e-8",
                        "+2.1392462254865033831709795640527038119351e-7",
                        "-1.0462391146995598125262229946262086061322e-7",
                        "+3.0820658758030095017391274657343090918537e-8",
                        "-5.2423727620648581963522913395366584373751e-9",
                        "-3.1367058548639548808178706009085537624087e-10",
                        "+6.3703345586703816237777482333929601416227e-10",
                        "-2.7924199549292444690748122103078483724684e-10",
                        "+7.6094435645419428481025105654670930690185e-11",
                        "-1.0926056513494777690126811373769301626049e-11",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP150Table() {
                    ddouble[] table = new ddouble[] {
                        "+3.1095937465872430474703598205072901656501e0",
                        "+1.5821637914721947564375896697724479333452e0",
                        "+6.8658146268639258168174230530074374088895e-2",
                        "-2.1293361528117498877172303961970332365269e-2",
                        "+5.5708963952021747713869749987931945916888e-3",
                        "-1.1483549751873786866004512372192929248707e-3",
                        "+1.3941750732978331542302758369841878515362e-4",
                        "+1.8765579139434283867569679534629421967610e-5",
                        "-1.8909876382516948036704564457939776715478e-5",
                        "+7.2560337037752775451918202685231350517332e-6",
                        "-1.8776513326041741100355169031548940693982e-6",
                        "+2.9649434786746895900401466816801017589099e-7",
                        "+1.2485372798601069308201905800660793232831e-8",
                        "-2.9863652190314584024404635792400065508965e-8",
                        "+1.2995145993611114096198914768481383509584e-8",
                        "-3.6646296182832754387901371068794736222502e-9",
                        "+6.5845245069356538595154656945509112992866e-10",
                        "-8.9960507544523422367527021186884128606127e-12",
                        "-4.9887560864122357376515598479709156276570e-11",
                        "+2.4229465791143598738936734097275987103877e-11",
                        "-7.3029635307998831625627070617802001124036e-12",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP175Table() {
                    ddouble[] table = new ddouble[] {
                        "+3.5091137946170987099518581238313058176278e0",
                        "+1.6128269522007471537051875781826642566212e0",
                        "+5.4606220091349496748201036250651747090312e-2",
                        "-1.6394951745808471497998360335183123279446e-2",
                        "+4.2720509080810872042444729753040597877056e-3",
                        "-9.2800223359535911092126765257576773761910e-4",
                        "+1.4728225961189393067604704560857209990132e-4",
                        "-5.8669583258463039487285316372618977383636e-6",
                        "-7.1054726039454133452447169406323581893416e-6",
                        "+3.5619925783820595727882765839547149499126e-6",
                        "-1.1029261066058500421700542554721501436153e-6",
                        "+2.4544349585642867981913620167900780164734e-7",
                        "-3.2252080255710431649253483156889499047190e-8",
                        "-3.0391575496126349407129634786093462515287e-9",
                        "+3.7149916957744524258643453093004269542245e-9",
                        "-1.4691925146881772229654135437979829642896e-9",
                        "+3.9824746402577177491257230930433026240875e-10",
                        "-7.4157381784287993844241688907690591076688e-11",
                        "+4.6731769628541000710707314353237943194619e-12",
                        "+3.3000916754784957622249465203938370188219e-12",
                        "-1.8478181572083121841190819803854323733874e-12",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP200Table() {
                    ddouble[] table = new ddouble[] {
                        "+3.9154930672523089723501211233048511864509e0",
                        "+1.6373057368677665561267642771359122921949e0",
                        "+4.3775493071127652729224203863865937704598e-2",
                        "-1.2658001670390673163205268089525477370360e-2",
                        "+3.2453602793660040075623676178022931706327e-3",
                        "-7.1948868039915670277246678072124903926859e-4",
                        "+1.2845416495544347264059903728800548643405e-4",
                        "-1.3840582908658475415416982051297190080666e-5",
                        "-1.6241489142787681699511942606948688907952e-6",
                        "+1.5347540467792150392280371266739473655428e-6",
                        "-5.6366535822425611262766475591494899830665e-7",
                        "+1.4865318540039661687044358198503071545355e-7",
                        "-2.9033835794770120020375005195916432185368e-8",
                        "+3.1708134103927162868899161607971652142562e-9",
                        "+4.8395025100905055136913610217216618895959e-10",
                        "-4.1830531751453266500319772157311415444176e-10",
                        "+1.5246702285850500002725004427002752869874e-10",
                        "-3.9811356610566367398951002992669104437011e-11",
                        "+7.5656499343499656133024830916562503358108e-12",
                        "-7.2730299461448503110916342408882776871944e-13",
                        "-1.7513014090905828258265630223218509453934e-13",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP225Table() {
                    ddouble[] table = new ddouble[] {
                        "+4.3273696935697093152414604934083319543763e0",
                        "+1.6570096189997880239617337396463364504994e0",
                        "+3.5393816499998980140306913759092714482544e-2",
                        "-9.8241332807293561115908151792293840545782e-3",
                        "+2.4585747681537571500341167347822975908283e-3",
                        "-5.4576222764332106000212238368385194721699e-4",
                        "+1.0300373306730173780821782450501905564258e-4",
                        "-1.4521994620605570293269678746823504680892e-5",
                        "+5.7504798076952826484064139135274484608284e-7",
                        "+5.4616619682019129428007633927702857225780e-7",
                        "-2.5954290509011669103799414148098115034666e-7",
                        "+7.8075301049262949517260681484212926676044e-8",
                        "-1.8074915854729762257952069615446216628729e-8",
                        "+3.1414487231239076990990604727071610024859e-9",
                        "-2.8296623109585858640287046455239818703962e-10",
                        "-6.2761383403356671704663968422350551252747e-11",
                        "+4.3120574760114232746400566672352349922843e-11",
                        "-1.4627235009508319631705692305824878227557e-11",
                        "+3.6832586091060707276875602326138727900640e-12",
                        "-7.0590784529735504452378604890269186681763e-13",
                        "+8.3483869523112767746660882789257010577521e-14",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP250Table() {
                    ddouble[] table = new ddouble[] {
                        "+4.7436898048768291447341237781739007773951e0",
                        "+1.6730080828304468375980956492431785643559e0",
                        "+2.8868149258232230416521508236604821718714e-2",
                        "-7.6764157373277573359686110267485028156118e-3",
                        "+1.8652088489468875236382342145338644385750e-3",
                        "-4.0960064271300454223343843878391427593591e-4",
                        "+7.9131976374075332928125006361111786043369e-5",
                        "-1.2541751242848223615996156201892683712852e-5",
                        "+1.2440192749493911476228288481017723710044e-6",
                        "+1.1172962270488237549932506614001324630829e-7",
                        "-1.0657783651517062919449368702243270363267e-7",
                        "+3.7367234799470416022431958856848413210070e-8",
                        "-9.6879179302937465676641383956181629515082e-9",
                        "+2.0070575856289171315566008080288014670720e-9",
                        "-3.1351704723505078760354161963391283108505e-10",
                        "+2.2947007382359483885787874986446923657256e-11",
                        "+7.0866889845574712448184242815664750256345e-12",
                        "-4.1052048547613496195217780170003800589854e-12",
                        "+1.3052470982060443482427462434934251986743e-12",
                        "-3.1714926689505024359660266174821302993220e-13",
                        "+6.0747746364386522634965343427584201618468e-14",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP275Table() {
                    ddouble[] table = new ddouble[] {
                        "+5.1636330454617807565907507758012619788249e0",
                        "+1.6861118478986625132695502650746376019116e0",
                        "+2.3750678792147664375129283411360149948249e-2",
                        "-6.0441236105075085366440797450918290582249e-3",
                        "+1.4208846331463034911286189119909127159232e-3",
                        "-3.0624266246730047001452801317152315346575e-4",
                        "+5.9435033343143833451891343023268727454485e-5",
                        "-9.9607011138101804143821828045833894332194e-6",
                        "+1.2755684240970036596606807753324923091398e-6",
                        "-5.4542936681726642766269672703721782024421e-8",
                        "-3.5960417664542698712214488340738545964121e-8",
                        "+1.6447143810087399768741771645802704006563e-8",
                        "-4.7543476243138373867723685402483761473615e-9",
                        "+1.0932639171212631140399725756795108941855e-9",
                        "-2.0541406476978228410944267643706906673791e-10",
                        "+2.9055534577052920247476725451952678903189e-11",
                        "-1.6856603910484229969990298131430776103577e-12",
                        "-7.1872600270319225478352904204768038912740e-13",
                        "+3.6349226113438235213387312473663452670919e-13",
                        "-1.0891117309899931979395064148411426608439e-13",
                        "+2.5545326830916634920170163874689119118813e-14",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP300Table() {
                    ddouble[] table = new ddouble[] {
                        "+5.5865562506168177582613079752114875232270e0",
                        "+1.6969370699489362165447099618230579049453e0",
                        "+1.9705854233319924405184299310303993618567e-2",
                        "-4.7973605946789261432465267899392629750369e-3",
                        "+1.0886949217858507013762492484798333460558e-3",
                        "-2.2908145999923677117382183790203465060306e-4",
                        "+4.4141418358428317275690518334321041923261e-5",
                        "-7.5817696929928794559444220946798564621393e-6",
                        "+1.0861524384306176910272104769437967255664e-6",
                        "-1.0156402373222621849524284159454272033802e-7",
                        "-6.1788656301063628281402654386191695211934e-9",
                        "+6.4916283246223237471627608218649600232651e-9",
                        "-2.1779363797598087845360039071354340058833e-9",
                        "+5.4598722495983298698124613386260823525917e-10",
                        "-1.1341611029922875639438771824930882801453e-10",
                        "+1.9518524667541899897474986994742097157716e-11",
                        "-2.5145311975611006280061244493188130604979e-12",
                        "+1.1102023440836856260780349435701129764862e-13",
                        "+6.6655290932205223786607493426257061924190e-14",
                        "-3.0108084593687270857501825953542368067039e-14",
                        "+8.5372284583359649440905815552493823233618e-15",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP325Table() {
                    ddouble[] table = new ddouble[] {
                        "+6.0119512145666578314355648679329334746501e0",
                        "+1.7059543073396638778150575635688770921699e0",
                        "+1.6482738529275037162811712407638826304705e-2",
                        "-3.8390266767248843424732064573704564474976e-3",
                        "+8.3986369276969923083777974163187999219830e-4",
                        "-1.7192089408494100097845946120391449589428e-4",
                        "+3.2638206650959824188655257179351115690483e-5",
                        "-5.6426788351234678398407331947995651197057e-6",
                        "+8.5339056031594873366974352504189530763299e-7",
                        "-1.0085753824484490981699091792027463185677e-7",
                        "+4.7380216835697292758722002636849733027250e-9",
                        "+2.0682351851294086749548542177037467591655e-9",
                        "-9.2674941764938294856683890683958084980784e-10",
                        "+2.5654445375774540396420825903218061315687e-10",
                        "-5.7377512257104175831640800161068135294938e-11",
                        "+1.0905115694309261950890676207414460893382e-11",
                        "-1.7321458078683600416170994138697518290430e-12",
                        "+2.0416846928216247824252943590631796847969e-13",
                        "-6.3919847785278103125588427744057931197321e-15",
                        "-5.7195616599983302173847729243982215612502e-15",
                        "+2.3443370556520763467914910884166837687205e-15",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP350Table() {
                    ddouble[] table = new ddouble[] {
                        "+6.4394130982304337280687084582386595684796e0",
                        "+1.7135251747525370315784726880683356425036e0",
                        "+1.3893357058487795285011426268923780646879e-2",
                        "-3.0971409225510347150764260362397884047533e-3",
                        "+6.5269627090948430728521500407746451989879e-4",
                        "-1.2967116504859728344483681643067672750885e-4",
                        "+2.4129211813357793710519424319063863371089e-5",
                        "-4.1518976252346246159662886970720902076351e-6",
                        "+6.4361132645081254815852503051376195649119e-7",
                        "-8.4472093694671269958091378241044952023455e-8",
                        "+7.5537355656101992378378188514181019970292e-9",
                        "+2.6366346736644280260026805473955870818232e-10",
                        "-3.5290936161108631225479443443447826316718e-10",
                        "+1.1394783453301073647721369413852413087901e-10",
                        "-2.7428179235994225274366311422825956996060e-11",
                        "+5.5722654905285602186701197345215814236631e-12",
                        "-9.7815257669374091383196770260363843415651e-13",
                        "+1.4427506157466360673703591285103700876893e-13",
                        "-1.5616063567089357620275420475863002693649e-14",
                        "+3.0067301456577010139631472154980960688129e-16",
                        "+4.5793056496903624574692315347592137621053e-16",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP375Table() {
                    ddouble[] table = new ddouble[] {
                        "+6.8686167625176346094691545225235423304476e0",
                        "+1.7199295348253172558637169039897151434460e0",
                        "+1.1796334242594401094276249068692515739972e-2",
                        "-2.5184828724804368930849857720250197538920e-3",
                        "+5.1112386531273150257293078866417122332885e-4",
                        "-9.8403255509502412131515275742760070789706e-5",
                        "+1.7885087714356846620725627767616658666482e-5",
                        "-3.0404645041343668533770295127211330500101e-6",
                        "+4.7491648481868242790875658405399453641360e-7",
                        "-6.5623732474431740772476355796034169769704e-8",
                        "+7.2396048633127178294922467653366562401043e-9",
                        "-3.6962145046654927242878448952110152777871e-10",
                        "-1.0511268694022591931782678143544943786765e-10",
                        "+4.7172707007163151492381174538686883808797e-11",
                        "-1.2515352131275965519936842494927729375933e-11",
                        "+2.6964890442476237880150231518334750693405e-12",
                        "-5.0383509235457709693166369552238744056895e-13",
                        "+8.2282535278448129624060876209747569122872e-14",
                        "-1.1326485355719443484204946636567730587816e-14",
                        "+1.1290642318257268750686153450346522972860e-15",
                        "-8.8141960663600179605897249422444660091436e-18",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP400Table() {
                    ddouble[] table = new ddouble[] {
                        "+7.2992989704878176290019053238541064043215e0",
                        "+1.7253856095335045377566669405296168419501e0",
                        "+1.0084756737329613589320237118561480723675e-2",
                        "-2.0636629622432811270204849750764193240331e-3",
                        "+4.0334645986347058043616041421485819647605e-4",
                        "-7.5181245168549493176450115511122672437930e-5",
                        "+1.3315000210380914390664781654855508717404e-5",
                        "-2.2252510513049516090422767699056606359020e-6",
                        "+3.4651937987295298148848730888728115539529e-7",
                        "-4.9046363882999056825108336713536508849218e-8",
                        "+5.9584353276819479451493290245714079490746e-9",
                        "-5.1371713585434461364152551496977591108387e-10",
                        "-6.9447352673786371614689027005234429213583e-12",
                        "+1.7333676694641503785695583340570856260794e-11",
                        "-5.4308726549936614151141839420626120510862e-12",
                        "+1.2527483288384453930861311248904151616218e-12",
                        "-2.4601946495672933452012951924219859984462e-13",
                        "+4.2665616225415217568669913502185383955091e-14",
                        "-6.5202617121240539060120908782980090157114e-15",
                        "+8.4115178827766763379576605437314255739134e-16",
                        "-7.7401976929540699884654391226253799689456e-17",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP425Table() {
                    ddouble[] table = new ddouble[] {
                        "+7.7312449307064357762644071547794068420056e0",
                        "+1.7300648662441409011117748312168193163313e0",
                        "+8.6772541743009620634704540057635738698258e-3",
                        "-1.7034300897956698141633428358469635403535e-3",
                        "+3.2072479345158334176107945168168501189851e-4",
                        "-5.7848914051074484584088940362661232544579e-5",
                        "+9.9675024591699462867504980278161883440513e-6",
                        "-1.6320558916115242476679045060643098971610e-6",
                        "+2.5160355654451534872521445880936413601917e-7",
                        "-3.5900882438774741405951264704719704969496e-8",
                        "+4.5765298960716376199522871037846031385415e-9",
                        "-4.7519032012011175109966036970456916873534e-10",
                        "+2.5889553598105757957014710136228183790941e-11",
                        "+4.7414223290135662356402810347916409119149e-12",
                        "-2.1940005090969884197631976181361421163307e-12",
                        "+5.5977556053321266909473823387090833057363e-13",
                        "-1.1574038535241724246738684268281609987316e-13",
                        "+2.0976397784847555766867856682754256321016e-14",
                        "-3.4001910981343762694570337105969317328919e-15",
                        "+4.8857207550593832100542345895613085693172e-16",
                        "-5.9280039998808546231873597944804891278636e-17",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP450Table() {
                    ddouble[] table = new ddouble[] {
                        "+8.1642780582339220077225657548928453581608e0",
                        "+1.7341030713597122980676299240181398098517e0",
                        "+7.5114667192359492454500971547737010679550e-3",
                        "-1.4159561000820520117898786636810420340451e-3",
                        "+2.5693025950558878812797706577125602070455e-4",
                        "-4.4836176587037783951832165044753478946279e-5",
                        "+7.5081370030209857025020420671173861291954e-6",
                        "-1.2016357194332152656870036517824609717378e-6",
                        "+1.8252757081472255483477045553870384968078e-7",
                        "-2.5994465502114131773062107028222026093697e-8",
                        "+3.3905983875894187736617482910433186881623e-9",
                        "-3.8433726510083611555303760318699373402705e-10",
                        "+3.2090354407937492631247284747749379346939e-11",
                        "-1.0724432033214150398072123505814015005135e-13",
                        "-7.7564101034257412434932324873633206009059e-13",
                        "+2.3832726358473796108350813292805280211916e-13",
                        "-5.2730107256249210245840912387674487783060e-14",
                        "+9.9578118712278989227824508645239574755614e-15",
                        "-1.6806266671861486367510937511939862686789e-15",
                        "+2.5605296536196607741963588231577660589150e-16",
                        "-3.4731940495255238138574910762260241194703e-17",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP475Table() {
                    ddouble[] table = new ddouble[] {
                        "+8.5982521300406244115303220636291796004858e0",
                        "+1.7376085374103039994069121841069142332099e0",
                        "+6.5392593187596113092166753960694172392963e-3",
                        "-1.1848569714838506085951519930241874204345e-3",
                        "+2.0731365035759883487294201077125175800949e-4",
                        "-3.5003407892413871038489555092775343141979e-5",
                        "+5.6931951515763616971251695047104219231021e-6",
                        "-8.8918155421124619859918307554823774609966e-7",
                        "+1.3264664225234588105708065697525795206142e-7",
                        "-1.8730376454788194238017171212215814785541e-8",
                        "+2.4631381083732166884540032227655132343924e-9",
                        "-2.9192753734463259115519295439868327448765e-10",
                        "+2.8703114647931950967571848760992494059604e-11",
                        "-1.6392956981878725726964062721226712968199e-12",
                        "-1.8907094840323487166336549015002656906604e-13",
                        "+9.4020580121203253762065404766644782796339e-14",
                        "-2.3187645153294011992789849074790222109740e-14",
                        "+4.5977763746865609347901273110592787016033e-15",
                        "-8.0313003735269049410864408355940410146409e-16",
                        "+1.2709928219185368015805332351761665505024e-16",
                        "-1.8283878097458170506144614179553922054537e-17",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP500Table() {
                    ddouble[] table = new ddouble[] {
                        "+9.0330452316839983863495899827247076514146e0",
                        "+1.7406683117316231150263484059961887519203e0",
                        "+5.7232061442728265523170254845647570811574e-3",
                        "-9.9775600804135411138806912980473422244587e-4",
                        "+1.6844457625239774219444428596558982350155e-4",
                        "-2.7523244410507604305830576992405961081440e-5",
                        "+4.3465705663288280336425492061990762302382e-6",
                        "-6.6176806363340244401614897833828267568946e-7",
                        "+9.6731579464875767619356865671439657064645e-8",
                        "-1.3482213024560364772741694099507786056889e-8",
                        "+1.7709081848325577206921239546934436816685e-9",
                        "-2.1447022233608999991048111849647308845337e-10",
                        "+2.2828142983513998383558973191748992936352e-11",
                        "-1.8501386114443427290729219930419638920322e-12",
                        "+3.0136092335712584400989856148301499602114e-14",
                        "+3.1787339055625288059284488562177705422084e-14",
                        "-9.7063696616395235078270217623344129601856e-15",
                        "+2.0652262464874416461143317756136900876974e-15",
                        "-3.7436197111706420836499597565771450231492e-16",
                        "+6.1040137324556726778078558319309144258494e-17",
                        "-9.1071865176510824356596770593208136483284e-18",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP525Table() {
                    ddouble[] table = new ddouble[] {
                        "+9.4685550521939627396798323636012142366243e0",
                        "+1.7433528501575818731222974771524208951074e0",
                        "+5.0339970906504910968893291347660798254363e-3",
                        "-8.4524060637923642398743004421902338487568e-4",
                        "+1.3777840397375004566713037308458779400864e-4",
                        "-2.1793542103033914623835874993937593106530e-5",
                        "+3.3414222074778871568395403379745897931861e-6",
                        "-4.9557900660244537144157952686534846576105e-7",
                        "+7.0866196271426299849664586248808581243935e-8",
                        "-9.7187879051754250473527275729343708914273e-9",
                        "+1.2672076580039152030528674113099659538423e-9",
                        "-1.5470015488923592982161497988890352389191e-10",
                        "+1.7154528341215171456272441706935739206354e-11",
                        "-1.6045559912990598810353921052578486605743e-12",
                        "+9.4624153623056037858974306608817175154054e-14",
                        "+6.5444497070526012380591367669505880633454e-15",
                        "-3.7350334922297899867583240161467098830783e-15",
                        "+8.9623556219556728124720742282632914493804e-16",
                        "-1.7061918515755658813886643360807941506026e-16",
                        "+2.8648550947866431686059742275149128532097e-17",
                        "-4.3903123387515743705708300635581930264932e-18",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP550Table() {
                    ddouble[] table = new ddouble[] {
                        "+9.9046952003677583452980909892685560220211e0",
                        "+1.7457195703493638670268774605842301626423e0",
                        "+4.4485143835395895517908980691387257332865e-3",
                        "-7.2010304163254130810198343852206591278130e-4",
                        "+1.1341628348281417196494365277674971518351e-4",
                        "-1.7374336580897863033681521713552237364531e-5",
                        "+2.5863922963959026202823134403373684422123e-6",
                        "-3.7352467460540317187012082428063309011073e-7",
                        "+5.2195333198745383633652293780621881181654e-8",
                        "-7.0278726365276477604547189681263837719249e-9",
                        "+9.0575714648094788378095755735468285740693e-10",
                        "-1.1049923551437412479966051252744393758215e-10",
                        "+1.2502592392145746886595182221567833182753e-11",
                        "-1.2560296789555983067508354458037771802938e-12",
                        "+9.8923969327658805210289800805267448235795e-14",
                        "-2.5783455864331571170996405622813590865423e-15",
                        "-1.1959197980885314308090697484445715103284e-15",
                        "+3.6907386281054377659057992306069280510918e-16",
                        "-7.5802082369761058154219288678882921536275e-17",
                        "+1.3191272266863489748453398009787166136697e-17",
                        "-2.0709352924942683709971417528432867705563e-18",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP575Table() {
                    ddouble[] table = new ddouble[] {
                        "+1.0341392300168692576815073537124500854404e1",
                        "+1.7478155719368827182798136501496488713744e0",
                        "+3.9483976967415467197243923363582162790324e-3",
                        "-6.1678582207486274150120983017632717877718e-4",
                        "+9.3932285935007618214166027823126378321333e-5",
                        "-1.3942576368147684203401318693042363445543e-5",
                        "+2.0155377091934059179784097142124616653640e-6",
                        "-2.8338170322235572882924315907534338122728e-7",
                        "+3.8667848521033951700967626018467109145690e-8",
                        "-5.1036617402656252285739371826560973197358e-9",
                        "+6.4822186035568976782034801556702059574385e-10",
                        "-7.8569840216713172244861363792858863586924e-11",
                        "+8.9582169939836612088697634303132531823255e-12",
                        "-9.3430505346716121359186435381564758993021e-13",
                        "+8.3433255398460752663966900872961130038288e-14",
                        "-5.0194161935068501497534857392304915639991e-15",
                        "-1.8638866866265553532489158337172735299032e-16",
                        "+1.3814503546622806449538763276073675362898e-16",
                        "-3.2507592838013992717479166963297550000616e-17",
                        "+5.9550319661342179505016956822392695449330e-18",
                        "-9.6059277147936727604795132193045542457462e-19",
                    };

                    return Array.AsReadOnly(table);
                }

                private static ReadOnlyCollection<ddouble> GenerateP600Table() {
                    ddouble[] table = new ddouble[] {
                        "+1.0778583684513033927527901315455968621751e1",
                        "+1.7496797332392408968277250389651058614251e0",
                        "+3.5189669497733730691963173468013185055984e-3",
                        "-5.3097451988786024930521740671199615843516e-4",
                        "+7.8248634675144376192267875950211135096044e-5",
                        "-1.1259734804357355520732571218667205233208e-5",
                        "+1.5810881301429940179604909446510426854675e-6",
                        "-2.1640855636581328192853722314931275637077e-7",
                        "+2.8821377175570235778387803624415931968080e-8",
                        "-3.7248496282749983016487971368930390597177e-9",
                        "+4.6524356600181628117907218442710224332932e-10",
                        "-5.5802597920544772892558160174876975048940e-11",
                        "+6.3599462815755674094837749987287418690108e-12",
                        "-6.7581185150872548804388452605299653608795e-13",
                        "+6.4351205293942310248746712100869628959571e-14",
                        "-4.9278957043477321302083370061338592280803e-15",
                        "+1.6435722514620170472620588515593101548392e-16",
                        "+4.1268203302778939427543557687778994328953e-17",
                        "-1.3161902643908545347384642459075404239476e-17",
                        "+2.6215087742035223236511919000393840784242e-18",
                        "-4.3853346738424709814528699516252640999735e-19",
                    };

                    return Array.AsReadOnly(table);
                }
            }
        }
    }
}
